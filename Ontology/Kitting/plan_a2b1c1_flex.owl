Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(:=<http://www.nist.gov/el/ontologies/plan_a2b1c1_flex.owl#>)
Prefix(:=<http://www.nist.gov/el/ontologies/kittingPlanClasses.owl#>)
Ontology(<http://www.nist.gov/el/ontologies/plan_a2b1c1_flex.owl>
Import(<file:kittingPlanClasses.owl>)

//*****************************************
// 1 start KittingPlan plan_a2b1c1_flex
Declaration(NamedIndividual(:plan_a2b1c1_flex))
ClassAssertion(:KittingPlan :plan_a2b1c1_flex)
DataPropertyAssertion(:hasKittingPlan_PlanId :plan_a2b1c1_flex
                      "plan_a2b1c1_flex.xml"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_PlanVersion :plan_a2b1c1_flex
                      "2013Sep16"^^xsd:token)
DataPropertyAssertion(:hasKittingPlan_PlanDateAndTime :plan_a2b1c1_flex
                      "2013-09-16T18:16:00-05:00"^^xsd:dateTime)
DataPropertyAssertion(:hasKittingPlan_PlanAuthor :plan_a2b1c1_flex
                      "Zeid Kootbally and Tom Kramer"^^xsd:token)
DataPropertyAssertion(:hasKittingPlan_PlanDescription :plan_a2b1c1_flex
                      "
    This is a version of a plan generated by PDDL for building a kit with
    two part a, one part b, and one part c. The plan is partially ordered
    to make the plan flexible. Specifically, the parts may be loaded in any
    order. Each section that loads a part is sequentially ordered.
    Some portions of the plan are implicitly sequentially ordered by
    the way predecessors are assigned.
  "^^xsd:string)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "finished_kit_receiver"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "kit_tray_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_a_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_a_2"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_b_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_c_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "tray_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :plan_a2b1c1_flex
                      "work_table_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasKittingPlan_PlanRoot
                        :plan_a2b1c1_flex :plan_1)

//*****************************************
// 2 start PartiallyOrderedActionGroup plan_1
Declaration(NamedIndividual(:plan_1))
ClassAssertion(:PartiallyOrderedActionGroup :plan_1)
ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_1)

//*****************************************
// 3 start StepWithPredecessors step_1
Declaration(NamedIndividual(:step_1))
ClassAssertion(:StepWithPredecessors :step_1)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_1 :attach_1)

//*****************************************
// 4 start AttachEndEffector attach_1
Declaration(NamedIndividual(:attach_1))
ClassAssertion(:AttachEndEffector :attach_1)
DataPropertyAssertion(:hasAttachEndEffector_RobotName :attach_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasAttachEndEffector_EndEffectorName :attach_1
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasAttachEndEffector_EndEffectorHolderName :attach_1
                      "tray_gripper_holder"^^xsd:NMTOKEN)
// 4 end AttachEndEffector
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_2)

//*****************************************
// 3 start StepWithPredecessors step_2
Declaration(NamedIndividual(:step_2))
ClassAssertion(:StepWithPredecessors :step_2)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_2
                      "2"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_2
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_2 :take_kit_tray_1)

//*****************************************
// 4 start TakeKitTray take_kit_tray_1
Declaration(NamedIndividual(:take_kit_tray_1))
ClassAssertion(:TakeKitTray :take_kit_tray_1)
DataPropertyAssertion(:hasTakeKitTray_RobotName :take_kit_tray_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakeKitTray_KitTrayName :take_kit_tray_1
                      "kit_tray_1"^^xsd:NMTOKEN)
// 4 end TakeKitTray
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_3)

//*****************************************
// 3 start StepWithPredecessors step_3
Declaration(NamedIndividual(:step_3))
ClassAssertion(:StepWithPredecessors :step_3)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_3
                      "3"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_3
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_3 :put_kit_tray_1)

//*****************************************
// 4 start PutKitTray put_kit_tray_1
Declaration(NamedIndividual(:put_kit_tray_1))
ClassAssertion(:PutKitTray :put_kit_tray_1)
DataPropertyAssertion(:hasPutKitTray_RobotName :put_kit_tray_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPutKitTray_KitTrayName :put_kit_tray_1
                      "kit_tray_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasPutKitTray_Location
                        :put_kit_tray_1 :kit_on_table_1)

//*****************************************
// 5 start RelativeLocationOn kit_on_table_1
Declaration(NamedIndividual(:kit_on_table_1))
ClassAssertion(:RelativeLocationOn :kit_on_table_1)
DataPropertyAssertion(:hasPhysicalLocation_RefObjectName :kit_on_table_1
                      "work_table_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasRelativeLocation_Description :kit_on_table_1
                      "kit on table"^^xsd:string)
// 5 end RelativeLocationOn
//*****************************************

// 4 end PutKitTray
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_4)

//*****************************************
// 3 start StepWithPredecessors step_4
Declaration(NamedIndividual(:step_4))
ClassAssertion(:StepWithPredecessors :step_4)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_4
                      "4"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_4
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_4 :create_kit_1)

//*****************************************
// 4 start CreateKit create_kit_1
Declaration(NamedIndividual(:create_kit_1))
ClassAssertion(:CreateKit :create_kit_1)
DataPropertyAssertion(:hasCreateKit_KitTrayName :create_kit_1
                      "kit_tray_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasCreateKit_KitName :create_kit_1
                      "kit_1"^^xsd:NMTOKEN)
// 4 end CreateKit
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_5)

//*****************************************
// 3 start StepWithPredecessors step_5
Declaration(NamedIndividual(:step_5))
ClassAssertion(:StepWithPredecessors :step_5)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_5
                      "2"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_5
                      "4"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_5 :detach_1)

//*****************************************
// 4 start DetachEndEffector detach_1
Declaration(NamedIndividual(:detach_1))
ClassAssertion(:DetachEndEffector :detach_1)
DataPropertyAssertion(:hasDetachEndEffector_RobotName :detach_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasDetachEndEffector_EndEffectorName :detach_1
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasDetachEndEffector_EndEffectorHolderName :detach_1
                      "tray_gripper_holder"^^xsd:NMTOKEN)
// 4 end DetachEndEffector
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_6)

//*****************************************
// 3 start StepWithPredecessors step_6
Declaration(NamedIndividual(:step_6))
ClassAssertion(:StepWithPredecessors :step_6)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_6
                      "6"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_6
                      "5"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_6 :attach_2)

//*****************************************
// 4 start AttachEndEffector attach_2
Declaration(NamedIndividual(:attach_2))
ClassAssertion(:AttachEndEffector :attach_2)
DataPropertyAssertion(:hasAttachEndEffector_RobotName :attach_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasAttachEndEffector_EndEffectorName :attach_2
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasAttachEndEffector_EndEffectorHolderName :attach_2
                      "part_gripper_holder"^^xsd:NMTOKEN)
// 4 end AttachEndEffector
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_7)

//*****************************************
// 3 start StepWithPredecessors step_7
Declaration(NamedIndividual(:step_7))
ClassAssertion(:StepWithPredecessors :step_7)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_7
                      "7"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_7
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_7 :ordered_1)

//*****************************************
// 4 start OrderedActionGroup ordered_1
Declaration(NamedIndividual(:ordered_1))
ClassAssertion(:OrderedActionGroup :ordered_1)
ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_1 :step_c_1_1)

//*****************************************
// 5 start NumberedPlanElement step_c_1_1
Declaration(NamedIndividual(:step_c_1_1))
ClassAssertion(:NumberedPlanElement :step_c_1_1)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_c_1_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_c_1_1 :locate_part_c_1)

//*****************************************
// 6 start LocatePart locate_part_c_1
Declaration(NamedIndividual(:locate_part_c_1))
ClassAssertion(:LocatePart :locate_part_c_1)
DataPropertyAssertion(:hasLocatePart_PartName :locate_part_c_1
                      "part_c_1"^^xsd:NMTOKEN)
// 6 end LocatePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_1 :step_c_1_2)

//*****************************************
// 5 start NumberedPlanElement step_c_1_2
Declaration(NamedIndividual(:step_c_1_2))
ClassAssertion(:NumberedPlanElement :step_c_1_2)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_c_1_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_c_1_2 :take_part_c_1)

//*****************************************
// 6 start TakePart take_part_c_1
Declaration(NamedIndividual(:take_part_c_1))
ClassAssertion(:TakePart :take_part_c_1)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_c_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_c_1
                      "part_c_1"^^xsd:NMTOKEN)
// 6 end TakePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_1 :step_c_1_3)

//*****************************************
// 5 start NumberedPlanElement step_c_1_3
Declaration(NamedIndividual(:step_c_1_3))
ClassAssertion(:NumberedPlanElement :step_c_1_3)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_c_1_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_c_1_3 :put_part_c_1)

//*****************************************
// 6 start PutPart put_part_c_1
Declaration(NamedIndividual(:put_part_c_1))
ClassAssertion(:PutPart :put_part_c_1)
DataPropertyAssertion(:hasPutPart_RobotName :put_part_c_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPutPart_PartName :put_part_c_1
                      "part_c_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasPutPart_Location
                        :put_part_c_1 :c_1_in_kit)

//*****************************************
// 7 start RelativeLocationIn c_1_in_kit
Declaration(NamedIndividual(:c_1_in_kit))
ClassAssertion(:RelativeLocationIn :c_1_in_kit)
DataPropertyAssertion(:hasPhysicalLocation_RefObjectName :c_1_in_kit
                      "kit_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasRelativeLocation_Description :c_1_in_kit
                      "part c1 in kit"^^xsd:string)
// 7 end RelativeLocationIn
//*****************************************

// 6 end PutPart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

// 4 end OrderedActionGroup
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_8)

//*****************************************
// 3 start StepWithPredecessors step_8
Declaration(NamedIndividual(:step_8))
ClassAssertion(:StepWithPredecessors :step_8)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_8
                      "8"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_8
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_8 :ordered_2)

//*****************************************
// 4 start OrderedActionGroup ordered_2
Declaration(NamedIndividual(:ordered_2))
ClassAssertion(:OrderedActionGroup :ordered_2)
ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_2 :step_b_1_1)

//*****************************************
// 5 start NumberedPlanElement step_b_1_1
Declaration(NamedIndividual(:step_b_1_1))
ClassAssertion(:NumberedPlanElement :step_b_1_1)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_b_1_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_b_1_1 :locate_part_b_1)

//*****************************************
// 6 start LocatePart locate_part_b_1
Declaration(NamedIndividual(:locate_part_b_1))
ClassAssertion(:LocatePart :locate_part_b_1)
DataPropertyAssertion(:hasLocatePart_PartName :locate_part_b_1
                      "part_b_1"^^xsd:NMTOKEN)
// 6 end LocatePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_2 :step_b_1_2)

//*****************************************
// 5 start NumberedPlanElement step_b_1_2
Declaration(NamedIndividual(:step_b_1_2))
ClassAssertion(:NumberedPlanElement :step_b_1_2)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_b_1_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_b_1_2 :take_part_b_1)

//*****************************************
// 6 start TakePart take_part_b_1
Declaration(NamedIndividual(:take_part_b_1))
ClassAssertion(:TakePart :take_part_b_1)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_b_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_b_1
                      "part_b_1"^^xsd:NMTOKEN)
// 6 end TakePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_2 :step_b_1_3)

//*****************************************
// 5 start NumberedPlanElement step_b_1_3
Declaration(NamedIndividual(:step_b_1_3))
ClassAssertion(:NumberedPlanElement :step_b_1_3)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_b_1_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_b_1_3 :put_part_b_1)

//*****************************************
// 6 start PutPart put_part_b_1
Declaration(NamedIndividual(:put_part_b_1))
ClassAssertion(:PutPart :put_part_b_1)
DataPropertyAssertion(:hasPutPart_RobotName :put_part_b_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPutPart_PartName :put_part_b_1
                      "part_b_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasPutPart_Location
                        :put_part_b_1 :b_1_in_kit)

//*****************************************
// 7 start RelativeLocationIn b_1_in_kit
Declaration(NamedIndividual(:b_1_in_kit))
ClassAssertion(:RelativeLocationIn :b_1_in_kit)
DataPropertyAssertion(:hasPhysicalLocation_RefObjectName :b_1_in_kit
                      "kit_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasRelativeLocation_Description :b_1_in_kit
                      "part b1 in kit"^^xsd:string)
// 7 end RelativeLocationIn
//*****************************************

// 6 end PutPart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

// 4 end OrderedActionGroup
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_9)

//*****************************************
// 3 start StepWithPredecessors step_9
Declaration(NamedIndividual(:step_9))
ClassAssertion(:StepWithPredecessors :step_9)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_9
                      "8"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_9
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_9 :ordered_3)

//*****************************************
// 4 start OrderedActionGroup ordered_3
Declaration(NamedIndividual(:ordered_3))
ClassAssertion(:OrderedActionGroup :ordered_3)
ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_3 :step_a_2_1)

//*****************************************
// 5 start NumberedPlanElement step_a_2_1
Declaration(NamedIndividual(:step_a_2_1))
ClassAssertion(:NumberedPlanElement :step_a_2_1)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_a_2_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_a_2_1 :locate_part_a_2)

//*****************************************
// 6 start LocatePart locate_part_a_2
Declaration(NamedIndividual(:locate_part_a_2))
ClassAssertion(:LocatePart :locate_part_a_2)
DataPropertyAssertion(:hasLocatePart_PartName :locate_part_a_2
                      "part_a_2"^^xsd:NMTOKEN)
// 6 end LocatePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_3 :step_a_2_2)

//*****************************************
// 5 start NumberedPlanElement step_a_2_2
Declaration(NamedIndividual(:step_a_2_2))
ClassAssertion(:NumberedPlanElement :step_a_2_2)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_a_2_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_a_2_2 :take_part_a_2)

//*****************************************
// 6 start TakePart take_part_a_2
Declaration(NamedIndividual(:take_part_a_2))
ClassAssertion(:TakePart :take_part_a_2)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_2
                      "part_a_2"^^xsd:NMTOKEN)
// 6 end TakePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_3 :step_a_2_3)

//*****************************************
// 5 start NumberedPlanElement step_a_2_3
Declaration(NamedIndividual(:step_a_2_3))
ClassAssertion(:NumberedPlanElement :step_a_2_3)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_a_2_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_a_2_3 :put_part_a_2)

//*****************************************
// 6 start PutPart put_part_a_2
Declaration(NamedIndividual(:put_part_a_2))
ClassAssertion(:PutPart :put_part_a_2)
DataPropertyAssertion(:hasPutPart_RobotName :put_part_a_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPutPart_PartName :put_part_a_2
                      "part_a_2"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasPutPart_Location
                        :put_part_a_2 :a_2_in_kit)

//*****************************************
// 7 start RelativeLocationIn a_2_in_kit
Declaration(NamedIndividual(:a_2_in_kit))
ClassAssertion(:RelativeLocationIn :a_2_in_kit)
DataPropertyAssertion(:hasPhysicalLocation_RefObjectName :a_2_in_kit
                      "kit_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasRelativeLocation_Description :a_2_in_kit
                      "part a2 in kit"^^xsd:string)
// 7 end RelativeLocationIn
//*****************************************

// 6 end PutPart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

// 4 end OrderedActionGroup
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_10)

//*****************************************
// 3 start StepWithPredecessors step_10
Declaration(NamedIndividual(:step_10))
ClassAssertion(:StepWithPredecessors :step_10)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_10
                      "10"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_10
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_10 :ordered_4)

//*****************************************
// 4 start OrderedActionGroup ordered_4
Declaration(NamedIndividual(:ordered_4))
ClassAssertion(:OrderedActionGroup :ordered_4)
ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_4 :step_a_1_1)

//*****************************************
// 5 start NumberedPlanElement step_a_1_1
Declaration(NamedIndividual(:step_a_1_1))
ClassAssertion(:NumberedPlanElement :step_a_1_1)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_a_1_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_a_1_1 :locate_part_a_1)

//*****************************************
// 6 start LocatePart locate_part_a_1
Declaration(NamedIndividual(:locate_part_a_1))
ClassAssertion(:LocatePart :locate_part_a_1)
DataPropertyAssertion(:hasLocatePart_PartName :locate_part_a_1
                      "part_a_1"^^xsd:NMTOKEN)
// 6 end LocatePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_4 :step_a_1_2)

//*****************************************
// 5 start NumberedPlanElement step_a_1_2
Declaration(NamedIndividual(:step_a_1_2))
ClassAssertion(:NumberedPlanElement :step_a_1_2)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_a_1_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_a_1_2 :take_part_a_1)

//*****************************************
// 6 start TakePart take_part_a_1
Declaration(NamedIndividual(:take_part_a_1))
ClassAssertion(:TakePart :take_part_a_1)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_1
                      "part_a_1"^^xsd:NMTOKEN)
// 6 end TakePart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_4 :step_a_1_3)

//*****************************************
// 5 start NumberedPlanElement step_a_1_3
Declaration(NamedIndividual(:step_a_1_3))
ClassAssertion(:NumberedPlanElement :step_a_1_3)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :step_a_1_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :step_a_1_3 :put_part_a_1)

//*****************************************
// 6 start PutPart put_part_a_1
Declaration(NamedIndividual(:put_part_a_1))
ClassAssertion(:PutPart :put_part_a_1)
DataPropertyAssertion(:hasPutPart_RobotName :put_part_a_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPutPart_PartName :put_part_a_1
                      "part_a_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasPutPart_Location
                        :put_part_a_1 :a_1_in_kit)

//*****************************************
// 7 start RelativeLocationIn a_1_in_kit
Declaration(NamedIndividual(:a_1_in_kit))
ClassAssertion(:RelativeLocationIn :a_1_in_kit)
DataPropertyAssertion(:hasPhysicalLocation_RefObjectName :a_1_in_kit
                      "kit_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasRelativeLocation_Description :a_1_in_kit
                      "part a1 in kit"^^xsd:string)
// 7 end RelativeLocationIn
//*****************************************

// 6 end PutPart
//*****************************************

// 5 end NumberedPlanElement
//*****************************************

// 4 end OrderedActionGroup
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_11)

//*****************************************
// 3 start StepWithPredecessors step_11
Declaration(NamedIndividual(:step_11))
ClassAssertion(:StepWithPredecessors :step_11)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_11
                      "11"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_11
                      "7"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_11
                      "8"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_11
                      "9"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_11
                      "10"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_11 :detach_2)

//*****************************************
// 4 start DetachEndEffector detach_2
Declaration(NamedIndividual(:detach_2))
ClassAssertion(:DetachEndEffector :detach_2)
DataPropertyAssertion(:hasDetachEndEffector_RobotName :detach_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasDetachEndEffector_EndEffectorName :detach_2
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasDetachEndEffector_EndEffectorHolderName :detach_2
                      "part_gripper_holder"^^xsd:NMTOKEN)
// 4 end DetachEndEffector
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_12)

//*****************************************
// 3 start StepWithPredecessors step_12
Declaration(NamedIndividual(:step_12))
ClassAssertion(:StepWithPredecessors :step_12)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_12
                      "12"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_12
                      "11"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_12 :attach_3)

//*****************************************
// 4 start AttachEndEffector attach_3
Declaration(NamedIndividual(:attach_3))
ClassAssertion(:AttachEndEffector :attach_3)
DataPropertyAssertion(:hasAttachEndEffector_RobotName :attach_3
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasAttachEndEffector_EndEffectorName :attach_3
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasAttachEndEffector_EndEffectorHolderName :attach_3
                      "tray_gripper_holder"^^xsd:NMTOKEN)
// 4 end AttachEndEffector
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_13)

//*****************************************
// 3 start StepWithPredecessors step_13
Declaration(NamedIndividual(:step_13))
ClassAssertion(:StepWithPredecessors :step_13)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_13
                      "13"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_13
                      "12"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_13 :take_kit_1)

//*****************************************
// 4 start TakeKit take_kit_1
Declaration(NamedIndividual(:take_kit_1))
ClassAssertion(:TakeKit :take_kit_1)
DataPropertyAssertion(:hasTakeKit_RobotName :take_kit_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakeKit_KitName :take_kit_1
                      "kit_1"^^xsd:NMTOKEN)
// 4 end TakeKit
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_14)

//*****************************************
// 3 start StepWithPredecessors step_14
Declaration(NamedIndividual(:step_14))
ClassAssertion(:StepWithPredecessors :step_14)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :step_14
                      "14"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :step_14
                      "13"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :step_14 :put_kit_1)

//*****************************************
// 4 start PutKit put_kit_1
Declaration(NamedIndividual(:put_kit_1))
ClassAssertion(:PutKit :put_kit_1)
DataPropertyAssertion(:hasPutKit_RobotName :put_kit_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPutKit_KitName :put_kit_1
                      "kit_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasPutKit_Location
                        :put_kit_1 :kit_in_receiver)

//*****************************************
// 5 start RelativeLocationIn kit_in_receiver
Declaration(NamedIndividual(:kit_in_receiver))
ClassAssertion(:RelativeLocationIn :kit_in_receiver)
DataPropertyAssertion(:hasPhysicalLocation_RefObjectName :kit_in_receiver
                      "finished_kit_receiver"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasRelativeLocation_Description :kit_in_receiver
                      "kit in receiver"^^xsd:string)
// 5 end RelativeLocationIn
//*****************************************

// 4 end PutKit
//*****************************************

// 3 end StepWithPredecessors
//*****************************************

// 2 end PartiallyOrderedActionGroup
//*****************************************

// 1 end KittingPlan
//*****************************************


//*****************************************
// AttachEndEffector individuals 
DifferentIndividuals(
 :attach_1
 :attach_2
 :attach_3)

//*****************************************
// DetachEndEffector individuals 
DifferentIndividuals(
 :detach_1
 :detach_2)

//*****************************************
// LocatePart individuals 
DifferentIndividuals(
 :locate_part_a_1
 :locate_part_a_2
 :locate_part_b_1
 :locate_part_c_1)

//*****************************************
// NumberedPlanElement individuals 
DifferentIndividuals(
 :step_a_1_1
 :step_a_1_2
 :step_a_1_3
 :step_a_2_1
 :step_a_2_2
 :step_a_2_3
 :step_b_1_1
 :step_b_1_2
 :step_b_1_3
 :step_c_1_1
 :step_c_1_2
 :step_c_1_3)

//*****************************************
// OrderedActionGroup individuals 
DifferentIndividuals(
 :ordered_1
 :ordered_2
 :ordered_3
 :ordered_4)

//*****************************************
// PutPart individuals 
DifferentIndividuals(
 :put_part_a_1
 :put_part_a_2
 :put_part_b_1
 :put_part_c_1)

//*****************************************
// RelativeLocationIn individuals 
DifferentIndividuals(
 :a_1_in_kit
 :a_2_in_kit
 :b_1_in_kit
 :c_1_in_kit
 :kit_in_receiver)

//*****************************************
// StepWithPredecessors individuals 
DifferentIndividuals(
 :step_1
 :step_10
 :step_11
 :step_12
 :step_13
 :step_14
 :step_2
 :step_3
 :step_4
 :step_5
 :step_6
 :step_7
 :step_8
 :step_9)

//*****************************************
// TakePart individuals 
DifferentIndividuals(
 :take_part_a_1
 :take_part_a_2
 :take_part_b_1
 :take_part_c_1)
)
