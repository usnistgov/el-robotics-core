Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(:=<http://www.nist.gov/el/ontologies/planTest.owl#>)
Prefix(ktp:=<http://www.nist.gov/el/ontologies/kittingPlanClasses.owl#>)
Prefix(ktw:=<http://www.nist.gov/el/ontologies/kittingWorkstationClasses.owl#>)
Ontology(<http://www.nist.gov/el/ontologies/planTest.owl>
Import(<file:kittingPlanClasses.owl>)

//*****************************************
// 1 start ktp:KittingPlan test
Declaration(NamedIndividual(:test))
ClassAssertion(ktp:KittingPlan :test)
DataPropertyAssertion(ktp:hasKittingPlan_PlanId :test
                      "test.xml"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_PlanVersion :test
                      "2013Sep16"^^xsd:token)
DataPropertyAssertion(ktp:hasKittingPlan_PlanDateAndTime :test
                      "2013-09-16T18:49:00-05:00"^^xsd:dateTime)
DataPropertyAssertion(ktp:hasKittingPlan_PlanAuthor :test
                      "Tom Kramer"^^xsd:token)
DataPropertyAssertion(ktp:hasKittingPlan_PlanDescription :test
                      "
    The point of this plan is to test various control structures
    and expressions. The plan is complete nonsense and is not executable.
    In addition to instances of actions, the plan has named instances of:
      AndType (binary boolean expression)
      DecimalType (arithmetic constant)
      EqualType (arithmetic comparison boolean expression)
      FalseType (boolean constant)
      GreaterType (arithmetic comparison boolean expression)
      IfActionGroupType (control structure)
      MinusType (binary arithmetic expression)
      OrderedActionGroupType (control structure)
      PartiallyOrderedActionGroupType (control structure)
      PlusType (binary arithmetic expression)
      PropValType  (arithmetic expression)
      TrueType (boolean constant)
      UnorderedActionGroupType (control structure)
      VarValType (arithmetic expression)
      VarSetType
      WhileActionGroupType (control structure)
    The plan also has implicit instances of:
      ElseDoType
      KittingPlanType
      NumberedPlanElementType
      StepWithPredecessorsType
      TestAndStepType
      VariableDeclarationType
  "^^xsd:string)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "finished_kit_receiver"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "kit_tray_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "part_a_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "part_a_2"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "part_b_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "part_c_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "part_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "tray_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :test
                      "work_table_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasKittingPlan_Variable
                        :test :X)

//*****************************************
// 2 start ktp:VariableDeclaration X
Declaration(NamedIndividual(:X))
ClassAssertion(ktp:VariableDeclaration :X)
DataPropertyAssertion(ktp:hasVariableDeclaration_Val :X
                      "0.000000"^^xsd:decimal)
// 2 end ktp:VariableDeclaration
//*****************************************

ObjectPropertyAssertion(ktp:hasKittingPlan_PlanRoot
                        :test :plan_1)

//*****************************************
// 2 start ktp:UnorderedActionGroup plan_1
Declaration(NamedIndividual(:plan_1))
ClassAssertion(ktp:UnorderedActionGroup :plan_1)
ObjectPropertyAssertion(ktp:hasUnorderedActionGroup_Step
                        :plan_1 :if_group_1)

//*****************************************
// 3 start ktp:IfActionGroup if_group_1
Declaration(NamedIndividual(:if_group_1))
ClassAssertion(ktp:IfActionGroup :if_group_1)
ObjectPropertyAssertion(ktp:hasIfActionGroup_If
                        :if_group_1 :if_1)

//*****************************************
// 4 start ktp:TestAndStep if_1
Declaration(NamedIndividual(:if_1))
ClassAssertion(ktp:TestAndStep :if_1)
ObjectPropertyAssertion(ktp:hasTestAndStep_Test
                        :if_1 :true_1)

//*****************************************
// 5 start ktp:True true_1
Declaration(NamedIndividual(:true_1))
ClassAssertion(ktp:True :true_1)
// 5 end ktp:True
//*****************************************

ObjectPropertyAssertion(ktp:hasTestAndStep_Step
                        :if_1 :take_part_a_1_1)

//*****************************************
// 5 start ktp:TakePart take_part_a_1_1
Declaration(NamedIndividual(:take_part_a_1_1))
ClassAssertion(ktp:TakePart :take_part_a_1_1)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_1_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_1_1
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end ktp:TakePart
//*****************************************

// 4 end ktp:TestAndStep
//*****************************************

ObjectPropertyAssertion(ktp:hasIfActionGroup_ElseIf
                        :if_group_1 :test_2)

//*****************************************
// 4 start ktp:TestAndStep test_2
Declaration(NamedIndividual(:test_2))
ClassAssertion(ktp:TestAndStep :test_2)
ObjectPropertyAssertion(ktp:hasTestAndStep_Test
                        :test_2 :and_1)

//*****************************************
// 5 start ktp:And and_1
Declaration(NamedIndividual(:and_1))
ClassAssertion(ktp:And :and_1)
ObjectPropertyAssertion(ktp:hasBinaryBooleanExpression_B1
                        :and_1 :true_2)

//*****************************************
// 6 start ktp:True true_2
Declaration(NamedIndividual(:true_2))
ClassAssertion(ktp:True :true_2)
// 6 end ktp:True
//*****************************************

ObjectPropertyAssertion(ktp:hasBinaryBooleanExpression_B2
                        :and_1 :false_2)

//*****************************************
// 6 start ktp:False false_2
Declaration(NamedIndividual(:false_2))
ClassAssertion(ktp:False :false_2)
// 6 end ktp:False
//*****************************************

// 5 end ktp:And
//*****************************************

ObjectPropertyAssertion(ktp:hasTestAndStep_Step
                        :test_2 :take_part_a_1_2)

//*****************************************
// 5 start ktp:TakePart take_part_a_1_2
Declaration(NamedIndividual(:take_part_a_1_2))
ClassAssertion(ktp:TakePart :take_part_a_1_2)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_1_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_1_2
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end ktp:TakePart
//*****************************************

// 4 end ktp:TestAndStep
//*****************************************

ObjectPropertyAssertion(ktp:hasIfActionGroup_ElseIf
                        :if_group_1 :test_3)

//*****************************************
// 4 start ktp:TestAndStep test_3
Declaration(NamedIndividual(:test_3))
ClassAssertion(ktp:TestAndStep :test_3)
ObjectPropertyAssertion(ktp:hasTestAndStep_Test
                        :test_3 :equal_1)

//*****************************************
// 5 start ktp:Equal equal_1
Declaration(NamedIndividual(:equal_1))
ClassAssertion(ktp:Equal :equal_1)
ObjectPropertyAssertion(ktp:hasArithmeticComparisonBooleanExpression_A1
                        :equal_1 :equal_1_A1)

//*****************************************
// 6 start ktp:Decimal equal_1_A1
Declaration(NamedIndividual(:equal_1_A1))
ClassAssertion(ktp:Decimal :equal_1_A1)
DataPropertyAssertion(ktp:hasDecimal_A :equal_1_A1
                      "7.000000"^^xsd:decimal)
// 6 end ktp:Decimal
//*****************************************

ObjectPropertyAssertion(ktp:hasArithmeticComparisonBooleanExpression_A2
                        :equal_1 :equal_1_A2)

//*****************************************
// 6 start ktp:Plus equal_1_A2
Declaration(NamedIndividual(:equal_1_A2))
ClassAssertion(ktp:Plus :equal_1_A2)
ObjectPropertyAssertion(ktp:hasBinaryArithmeticExpression_A1
                        :equal_1_A2 :equal_1_A2_A1)

//*****************************************
// 7 start ktp:VarVal equal_1_A2_A1
Declaration(NamedIndividual(:equal_1_A2_A1))
ClassAssertion(ktp:VarVal :equal_1_A2_A1)
ObjectPropertyAssertion(ktp:hasVarVal_Var
                        :equal_1_A2_A1 :X)
// 7 end ktp:VarVal
//*****************************************

ObjectPropertyAssertion(ktp:hasBinaryArithmeticExpression_A2
                        :equal_1_A2 :equal_1_A2_A2)

//*****************************************
// 7 start ktp:PropVal equal_1_A2_A2
Declaration(NamedIndividual(:equal_1_A2_A2))
ClassAssertion(ktp:PropVal :equal_1_A2_A2)
DataPropertyAssertion(ktp:hasPropVal_ThingName :equal_1_A2_A2
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPropVal_Property :equal_1_A2_A2
                      "Length"^^xsd:NMTOKEN)
// 7 end ktp:PropVal
//*****************************************

// 6 end ktp:Plus
//*****************************************

// 5 end ktp:Equal
//*****************************************

ObjectPropertyAssertion(ktp:hasTestAndStep_Step
                        :test_3 :take_part_a_1_3)

//*****************************************
// 5 start ktp:TakePart take_part_a_1_3
Declaration(NamedIndividual(:take_part_a_1_3))
ClassAssertion(ktp:TakePart :take_part_a_1_3)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_1_3
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_1_3
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end ktp:TakePart
//*****************************************

// 4 end ktp:TestAndStep
//*****************************************

ObjectPropertyAssertion(ktp:hasIfActionGroup_ElseDo
                        :if_group_1 :else_1)

//*****************************************
// 4 start ktp:ElseDo else_1
Declaration(NamedIndividual(:else_1))
ClassAssertion(ktp:ElseDo :else_1)
ObjectPropertyAssertion(ktp:hasElseDo_Step
                        :else_1 :take_part_a_1_4)

//*****************************************
// 5 start ktp:TakePart take_part_a_1_4
Declaration(NamedIndividual(:take_part_a_1_4))
ClassAssertion(ktp:TakePart :take_part_a_1_4)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_1_4
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_1_4
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end ktp:TakePart
//*****************************************

// 4 end ktp:ElseDo
//*****************************************

// 3 end ktp:IfActionGroup
//*****************************************

ObjectPropertyAssertion(ktp:hasUnorderedActionGroup_Step
                        :plan_1 :group_1)

//*****************************************
// 3 start ktp:PartiallyOrderedActionGroup group_1
Declaration(NamedIndividual(:group_1))
ClassAssertion(ktp:PartiallyOrderedActionGroup :group_1)
ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :group_1 :first_1)

//*****************************************
// 4 start ktp:StepWithPredecessors first_1
Declaration(NamedIndividual(:first_1))
ClassAssertion(ktp:StepWithPredecessors :first_1)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :first_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :first_1 :set_X_1)

//*****************************************
// 5 start ktp:VarSet set_X_1
Declaration(NamedIndividual(:set_X_1))
ClassAssertion(ktp:VarSet :set_X_1)
ObjectPropertyAssertion(ktp:hasVarSet_Var
                        :set_X_1 :X)
ObjectPropertyAssertion(ktp:hasVarSet_Val
                        :set_X_1 :set_X_1_Val)

//*****************************************
// 6 start ktp:Decimal set_X_1_Val
Declaration(NamedIndividual(:set_X_1_Val))
ClassAssertion(ktp:Decimal :set_X_1_Val)
DataPropertyAssertion(ktp:hasDecimal_A :set_X_1_Val
                      "10.000000"^^xsd:decimal)
// 6 end ktp:Decimal
//*****************************************

// 5 end ktp:VarSet
//*****************************************

// 4 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :group_1 :second_1)

//*****************************************
// 4 start ktp:StepWithPredecessors second_1
Declaration(NamedIndividual(:second_1))
ClassAssertion(ktp:StepWithPredecessors :second_1)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :second_1
                      "2"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :second_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :second_1 :while_1)

//*****************************************
// 5 start ktp:WhileActionGroup while_1
Declaration(NamedIndividual(:while_1))
ClassAssertion(ktp:WhileActionGroup :while_1)
ObjectPropertyAssertion(ktp:hasWhileActionGroup_Test
                        :while_1 :greater_1)

//*****************************************
// 6 start ktp:Greater greater_1
Declaration(NamedIndividual(:greater_1))
ClassAssertion(ktp:Greater :greater_1)
ObjectPropertyAssertion(ktp:hasArithmeticComparisonBooleanExpression_A1
                        :greater_1 :greater_1_A1)

//*****************************************
// 7 start ktp:VarVal greater_1_A1
Declaration(NamedIndividual(:greater_1_A1))
ClassAssertion(ktp:VarVal :greater_1_A1)
ObjectPropertyAssertion(ktp:hasVarVal_Var
                        :greater_1_A1 :X)
// 7 end ktp:VarVal
//*****************************************

ObjectPropertyAssertion(ktp:hasArithmeticComparisonBooleanExpression_A2
                        :greater_1 :greater_1_A12)

//*****************************************
// 7 start ktp:Decimal greater_1_A12
Declaration(NamedIndividual(:greater_1_A12))
ClassAssertion(ktp:Decimal :greater_1_A12)
DataPropertyAssertion(ktp:hasDecimal_A :greater_1_A12
                      "0.000000"^^xsd:decimal)
// 7 end ktp:Decimal
//*****************************************

// 6 end ktp:Greater
//*****************************************

ObjectPropertyAssertion(ktp:hasWhileActionGroup_Step
                        :while_1 :ordered_1)

//*****************************************
// 6 start ktp:OrderedActionGroup ordered_1
Declaration(NamedIndividual(:ordered_1))
ClassAssertion(ktp:OrderedActionGroup :ordered_1)
ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_1 :first_2)

//*****************************************
// 7 start ktp:NumberedPlanElement first_2
Declaration(NamedIndividual(:first_2))
ClassAssertion(ktp:NumberedPlanElement :first_2)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :first_2
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :first_2 :take_part_a_1_5)

//*****************************************
// 8 start ktp:TakePart take_part_a_1_5
Declaration(NamedIndividual(:take_part_a_1_5))
ClassAssertion(ktp:TakePart :take_part_a_1_5)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_1_5
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_1_5
                      "part_a_1"^^xsd:NMTOKEN)
// 8 end ktp:TakePart
//*****************************************

// 7 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_1 :second_2)

//*****************************************
// 7 start ktp:NumberedPlanElement second_2
Declaration(NamedIndividual(:second_2))
ClassAssertion(ktp:NumberedPlanElement :second_2)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :second_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :second_2 :set_X_2)

//*****************************************
// 8 start ktp:VarSet set_X_2
Declaration(NamedIndividual(:set_X_2))
ClassAssertion(ktp:VarSet :set_X_2)
ObjectPropertyAssertion(ktp:hasVarSet_Var
                        :set_X_2 :X)
ObjectPropertyAssertion(ktp:hasVarSet_Val
                        :set_X_2 :minus_1)

//*****************************************
// 9 start ktp:Minus minus_1
Declaration(NamedIndividual(:minus_1))
ClassAssertion(ktp:Minus :minus_1)
ObjectPropertyAssertion(ktp:hasBinaryArithmeticExpression_A1
                        :minus_1 :minus_1_A1)

//*****************************************
// 10 start ktp:VarVal minus_1_A1
Declaration(NamedIndividual(:minus_1_A1))
ClassAssertion(ktp:VarVal :minus_1_A1)
ObjectPropertyAssertion(ktp:hasVarVal_Var
                        :minus_1_A1 :X)
// 10 end ktp:VarVal
//*****************************************

ObjectPropertyAssertion(ktp:hasBinaryArithmeticExpression_A2
                        :minus_1 :minus_1_A2)

//*****************************************
// 10 start ktp:Decimal minus_1_A2
Declaration(NamedIndividual(:minus_1_A2))
ClassAssertion(ktp:Decimal :minus_1_A2)
DataPropertyAssertion(ktp:hasDecimal_A :minus_1_A2
                      "1.000000"^^xsd:decimal)
// 10 end ktp:Decimal
//*****************************************

// 9 end ktp:Minus
//*****************************************

// 8 end ktp:VarSet
//*****************************************

// 7 end ktp:NumberedPlanElement
//*****************************************

// 6 end ktp:OrderedActionGroup
//*****************************************

// 5 end ktp:WhileActionGroup
//*****************************************

// 4 end ktp:StepWithPredecessors
//*****************************************

// 3 end ktp:PartiallyOrderedActionGroup
//*****************************************

// 2 end ktp:UnorderedActionGroup
//*****************************************

// 1 end ktp:KittingPlan
//*****************************************


//*****************************************
// ktp:Decimal individuals 
DifferentIndividuals(
 :equal_1_A1
 :greater_1_A12
 :minus_1_A2
 :set_X_1_Val)

//*****************************************
// ktp:NumberedPlanElement individuals 
DifferentIndividuals(
 :first_2
 :second_2)

//*****************************************
// ktp:StepWithPredecessors individuals 
DifferentIndividuals(
 :first_1
 :second_1)

//*****************************************
// ktp:TakePart individuals 
DifferentIndividuals(
 :take_part_a_1_1
 :take_part_a_1_2
 :take_part_a_1_3
 :take_part_a_1_4
 :take_part_a_1_5)

//*****************************************
// ktp:TestAndStep individuals 
DifferentIndividuals(
 :if_1
 :test_2
 :test_3)

//*****************************************
// ktp:True individuals 
DifferentIndividuals(
 :true_1
 :true_2)

//*****************************************
// ktp:VarSet individuals 
DifferentIndividuals(
 :set_X_1
 :set_X_2)

//*****************************************
// ktp:VarVal individuals 
DifferentIndividuals(
 :equal_1_A2_A1
 :greater_1_A1
 :minus_1_A1)
)
