Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(:=<http://www.nist.gov/el/ontologies/test.owl#>)
Prefix(:=<http://www.nist.gov/el/ontologies/kittingPlanClasses.owl#>)
Ontology(<http://www.nist.gov/el/ontologies/test.owl>
Import(<file:kittingPlanClasses.owl>)

//*****************************************
// 1 start KittingPlan test
Declaration(NamedIndividual(:test))
ClassAssertion(:KittingPlan :test)
DataPropertyAssertion(:hasKittingPlan_PlanId :test
                      "test.xml"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_PlanVersion :test
                      "2013Sep16"^^xsd:token)
DataPropertyAssertion(:hasKittingPlan_PlanDateAndTime :test
                      "2013-09-16T18:49:00-05:00"^^xsd:dateTime)
DataPropertyAssertion(:hasKittingPlan_PlanAuthor :test
                      "Tom Kramer"^^xsd:token)
DataPropertyAssertion(:hasKittingPlan_PlanDescription :test
                      "
    The point of this plan is to test various control structures
    and expressions. The plan is complete nonsense and is not executable.
    In addition to instances of actions, the plan has named instances of:
      AndType (binary boolean expression)
      DecimalType (arithmetic constant)
      EqualType (arithmetic comparison boolean expression)
      FalseType (boolean constant)
      GreaterType (arithmetic comparison boolean expression)
      IfActionGroupType (control structure)
      MinusType (binary arithmetic expression)
      OrderedActionGroupType (control structure)
      PartiallyOrderedActionGroupType (control structure)
      PlusType (binary arithmetic expression)
      PropValType  (arithmetic expression)
      TrueType (boolean constant)
      UnorderedActionGroupType (control structure)
      VarValType (arithmetic expression)
      VarSetType
      WhileActionGroupType (control structure)
    The plan also has implicit instances of:
      ElseType
      KittingPlanType
      NumberedPlanElementType
      StepWithPredecessorsType
      TestAndStepType
      VariableDeclarationType
  "^^xsd:string)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "finished_kit_receiver"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "kit_tray_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "part_a_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "part_a_2"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "part_b_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "part_c_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "part_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "tray_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasKittingPlan_Object :test
                      "work_table_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(:hasKittingPlan_Variable
                        :test :X)

//*****************************************
// 2 start VariableDeclaration X
Declaration(NamedIndividual(:X))
ClassAssertion(:VariableDeclaration :X)
DataPropertyAssertion(:hasVariableDeclaration_Val :X
                      "0.000000"^^xsd:decimal)
// 2 end VariableDeclaration
//*****************************************

ObjectPropertyAssertion(:hasKittingPlan_PlanRoot
                        :test :plan_1)

//*****************************************
// 2 start UnorderedActionGroup plan_1
Declaration(NamedIndividual(:plan_1))
ClassAssertion(:UnorderedActionGroup :plan_1)
ObjectPropertyAssertion(:hasUnorderedActionGroup_Step
                        :plan_1 :if_group_1)

//*****************************************
// 3 start IfActionGroup if_group_1
Declaration(NamedIndividual(:if_group_1))
ClassAssertion(:IfActionGroup :if_group_1)
ObjectPropertyAssertion(:hasIfActionGroup_If
                        :if_group_1 :if_1)

//*****************************************
// 4 start TestAndStep if_1
Declaration(NamedIndividual(:if_1))
ClassAssertion(:TestAndStep :if_1)
ObjectPropertyAssertion(:hasTestAndStep_Test
                        :if_1 :true_1)

//*****************************************
// 5 start True true_1
Declaration(NamedIndividual(:true_1))
ClassAssertion(:True :true_1)
// 5 end True
//*****************************************

ObjectPropertyAssertion(:hasTestAndStep_Step
                        :if_1 :take_part_a_1_1)

//*****************************************
// 5 start TakePart take_part_a_1_1
Declaration(NamedIndividual(:take_part_a_1_1))
ClassAssertion(:TakePart :take_part_a_1_1)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_1_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_1_1
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end TakePart
//*****************************************

// 4 end TestAndStep
//*****************************************

ObjectPropertyAssertion(:hasIfActionGroup_ElseIf
                        :if_group_1 :test_2)

//*****************************************
// 4 start TestAndStep test_2
Declaration(NamedIndividual(:test_2))
ClassAssertion(:TestAndStep :test_2)
ObjectPropertyAssertion(:hasTestAndStep_Test
                        :test_2 :and_1)

//*****************************************
// 5 start And and_1
Declaration(NamedIndividual(:and_1))
ClassAssertion(:And :and_1)
ObjectPropertyAssertion(:hasBinaryBooleanExpression_B1
                        :and_1 :true_2)

//*****************************************
// 6 start True true_2
Declaration(NamedIndividual(:true_2))
ClassAssertion(:True :true_2)
// 6 end True
//*****************************************

ObjectPropertyAssertion(:hasBinaryBooleanExpression_B2
                        :and_1 :false_2)

//*****************************************
// 6 start False false_2
Declaration(NamedIndividual(:false_2))
ClassAssertion(:False :false_2)
// 6 end False
//*****************************************

// 5 end And
//*****************************************

ObjectPropertyAssertion(:hasTestAndStep_Step
                        :test_2 :take_part_a_1_2)

//*****************************************
// 5 start TakePart take_part_a_1_2
Declaration(NamedIndividual(:take_part_a_1_2))
ClassAssertion(:TakePart :take_part_a_1_2)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_1_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_1_2
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end TakePart
//*****************************************

// 4 end TestAndStep
//*****************************************

ObjectPropertyAssertion(:hasIfActionGroup_ElseIf
                        :if_group_1 :test_3)

//*****************************************
// 4 start TestAndStep test_3
Declaration(NamedIndividual(:test_3))
ClassAssertion(:TestAndStep :test_3)
ObjectPropertyAssertion(:hasTestAndStep_Test
                        :test_3 :equal_1)

//*****************************************
// 5 start Equal equal_1
Declaration(NamedIndividual(:equal_1))
ClassAssertion(:Equal :equal_1)
ObjectPropertyAssertion(:hasArithmeticComparisonBooleanExpression_A1
                        :equal_1 :equal_1_A1)

//*****************************************
// 6 start Decimal equal_1_A1
Declaration(NamedIndividual(:equal_1_A1))
ClassAssertion(:Decimal :equal_1_A1)
DataPropertyAssertion(:hasDecimal_A :equal_1_A1
                      "7.000000"^^xsd:decimal)
// 6 end Decimal
//*****************************************

ObjectPropertyAssertion(:hasArithmeticComparisonBooleanExpression_A2
                        :equal_1 :equal_1_A2)

//*****************************************
// 6 start Plus equal_1_A2
Declaration(NamedIndividual(:equal_1_A2))
ClassAssertion(:Plus :equal_1_A2)
ObjectPropertyAssertion(:hasBinaryArithmeticExpression_A1
                        :equal_1_A2 :equal_1_A2_A1)

//*****************************************
// 7 start VarVal equal_1_A2_A1
Declaration(NamedIndividual(:equal_1_A2_A1))
ClassAssertion(:VarVal :equal_1_A2_A1)
ObjectPropertyAssertion(:hasVarVal_Var
                        :equal_1_A2_A1 :X)
// 7 end VarVal
//*****************************************

ObjectPropertyAssertion(:hasBinaryArithmeticExpression_A2
                        :equal_1_A2 :equal_1_A2_A2)

//*****************************************
// 7 start PropVal equal_1_A2_A2
Declaration(NamedIndividual(:equal_1_A2_A2))
ClassAssertion(:PropVal :equal_1_A2_A2)
DataPropertyAssertion(:hasPropVal_ThingName :equal_1_A2_A2
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasPropVal_Property :equal_1_A2_A2
                      "Length"^^xsd:NMTOKEN)
// 7 end PropVal
//*****************************************

// 6 end Plus
//*****************************************

// 5 end Equal
//*****************************************

ObjectPropertyAssertion(:hasTestAndStep_Step
                        :test_3 :take_part_a_1_3)

//*****************************************
// 5 start TakePart take_part_a_1_3
Declaration(NamedIndividual(:take_part_a_1_3))
ClassAssertion(:TakePart :take_part_a_1_3)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_1_3
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_1_3
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end TakePart
//*****************************************

// 4 end TestAndStep
//*****************************************

ObjectPropertyAssertion(:hasIfActionGroup_Else
                        :if_group_1 :else_1)

//*****************************************
// 4 start Else else_1
Declaration(NamedIndividual(:else_1))
ClassAssertion(:Else :else_1)
ObjectPropertyAssertion(:hasElse_Step
                        :else_1 :take_part_a_1_4)

//*****************************************
// 5 start TakePart take_part_a_1_4
Declaration(NamedIndividual(:take_part_a_1_4))
ClassAssertion(:TakePart :take_part_a_1_4)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_1_4
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_1_4
                      "part_a_1"^^xsd:NMTOKEN)
// 5 end TakePart
//*****************************************

// 4 end Else
//*****************************************

// 3 end IfActionGroup
//*****************************************

ObjectPropertyAssertion(:hasUnorderedActionGroup_Step
                        :plan_1 :group_1)

//*****************************************
// 3 start PartiallyOrderedActionGroup group_1
Declaration(NamedIndividual(:group_1))
ClassAssertion(:PartiallyOrderedActionGroup :group_1)
ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :group_1 :first_1)

//*****************************************
// 4 start StepWithPredecessors first_1
Declaration(NamedIndividual(:first_1))
ClassAssertion(:StepWithPredecessors :first_1)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :first_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :first_1 :set_X_1)

//*****************************************
// 5 start VarSet set_X_1
Declaration(NamedIndividual(:set_X_1))
ClassAssertion(:VarSet :set_X_1)
ObjectPropertyAssertion(:hasVarSet_Var
                        :set_X_1 :X)
ObjectPropertyAssertion(:hasVarSet_Val
                        :set_X_1 :set_X_1_Val)

//*****************************************
// 6 start Decimal set_X_1_Val
Declaration(NamedIndividual(:set_X_1_Val))
ClassAssertion(:Decimal :set_X_1_Val)
DataPropertyAssertion(:hasDecimal_A :set_X_1_Val
                      "10.000000"^^xsd:decimal)
// 6 end Decimal
//*****************************************

// 5 end VarSet
//*****************************************

// 4 end StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(:hasPartiallyOrderedActionGroup_Step
                        :group_1 :second_1)

//*****************************************
// 4 start StepWithPredecessors second_1
Declaration(NamedIndividual(:second_1))
ClassAssertion(:StepWithPredecessors :second_1)
DataPropertyAssertion(:hasStepWithPredecessors_SequenceNumber :second_1
                      "2"^^xsd:positiveInteger)
DataPropertyAssertion(:hasStepWithPredecessors_Predecessor :second_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasStepWithPredecessors_PlanElement
                        :second_1 :while_1)

//*****************************************
// 5 start WhileActionGroup while_1
Declaration(NamedIndividual(:while_1))
ClassAssertion(:WhileActionGroup :while_1)
ObjectPropertyAssertion(:hasWhileActionGroup_Test
                        :while_1 :greater_1)

//*****************************************
// 6 start Greater greater_1
Declaration(NamedIndividual(:greater_1))
ClassAssertion(:Greater :greater_1)
ObjectPropertyAssertion(:hasArithmeticComparisonBooleanExpression_A1
                        :greater_1 :greater_1_A1)

//*****************************************
// 7 start VarVal greater_1_A1
Declaration(NamedIndividual(:greater_1_A1))
ClassAssertion(:VarVal :greater_1_A1)
ObjectPropertyAssertion(:hasVarVal_Var
                        :greater_1_A1 :X)
// 7 end VarVal
//*****************************************

ObjectPropertyAssertion(:hasArithmeticComparisonBooleanExpression_A2
                        :greater_1 :greater_1_A12)

//*****************************************
// 7 start Decimal greater_1_A12
Declaration(NamedIndividual(:greater_1_A12))
ClassAssertion(:Decimal :greater_1_A12)
DataPropertyAssertion(:hasDecimal_A :greater_1_A12
                      "0.000000"^^xsd:decimal)
// 7 end Decimal
//*****************************************

// 6 end Greater
//*****************************************

ObjectPropertyAssertion(:hasWhileActionGroup_Step
                        :while_1 :ordered_1)

//*****************************************
// 6 start OrderedActionGroup ordered_1
Declaration(NamedIndividual(:ordered_1))
ClassAssertion(:OrderedActionGroup :ordered_1)
ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_1 :first_2)

//*****************************************
// 7 start NumberedPlanElement first_2
Declaration(NamedIndividual(:first_2))
ClassAssertion(:NumberedPlanElement :first_2)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :first_2
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :first_2 :take_part_a_1_5)

//*****************************************
// 8 start TakePart take_part_a_1_5
Declaration(NamedIndividual(:take_part_a_1_5))
ClassAssertion(:TakePart :take_part_a_1_5)
DataPropertyAssertion(:hasTakePart_RobotName :take_part_a_1_5
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(:hasTakePart_PartName :take_part_a_1_5
                      "part_a_1"^^xsd:NMTOKEN)
// 8 end TakePart
//*****************************************

// 7 end NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(:hasOrderedActionGroup_Step
                        :ordered_1 :second_2)

//*****************************************
// 7 start NumberedPlanElement second_2
Declaration(NamedIndividual(:second_2))
ClassAssertion(:NumberedPlanElement :second_2)
DataPropertyAssertion(:hasNumberedPlanElement_SequenceNumber :second_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(:hasNumberedPlanElement_PlanElement
                        :second_2 :set_X_2)

//*****************************************
// 8 start VarSet set_X_2
Declaration(NamedIndividual(:set_X_2))
ClassAssertion(:VarSet :set_X_2)
ObjectPropertyAssertion(:hasVarSet_Var
                        :set_X_2 :X)
ObjectPropertyAssertion(:hasVarSet_Val
                        :set_X_2 :minus_1)

//*****************************************
// 9 start Minus minus_1
Declaration(NamedIndividual(:minus_1))
ClassAssertion(:Minus :minus_1)
ObjectPropertyAssertion(:hasBinaryArithmeticExpression_A1
                        :minus_1 :minus_1_A1)

//*****************************************
// 10 start VarVal minus_1_A1
Declaration(NamedIndividual(:minus_1_A1))
ClassAssertion(:VarVal :minus_1_A1)
ObjectPropertyAssertion(:hasVarVal_Var
                        :minus_1_A1 :X)
// 10 end VarVal
//*****************************************

ObjectPropertyAssertion(:hasBinaryArithmeticExpression_A2
                        :minus_1 :minus_1_A2)

//*****************************************
// 10 start Decimal minus_1_A2
Declaration(NamedIndividual(:minus_1_A2))
ClassAssertion(:Decimal :minus_1_A2)
DataPropertyAssertion(:hasDecimal_A :minus_1_A2
                      "1.000000"^^xsd:decimal)
// 10 end Decimal
//*****************************************

// 9 end Minus
//*****************************************

// 8 end VarSet
//*****************************************

// 7 end NumberedPlanElement
//*****************************************

// 6 end OrderedActionGroup
//*****************************************

// 5 end WhileActionGroup
//*****************************************

// 4 end StepWithPredecessors
//*****************************************

// 3 end PartiallyOrderedActionGroup
//*****************************************

// 2 end UnorderedActionGroup
//*****************************************

// 1 end KittingPlan
//*****************************************


//*****************************************
// Decimal individuals 
DifferentIndividuals(
 :equal_1_A1
 :greater_1_A12
 :minus_1_A2
 :set_X_1_Val)

//*****************************************
// NumberedPlanElement individuals 
DifferentIndividuals(
 :first_2
 :second_2)

//*****************************************
// StepWithPredecessors individuals 
DifferentIndividuals(
 :first_1
 :second_1)

//*****************************************
// TakePart individuals 
DifferentIndividuals(
 :take_part_a_1_1
 :take_part_a_1_2
 :take_part_a_1_3
 :take_part_a_1_4
 :take_part_a_1_5)

//*****************************************
// TestAndStep individuals 
DifferentIndividuals(
 :if_1
 :test_2
 :test_3)

//*****************************************
// True individuals 
DifferentIndividuals(
 :true_1
 :true_2)

//*****************************************
// VarSet individuals 
DifferentIndividuals(
 :set_X_1
 :set_X_2)

//*****************************************
// VarVal individuals 
DifferentIndividuals(
 :equal_1_A2_A1
 :greater_1_A1
 :minus_1_A1)
)
