Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(soap:=<http://www.nist.gov/el/ontologies/soapClasses.owl#>)
Prefix(ktw:=<http://www.nist.gov/el/ontologies/kittingWorkstationClasses.owl#>)

Ontology(<http://www.nist.gov/el/ontologies/kittingWorkstationClasses.owl>

Annotation(rdfs:comment
  "A schema file with a top level element (so a data file can be made).
      The include hierarchy has three levels. Three schema files are
      involved, one in each level.")
Annotation(rdfs:comment
  "owlPrefix=ktw")



DatatypeDefinition(ktw:angleUnit 
  DataOneOf("degree" "radian"))

AnnotationAssertion(rdfs:comment ktw:angleUnit
  "This kitting ontology models a kitting workstation including objects
      in the workstation and data associated with the workstation. The
      ontology assumes coordinate systems are right handed. For objects
      such as trays or a robot with a preferred orientation with respect to
      gravity, the Z axis points up (opposite the pull of gravity).")

DatatypeDefinition(ktw:lengthUnit 
  DataOneOf("meter" "millimeter" "inch"))

DatatypeDefinition(ktw:positiveDecimal 
  DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal))

DatatypeDefinition(ktw:weightUnit 
  DataOneOf("kilogram" "gram" "milligram" "ounce" "pound"))



Declaration(Class(ktw:BoxVolume))

AnnotationAssertion(rdfs:comment ktw:BoxVolume
  "BoxVolume is derived from DataThing.
  An instance of BoxVolume has the following:
    MaximumPoint
    MinimumPoint.
 
  The MaximumPoint and MinimumPoint are diagonally opposite corner
  points of a box shaped volume whose edges are aligned with the
  coordinate system in which the BoxVolume is located. The
  MinimumPoint has the minimum values of X, Y, and Z. The
  MaximumPoint has the maximum values of X, Y, and Z.")

Declaration(ObjectProperty(ktw:hasBoxVolume_MaximumPoint))
ObjectPropertyDomain(ktw:hasBoxVolume_MaximumPoint ktw:BoxVolume)
ObjectPropertyRange(ktw:hasBoxVolume_MaximumPoint ktw:Point)
InverseFunctionalObjectProperty(ktw:hasBoxVolume_MaximumPoint)
FunctionalObjectProperty(ktw:hasBoxVolume_MaximumPoint)
EquivalentClasses(ktw:BoxVolume ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasBoxVolume_MaximumPoint ktw:Point)
  ObjectAllValuesFrom (ktw:hasBoxVolume_MaximumPoint ktw:Point)))

Declaration(ObjectProperty(ktw:hadByMaximumPoint_BoxVolume))
InverseObjectProperties(ktw:hasBoxVolume_MaximumPoint
                        ktw:hadByMaximumPoint_BoxVolume)
ObjectPropertyDomain(ktw:hadByMaximumPoint_BoxVolume ktw:Point)
ObjectPropertyRange(ktw:hadByMaximumPoint_BoxVolume ktw:BoxVolume)

Declaration(ObjectProperty(ktw:hasBoxVolume_MinimumPoint))
ObjectPropertyDomain(ktw:hasBoxVolume_MinimumPoint ktw:BoxVolume)
ObjectPropertyRange(ktw:hasBoxVolume_MinimumPoint ktw:Point)
InverseFunctionalObjectProperty(ktw:hasBoxVolume_MinimumPoint)
FunctionalObjectProperty(ktw:hasBoxVolume_MinimumPoint)
EquivalentClasses(ktw:BoxVolume ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasBoxVolume_MinimumPoint ktw:Point)
  ObjectAllValuesFrom (ktw:hasBoxVolume_MinimumPoint ktw:Point)))

Declaration(ObjectProperty(ktw:hadByMinimumPoint_BoxVolume))
InverseObjectProperties(ktw:hasBoxVolume_MinimumPoint
                        ktw:hadByMinimumPoint_BoxVolume)
ObjectPropertyDomain(ktw:hadByMinimumPoint_BoxVolume ktw:Point)
ObjectPropertyRange(ktw:hadByMinimumPoint_BoxVolume ktw:BoxVolume)



Declaration(Class(ktw:BoxyShape))

AnnotationAssertion(rdfs:comment ktw:BoxyShape
  "BoxyShape is derived from InternalShape.
  An instance of BoxyShape has the following:
    Description (inherited)
    GraspPose (inherited, optional)
    Length
    Width
    Height
    HasTop.
 
  A BoxyShape is box shaped. The Length is larger of the two
  dimensions that are not the Height. The Width is smaller of the two
  dimensions that are not the Height. The coordinate system of a
  BoxyShape (i.e. the thing that is located and oriented by a
  Pose) has its origin in the middle of the bottom, its Z-axis
  parallel to the height sides and pointing into the box, and its
  X-axis parallel to the length sides. If HasTop is true, the top of
  the box (i.e. the side through which the +Z axis passes) exists and
  is closed. If HasTop is false, the box has no top.")

Declaration(DataProperty(ktw:hasBoxyShape_Length))
DataPropertyDomain(ktw:hasBoxyShape_Length ktw:BoxyShape)
DataPropertyRange(ktw:hasBoxyShape_Length ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasBoxyShape_Length)
EquivalentClasses(ktw:BoxyShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasBoxyShape_Length ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasBoxyShape_Length ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasBoxyShape_Width))
DataPropertyDomain(ktw:hasBoxyShape_Width ktw:BoxyShape)
DataPropertyRange(ktw:hasBoxyShape_Width ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasBoxyShape_Width)
EquivalentClasses(ktw:BoxyShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasBoxyShape_Width ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasBoxyShape_Width ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasBoxyShape_Height))
DataPropertyDomain(ktw:hasBoxyShape_Height ktw:BoxyShape)
DataPropertyRange(ktw:hasBoxyShape_Height ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasBoxyShape_Height)
EquivalentClasses(ktw:BoxyShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasBoxyShape_Height ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasBoxyShape_Height ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasBoxyShape_HasTop))
DataPropertyDomain(ktw:hasBoxyShape_HasTop ktw:BoxyShape)
DataPropertyRange(ktw:hasBoxyShape_HasTop xsd:boolean)
FunctionalDataProperty(ktw:hasBoxyShape_HasTop)
EquivalentClasses(ktw:BoxyShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasBoxyShape_HasTop xsd:boolean)
  DataAllValuesFrom (ktw:hasBoxyShape_HasTop xsd:boolean)))



Declaration(Class(ktw:CylindricalShape))

AnnotationAssertion(rdfs:comment ktw:CylindricalShape
  "CylindricalShape is derived from InternalShape.
  An instance of CylindricalShape has the following:
    Description (inherited)
    GraspPose (inherited, optional)
    Diameter
    Height
    HasTop.
 
  The cylinder is a right circular cylinder with a circular base
  having the given Diameter. The axis is perpendicular to the base.
  The base is always a surface that is part of the cylinder. The
  sides of the cylinder stop at the given Height as if cut by a plane
  perpendicular to the axis. The coordinate system of a
  CylindricalShape (i.e. the thing that is located and oriented by
  a pose) has its origin in the middle of the bottom, and its Z-axis
  on the axis of the cylinder. If HasTop is true, the top of the
  cylinder (i.e. the side through which the +Z axis passes) exists
  and is closed. If HasTop is false, the cylinder has no top.")

Declaration(DataProperty(ktw:hasCylindricalShape_Diameter))
DataPropertyDomain(ktw:hasCylindricalShape_Diameter ktw:CylindricalShape)
DataPropertyRange(ktw:hasCylindricalShape_Diameter ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasCylindricalShape_Diameter)
EquivalentClasses(ktw:CylindricalShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasCylindricalShape_Diameter ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasCylindricalShape_Diameter ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasCylindricalShape_Height))
DataPropertyDomain(ktw:hasCylindricalShape_Height ktw:CylindricalShape)
DataPropertyRange(ktw:hasCylindricalShape_Height ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasCylindricalShape_Height)
EquivalentClasses(ktw:CylindricalShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasCylindricalShape_Height ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasCylindricalShape_Height ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasCylindricalShape_HasTop))
DataPropertyDomain(ktw:hasCylindricalShape_HasTop ktw:CylindricalShape)
DataPropertyRange(ktw:hasCylindricalShape_HasTop xsd:boolean)
FunctionalDataProperty(ktw:hasCylindricalShape_HasTop)
EquivalentClasses(ktw:CylindricalShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasCylindricalShape_HasTop xsd:boolean)
  DataAllValuesFrom (ktw:hasCylindricalShape_HasTop xsd:boolean)))



Declaration(Class(ktw:DataThing))

AnnotationAssertion(rdfs:comment ktw:DataThing
  "An instance of DataThing has the following:
    .
  DataThing is an abstract type from which more specific types
  of data thing are derived. That includes all complex data
  types such as Vector, PhysicalLocation, etc.")

SubClassOf(soap:ActionBase ktw:DataThing)
SubClassOf(ktw:BoxVolume ktw:DataThing)
SubClassOf(soap:Domain ktw:DataThing)
SubClassOf(soap:Effect ktw:DataThing)
SubClassOf(soap:FunctionBooleanExpression ktw:DataThing)
SubClassOf(soap:FunctionOperation ktw:DataThing)
SubClassOf(soap:Function ktw:DataThing)
SubClassOf(ktw:KitDesign ktw:DataThing)
SubClassOf(soap:OrderingConstruct ktw:DataThing)
SubClassOf(ktw:PartRefAndPose ktw:DataThing)
SubClassOf(ktw:PhysicalLocation ktw:DataThing)
SubClassOf(ktw:Point ktw:DataThing)
SubClassOf(soap:Precondition ktw:DataThing)
SubClassOf(soap:PredicateGroupElement ktw:DataThing)
SubClassOf(soap:Predicate ktw:DataThing)
SubClassOf(soap:SOAP ktw:DataThing)
SubClassOf(ktw:ShapeDesign ktw:DataThing)
SubClassOf(ktw:Slot ktw:DataThing)
SubClassOf(soap:StateRelation ktw:DataThing)
SubClassOf(ktw:StockKeepingUnit ktw:DataThing)
SubClassOf(ktw:Vector ktw:DataThing)
DisjointUnion(ktw:DataThing
              soap:ActionBase
              ktw:BoxVolume
              soap:Domain
              soap:Effect
              soap:FunctionBooleanExpression
              soap:FunctionOperation
              soap:Function
              ktw:KitDesign
              soap:OrderingConstruct
              ktw:PartRefAndPose
              ktw:PhysicalLocation
              ktw:Point
              soap:Precondition
              soap:PredicateGroupElement
              soap:Predicate
              soap:SOAP
              ktw:ShapeDesign
              ktw:Slot
              soap:StateRelation
              ktw:StockKeepingUnit
              ktw:Vector)



Declaration(Class(ktw:EndEffector))

AnnotationAssertion(rdfs:comment ktw:EndEffector
  "EndEffector is derived from NoSkuObject.
  An instance of EndEffector has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Description
    Weight
    MaximumLoadWeight
    HeldObject (optional).
 
  EndEffector is an abstract type from which more specific types
  of end effector are derived. An EndEffector is an end effector
  for a robot. The optional HeldObject is for the object being held
  by the end effector, if the end effector is holding an object.
  Every EndEffector is either a GripperEffector or a
  VacuumEffector. Every EndEffector in a KittingWorkstation
  is either attached to the end of a robot arm or sitting in an
  EndEffectorHolder at an EndEffectorChangingStation.")

SubClassOf(ktw:GripperEffector ktw:EndEffector)
SubClassOf(ktw:VacuumEffector ktw:EndEffector)
DisjointUnion(ktw:EndEffector
              ktw:GripperEffector
              ktw:VacuumEffector)

Declaration(DataProperty(ktw:hasEndEffector_Description))
DataPropertyDomain(ktw:hasEndEffector_Description ktw:EndEffector)
DataPropertyRange(ktw:hasEndEffector_Description xsd:string)
FunctionalDataProperty(ktw:hasEndEffector_Description)
EquivalentClasses(ktw:EndEffector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasEndEffector_Description xsd:string)
  DataAllValuesFrom (ktw:hasEndEffector_Description xsd:string)))

Declaration(DataProperty(ktw:hasEndEffector_Weight))
DataPropertyDomain(ktw:hasEndEffector_Weight ktw:EndEffector)
DataPropertyRange(ktw:hasEndEffector_Weight ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasEndEffector_Weight)
EquivalentClasses(ktw:EndEffector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasEndEffector_Weight ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasEndEffector_Weight ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasEndEffector_MaximumLoadWeight))
DataPropertyDomain(ktw:hasEndEffector_MaximumLoadWeight ktw:EndEffector)
DataPropertyRange(ktw:hasEndEffector_MaximumLoadWeight ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasEndEffector_MaximumLoadWeight)
EquivalentClasses(ktw:EndEffector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasEndEffector_MaximumLoadWeight ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasEndEffector_MaximumLoadWeight ktw:positiveDecimal)))

Declaration(ObjectProperty(ktw:hasEndEffector_HeldObject))
ObjectPropertyDomain(ktw:hasEndEffector_HeldObject ktw:EndEffector)
ObjectPropertyRange(ktw:hasEndEffector_HeldObject ktw:SolidObject)
InverseFunctionalObjectProperty(ktw:hasEndEffector_HeldObject)
FunctionalObjectProperty(ktw:hasEndEffector_HeldObject)

Declaration(ObjectProperty(ktw:hadByHeldObject_EndEffector))
InverseObjectProperties(ktw:hasEndEffector_HeldObject
                        ktw:hadByHeldObject_EndEffector)
ObjectPropertyDomain(ktw:hadByHeldObject_EndEffector ktw:SolidObject)
ObjectPropertyRange(ktw:hadByHeldObject_EndEffector ktw:EndEffector)



Declaration(Class(ktw:EndEffectorChangingStation))

AnnotationAssertion(rdfs:comment ktw:EndEffectorChangingStation
  "EndEffectorChangingStation is derived from NoSkuObject.
  An instance of EndEffectorChangingStation has the
  following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Base
    EndEffectorHolder (multiple).
 
  An EndEffectorChangingStation is a place where end effectors
  are stored and where the robot can change end effectors. The
  coordinate system of an EndEffectorChangingStation is in the
  same place as the coordinate system of its Base. The shape of an
  EndEffectorChangingStation may also be found from the shapes of
  the Base and the EndEffectorHolders and their relative positions.")

Declaration(ObjectProperty(ktw:hasEndEffectorChangingStation_Base))
ObjectPropertyDomain(ktw:hasEndEffectorChangingStation_Base ktw:EndEffectorChangingStation)
ObjectPropertyRange(ktw:hasEndEffectorChangingStation_Base ktw:MechanicalComponent)
InverseFunctionalObjectProperty(ktw:hasEndEffectorChangingStation_Base)
FunctionalObjectProperty(ktw:hasEndEffectorChangingStation_Base)
EquivalentClasses(ktw:EndEffectorChangingStation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasEndEffectorChangingStation_Base ktw:MechanicalComponent)
  ObjectAllValuesFrom (ktw:hasEndEffectorChangingStation_Base ktw:MechanicalComponent)))

Declaration(ObjectProperty(ktw:hadByBase_EndEffectorChangingStation))
InverseObjectProperties(ktw:hasEndEffectorChangingStation_Base
                        ktw:hadByBase_EndEffectorChangingStation)
ObjectPropertyDomain(ktw:hadByBase_EndEffectorChangingStation ktw:MechanicalComponent)
ObjectPropertyRange(ktw:hadByBase_EndEffectorChangingStation ktw:EndEffectorChangingStation)

Declaration(ObjectProperty(ktw:hasEndEffectorChangingStation_EndEffectorHolder))
ObjectPropertyDomain(ktw:hasEndEffectorChangingStation_EndEffectorHolder ktw:EndEffectorChangingStation)
ObjectPropertyRange(ktw:hasEndEffectorChangingStation_EndEffectorHolder ktw:EndEffectorHolder)
InverseFunctionalObjectProperty(ktw:hasEndEffectorChangingStation_EndEffectorHolder)

Declaration(ObjectProperty(ktw:hadByEndEffectorHolder_EndEffectorChangingStation))
InverseObjectProperties(ktw:hasEndEffectorChangingStation_EndEffectorHolder
                        ktw:hadByEndEffectorHolder_EndEffectorChangingStation)
ObjectPropertyDomain(ktw:hadByEndEffectorHolder_EndEffectorChangingStation ktw:EndEffectorHolder)
ObjectPropertyRange(ktw:hadByEndEffectorHolder_EndEffectorChangingStation ktw:EndEffectorChangingStation)



Declaration(Class(ktw:EndEffectorHolder))

AnnotationAssertion(rdfs:comment ktw:EndEffectorHolder
  "EndEffectorHolder is derived from NoSkuObject.
  An instance of EndEffectorHolder has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    EndEffector (optional).
 
  An EndEffectorHolder holds zero or one end effector and is part
  of an EndEffectorChangingStation.")

Declaration(ObjectProperty(ktw:hasEndEffectorHolder_EndEffector))
ObjectPropertyDomain(ktw:hasEndEffectorHolder_EndEffector ktw:EndEffectorHolder)
ObjectPropertyRange(ktw:hasEndEffectorHolder_EndEffector ktw:EndEffector)
InverseFunctionalObjectProperty(ktw:hasEndEffectorHolder_EndEffector)
FunctionalObjectProperty(ktw:hasEndEffectorHolder_EndEffector)

Declaration(ObjectProperty(ktw:hadByEndEffector_EndEffectorHolder))
InverseObjectProperties(ktw:hasEndEffectorHolder_EndEffector
                        ktw:hadByEndEffector_EndEffectorHolder)
ObjectPropertyDomain(ktw:hadByEndEffector_EndEffectorHolder ktw:EndEffector)
ObjectPropertyRange(ktw:hadByEndEffector_EndEffectorHolder ktw:EndEffectorHolder)



Declaration(Class(ktw:ExternalShape))

AnnotationAssertion(rdfs:comment ktw:ExternalShape
  "ExternalShape is derived from ShapeDesign.
  An instance of ExternalShape has the following:
    Description (inherited)
    GraspPose (inherited, optional)
    ModelFormatName
    ModelFileName
    ModelName (optional).
 
  An ExternalShape is a shape defined in an external file. The
  ModelFormatName is the name of the format of model (for example,
  'STEP Advanced Brep' or 'USARSim'). The ModelFileName is the name
  of the file containing the model and may include a path (for
  example 'partFiles/STEP/ANC101.stp'). The model file may contain
  more than one shape model. The ModelName is optional and is the
  name of a model within the model file. The ModelName is necessary
  if the model file contains more than one model.")

Declaration(DataProperty(ktw:hasExternalShape_ModelFormatName))
DataPropertyDomain(ktw:hasExternalShape_ModelFormatName ktw:ExternalShape)
DataPropertyRange(ktw:hasExternalShape_ModelFormatName xsd:string)
FunctionalDataProperty(ktw:hasExternalShape_ModelFormatName)
EquivalentClasses(ktw:ExternalShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasExternalShape_ModelFormatName xsd:string)
  DataAllValuesFrom (ktw:hasExternalShape_ModelFormatName xsd:string)))

Declaration(DataProperty(ktw:hasExternalShape_ModelFileName))
DataPropertyDomain(ktw:hasExternalShape_ModelFileName ktw:ExternalShape)
DataPropertyRange(ktw:hasExternalShape_ModelFileName xsd:string)
FunctionalDataProperty(ktw:hasExternalShape_ModelFileName)
EquivalentClasses(ktw:ExternalShape ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasExternalShape_ModelFileName xsd:string)
  DataAllValuesFrom (ktw:hasExternalShape_ModelFileName xsd:string)))

Declaration(DataProperty(ktw:hasExternalShape_ModelName))
DataPropertyDomain(ktw:hasExternalShape_ModelName ktw:ExternalShape)
DataPropertyRange(ktw:hasExternalShape_ModelName xsd:string)
FunctionalDataProperty(ktw:hasExternalShape_ModelName)



Declaration(Class(ktw:GripperEffector))

AnnotationAssertion(rdfs:comment ktw:GripperEffector
  "GripperEffector is derived from EndEffector.
  An instance of GripperEffector has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Description (inherited)
    Weight (inherited)
    MaximumLoadWeight (inherited)
    HeldObject (inherited, optional).
 
  A GripperEffector holds an object by gripping
  it with fingers or claws or by suction.")



Declaration(Class(ktw:Human))

AnnotationAssertion(rdfs:comment ktw:Human
  "Human is derived from NoSkuObject.
  An instance of Human has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional).
 
  A Human is a type representing a human being. The shape of
  a human is the shape of a bounding box (or other bounding shape)
  that encloses the human completely.")



Declaration(Class(ktw:InternalShape))

AnnotationAssertion(rdfs:comment ktw:InternalShape
  "InternalShape is derived from ShapeDesign.
  An instance of InternalShape has the following:
    Description (inherited)
    GraspPose (inherited, optional).
 
  InternalShape is an abstract type from which more specific
  types of shape are derived. Instances of InternalShape in a
  instance file contain information about the appearance of the
  shape without referring to another file.")

SubClassOf(ktw:BoxyShape ktw:InternalShape)
SubClassOf(ktw:CylindricalShape ktw:InternalShape)
DisjointUnion(ktw:InternalShape
              ktw:BoxyShape
              ktw:CylindricalShape)



Declaration(Class(ktw:Kit))

AnnotationAssertion(rdfs:comment ktw:Kit
  "Kit is derived from NoSkuObject.
  An instance of Kit has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Design
    KitTray
    Finished
    Part (optional, multiple)
    Slot (optional, multiple).
 
  Finished is a boolean indicator of whether the Kit is finished.
 
  Part may occur several times (once for each part in the kit).
 
  The optional Slots may be used to keep track of whether each place
  in the kit that should have a part on it does have a part on it.
  The PartRefAndPose of each Slot should indicate a
  PartRefAndPose in the design of the kit (different for each slot).
 
  The locating point of the Tray in the kit should be (0,0,0), and
  its X and Z axes should be (1,0,0) and (0,0,1), respectively.")


Declaration(ObjectProperty(ktw:hasKit_Design))
ObjectPropertyDomain(ktw:hasKit_Design ktw:Kit)
ObjectPropertyRange(ktw:hasKit_Design ktw:KitDesign)
FunctionalObjectProperty(ktw:hasKit_Design)
EquivalentClasses(ktw:Kit ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasKit_Design ktw:KitDesign)
  ObjectAllValuesFrom (ktw:hasKit_Design ktw:KitDesign)))

HasKey(ktw:KitTray (ktw:hasSkuObject_Sku) (ktw:hasKitTray_SerialNumber))

Declaration(ObjectProperty(ktw:hasKit_KitTray))
ObjectPropertyDomain(ktw:hasKit_KitTray ktw:Kit)
ObjectPropertyRange(ktw:hasKit_KitTray ktw:KitTray)
InverseFunctionalObjectProperty(ktw:hasKit_KitTray)
FunctionalObjectProperty(ktw:hasKit_KitTray)
EquivalentClasses(ktw:Kit ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasKit_KitTray ktw:KitTray)
  ObjectAllValuesFrom (ktw:hasKit_KitTray ktw:KitTray)))

Declaration(ObjectProperty(ktw:hadByKitTray_Kit))
InverseObjectProperties(ktw:hasKit_KitTray
                        ktw:hadByKitTray_Kit)
ObjectPropertyDomain(ktw:hadByKitTray_Kit ktw:KitTray)
ObjectPropertyRange(ktw:hadByKitTray_Kit ktw:Kit)

HasKey(ktw:Part (ktw:hasSkuObject_Sku) (ktw:hasPart_SerialNumber))

Declaration(ObjectProperty(ktw:hasKit_Part))
ObjectPropertyDomain(ktw:hasKit_Part ktw:Kit)
ObjectPropertyRange(ktw:hasKit_Part ktw:Part)
InverseFunctionalObjectProperty(ktw:hasKit_Part)

Declaration(ObjectProperty(ktw:hadByPart_Kit))
InverseObjectProperties(ktw:hasKit_Part
                        ktw:hadByPart_Kit)
ObjectPropertyDomain(ktw:hadByPart_Kit ktw:Part)
ObjectPropertyRange(ktw:hadByPart_Kit ktw:Kit)

Declaration(ObjectProperty(ktw:hasKit_Slot))
ObjectPropertyDomain(ktw:hasKit_Slot ktw:Kit)
ObjectPropertyRange(ktw:hasKit_Slot ktw:Slot)
InverseFunctionalObjectProperty(ktw:hasKit_Slot)

Declaration(ObjectProperty(ktw:hadBySlot_Kit))
InverseObjectProperties(ktw:hasKit_Slot
                        ktw:hadBySlot_Kit)
ObjectPropertyDomain(ktw:hadBySlot_Kit ktw:Slot)
ObjectPropertyRange(ktw:hadBySlot_Kit ktw:Kit)

Declaration(DataProperty(ktw:hasKit_Finished))
DataPropertyDomain(ktw:hasKit_Finished ktw:Kit)
DataPropertyRange(ktw:hasKit_Finished xsd:boolean)
FunctionalDataProperty(ktw:hasKit_Finished)
EquivalentClasses(ktw:Kit ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasKit_Finished xsd:boolean)
  DataAllValuesFrom (ktw:hasKit_Finished xsd:boolean)))



Declaration(Class(ktw:KitDesign))

AnnotationAssertion(rdfs:comment ktw:KitDesign
  "KitDesign is derived from DataThing.
  An instance of KitDesign has the following:
    KitTraySku
    PartRefAndPose (multiple).
 
  The KitTraySku identifies a type of kit tray. The Pose
  in a PartRefAndPose is the location of the part relative to the
  coordinate system of the ShapeDesign of the tray.")


Declaration(ObjectProperty(ktw:hasKitDesign_KitTraySku))
ObjectPropertyDomain(ktw:hasKitDesign_KitTraySku ktw:KitDesign)
ObjectPropertyRange(ktw:hasKitDesign_KitTraySku ktw:StockKeepingUnit)
FunctionalObjectProperty(ktw:hasKitDesign_KitTraySku)
EquivalentClasses(ktw:KitDesign ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasKitDesign_KitTraySku ktw:StockKeepingUnit)
  ObjectAllValuesFrom (ktw:hasKitDesign_KitTraySku ktw:StockKeepingUnit)))

Declaration(ObjectProperty(ktw:hasKitDesign_PartRefAndPose))
ObjectPropertyDomain(ktw:hasKitDesign_PartRefAndPose ktw:KitDesign)
ObjectPropertyRange(ktw:hasKitDesign_PartRefAndPose ktw:PartRefAndPose)
InverseFunctionalObjectProperty(ktw:hasKitDesign_PartRefAndPose)

Declaration(ObjectProperty(ktw:hadByPartRefAndPose_KitDesign))
InverseObjectProperties(ktw:hasKitDesign_PartRefAndPose
                        ktw:hadByPartRefAndPose_KitDesign)
ObjectPropertyDomain(ktw:hadByPartRefAndPose_KitDesign ktw:PartRefAndPose)
ObjectPropertyRange(ktw:hadByPartRefAndPose_KitDesign ktw:KitDesign)



Declaration(Class(ktw:KittingWorkstation))

AnnotationAssertion(rdfs:comment ktw:KittingWorkstation
  "KittingWorkstation is derived from NoSkuObject.
  An instance of KittingWorkstation has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    AngleUnit
    LengthUnit
    ChangingStation
    Object (multiple)
    OtherObstacle (optional, multiple)
    Robot
    KitDesign (multiple)
    Sku (multiple)
    WeightUnit.
 
  All angle, length, and weight values related to the workstation
  use the units implicitly.
 
  The workstation includes one robot and one end effector changing
  station. There may be many instances of Object in the workstation,
  including such things as work tables, large boxes with kits,
  large boxes with empty kit trays, and parts trays.
 
  The collection of instances of KitDesign is a library of all kit
  designs known to the workstation.
 
  The collection of instances of Sku is a library of all stock
  keeping units known to the workstation.
 
  The OtherObstacles are obstacles to robot motion of unspecified
  type.
 
  Containers of various sorts enter and leave the workstation. The
  robot builds kits of parts by executing kitting plans as directed
  by a kitting plan execution system.
 
  The location of each instance of KittingWorkstation should be given
  relative to itself in order to end the chain of relative locations.")

Declaration(DataProperty(ktw:hasKittingWorkstation_AngleUnit))
DataPropertyDomain(ktw:hasKittingWorkstation_AngleUnit ktw:KittingWorkstation)
DataPropertyRange(ktw:hasKittingWorkstation_AngleUnit ktw:angleUnit)
FunctionalDataProperty(ktw:hasKittingWorkstation_AngleUnit)
EquivalentClasses(ktw:KittingWorkstation ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasKittingWorkstation_AngleUnit ktw:angleUnit)
  DataAllValuesFrom (ktw:hasKittingWorkstation_AngleUnit ktw:angleUnit)))

Declaration(ObjectProperty(ktw:hasKittingWorkstation_ChangingStation))
ObjectPropertyDomain(ktw:hasKittingWorkstation_ChangingStation ktw:KittingWorkstation)
ObjectPropertyRange(ktw:hasKittingWorkstation_ChangingStation ktw:EndEffectorChangingStation)
InverseFunctionalObjectProperty(ktw:hasKittingWorkstation_ChangingStation)
FunctionalObjectProperty(ktw:hasKittingWorkstation_ChangingStation)
EquivalentClasses(ktw:KittingWorkstation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasKittingWorkstation_ChangingStation ktw:EndEffectorChangingStation)
  ObjectAllValuesFrom (ktw:hasKittingWorkstation_ChangingStation ktw:EndEffectorChangingStation)))

Declaration(ObjectProperty(ktw:hadByChangingStation_KittingWorkstation))
InverseObjectProperties(ktw:hasKittingWorkstation_ChangingStation
                        ktw:hadByChangingStation_KittingWorkstation)
ObjectPropertyDomain(ktw:hadByChangingStation_KittingWorkstation ktw:EndEffectorChangingStation)
ObjectPropertyRange(ktw:hadByChangingStation_KittingWorkstation ktw:KittingWorkstation)

Declaration(ObjectProperty(ktw:hasKittingWorkstation_KitDesign))
ObjectPropertyDomain(ktw:hasKittingWorkstation_KitDesign ktw:KittingWorkstation)
ObjectPropertyRange(ktw:hasKittingWorkstation_KitDesign ktw:KitDesign)
InverseFunctionalObjectProperty(ktw:hasKittingWorkstation_KitDesign)

Declaration(ObjectProperty(ktw:hadByKitDesign_KittingWorkstation))
InverseObjectProperties(ktw:hasKittingWorkstation_KitDesign
                        ktw:hadByKitDesign_KittingWorkstation)
ObjectPropertyDomain(ktw:hadByKitDesign_KittingWorkstation ktw:KitDesign)
ObjectPropertyRange(ktw:hadByKitDesign_KittingWorkstation ktw:KittingWorkstation)

Declaration(DataProperty(ktw:hasKittingWorkstation_LengthUnit))
DataPropertyDomain(ktw:hasKittingWorkstation_LengthUnit ktw:KittingWorkstation)
DataPropertyRange(ktw:hasKittingWorkstation_LengthUnit ktw:lengthUnit)
FunctionalDataProperty(ktw:hasKittingWorkstation_LengthUnit)
EquivalentClasses(ktw:KittingWorkstation ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasKittingWorkstation_LengthUnit ktw:lengthUnit)
  DataAllValuesFrom (ktw:hasKittingWorkstation_LengthUnit ktw:lengthUnit)))

Declaration(ObjectProperty(ktw:hasKittingWorkstation_Object))
ObjectPropertyDomain(ktw:hasKittingWorkstation_Object ktw:KittingWorkstation)
ObjectPropertyRange(ktw:hasKittingWorkstation_Object ktw:SolidObject)
InverseFunctionalObjectProperty(ktw:hasKittingWorkstation_Object)

Declaration(ObjectProperty(ktw:hadByObject_KittingWorkstation))
InverseObjectProperties(ktw:hasKittingWorkstation_Object
                        ktw:hadByObject_KittingWorkstation)
ObjectPropertyDomain(ktw:hadByObject_KittingWorkstation ktw:SolidObject)
ObjectPropertyRange(ktw:hadByObject_KittingWorkstation ktw:KittingWorkstation)

Declaration(ObjectProperty(ktw:hasKittingWorkstation_OtherObstacle))
ObjectPropertyDomain(ktw:hasKittingWorkstation_OtherObstacle ktw:KittingWorkstation)
ObjectPropertyRange(ktw:hasKittingWorkstation_OtherObstacle ktw:BoxVolume)
InverseFunctionalObjectProperty(ktw:hasKittingWorkstation_OtherObstacle)

Declaration(ObjectProperty(ktw:hadByOtherObstacle_KittingWorkstation))
InverseObjectProperties(ktw:hasKittingWorkstation_OtherObstacle
                        ktw:hadByOtherObstacle_KittingWorkstation)
ObjectPropertyDomain(ktw:hadByOtherObstacle_KittingWorkstation ktw:BoxVolume)
ObjectPropertyRange(ktw:hadByOtherObstacle_KittingWorkstation ktw:KittingWorkstation)

Declaration(ObjectProperty(ktw:hasKittingWorkstation_Robot))
ObjectPropertyDomain(ktw:hasKittingWorkstation_Robot ktw:KittingWorkstation)
ObjectPropertyRange(ktw:hasKittingWorkstation_Robot ktw:Robot)
InverseFunctionalObjectProperty(ktw:hasKittingWorkstation_Robot)
FunctionalObjectProperty(ktw:hasKittingWorkstation_Robot)
EquivalentClasses(ktw:KittingWorkstation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasKittingWorkstation_Robot ktw:Robot)
  ObjectAllValuesFrom (ktw:hasKittingWorkstation_Robot ktw:Robot)))

Declaration(ObjectProperty(ktw:hadByRobot_KittingWorkstation))
InverseObjectProperties(ktw:hasKittingWorkstation_Robot
                        ktw:hadByRobot_KittingWorkstation)
ObjectPropertyDomain(ktw:hadByRobot_KittingWorkstation ktw:Robot)
ObjectPropertyRange(ktw:hadByRobot_KittingWorkstation ktw:KittingWorkstation)

Declaration(ObjectProperty(ktw:hasKittingWorkstation_Sku))
ObjectPropertyDomain(ktw:hasKittingWorkstation_Sku ktw:KittingWorkstation)
ObjectPropertyRange(ktw:hasKittingWorkstation_Sku ktw:StockKeepingUnit)
InverseFunctionalObjectProperty(ktw:hasKittingWorkstation_Sku)

Declaration(ObjectProperty(ktw:hadBySku_KittingWorkstation))
InverseObjectProperties(ktw:hasKittingWorkstation_Sku
                        ktw:hadBySku_KittingWorkstation)
ObjectPropertyDomain(ktw:hadBySku_KittingWorkstation ktw:StockKeepingUnit)
ObjectPropertyRange(ktw:hadBySku_KittingWorkstation ktw:KittingWorkstation)

Declaration(DataProperty(ktw:hasKittingWorkstation_WeightUnit))
DataPropertyDomain(ktw:hasKittingWorkstation_WeightUnit ktw:KittingWorkstation)
DataPropertyRange(ktw:hasKittingWorkstation_WeightUnit ktw:weightUnit)
FunctionalDataProperty(ktw:hasKittingWorkstation_WeightUnit)
EquivalentClasses(ktw:KittingWorkstation ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasKittingWorkstation_WeightUnit ktw:weightUnit)
  DataAllValuesFrom (ktw:hasKittingWorkstation_WeightUnit ktw:weightUnit)))



Declaration(Class(ktw:KitTray))

AnnotationAssertion(rdfs:comment ktw:KitTray
  "KitTray is derived from SkuObject.
  An instance of KitTray has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber.
 
  The Sku specifies the SKU of the kit tray. A
  KitTray is designed to hold Parts with various SKUs in
  known positions.")

Declaration(DataProperty(ktw:hasKitTray_SerialNumber))
DataPropertyDomain(ktw:hasKitTray_SerialNumber ktw:KitTray)
DataPropertyRange(ktw:hasKitTray_SerialNumber xsd:NMTOKEN)
FunctionalDataProperty(ktw:hasKitTray_SerialNumber)
EquivalentClasses(ktw:KitTray ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasKitTray_SerialNumber xsd:NMTOKEN)
  DataAllValuesFrom (ktw:hasKitTray_SerialNumber xsd:NMTOKEN)))



Declaration(Class(ktw:LargeBoxWithEmptyKitTrays))

AnnotationAssertion(rdfs:comment ktw:LargeBoxWithEmptyKitTrays
  "LargeBoxWithEmptyKitTrays is derived from NoSkuObject.
  An instance of LargeBoxWithEmptyKitTrays has the
  following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    LargeContainer
    KitTray (optional, multiple).
 
  The location point of the LargeContainer should be (0,0,0), its Z
  axis should be (0,0,1), and its X axis should be (1,0,0). The
  PrimaryLocation of a KitTray in a LargeBoxWithEmptyKitTrays should
  be given by a PoseLocationIn or RelativeLocationIn that
  is relative to the LargeContainer. The KitTrays in a
  LargeBoxWithEmptyKitTrays are intended to all be of the same
  SKU, although there is currently no formal requirement for that.")

HasKey(ktw:LargeContainer (ktw:hasSkuObject_Sku) (ktw:hasLargeContainer_SerialNumber))

Declaration(ObjectProperty(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer))
ObjectPropertyDomain(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer ktw:LargeBoxWithEmptyKitTrays)
ObjectPropertyRange(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer ktw:LargeContainer)
InverseFunctionalObjectProperty(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer)
FunctionalObjectProperty(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer)
EquivalentClasses(ktw:LargeBoxWithEmptyKitTrays ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer ktw:LargeContainer)
  ObjectAllValuesFrom (ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer ktw:LargeContainer)))

Declaration(ObjectProperty(ktw:hadByLargeContainer_LargeBoxWithEmptyKitTrays))
InverseObjectProperties(ktw:hasLargeBoxWithEmptyKitTrays_LargeContainer
                        ktw:hadByLargeContainer_LargeBoxWithEmptyKitTrays)
ObjectPropertyDomain(ktw:hadByLargeContainer_LargeBoxWithEmptyKitTrays ktw:LargeContainer)
ObjectPropertyRange(ktw:hadByLargeContainer_LargeBoxWithEmptyKitTrays ktw:LargeBoxWithEmptyKitTrays)

Declaration(ObjectProperty(ktw:hasLargeBoxWithEmptyKitTrays_KitTray))
ObjectPropertyDomain(ktw:hasLargeBoxWithEmptyKitTrays_KitTray ktw:LargeBoxWithEmptyKitTrays)
ObjectPropertyRange(ktw:hasLargeBoxWithEmptyKitTrays_KitTray ktw:KitTray)
InverseFunctionalObjectProperty(ktw:hasLargeBoxWithEmptyKitTrays_KitTray)

Declaration(ObjectProperty(ktw:hadByKitTray_LargeBoxWithEmptyKitTrays))
InverseObjectProperties(ktw:hasLargeBoxWithEmptyKitTrays_KitTray
                        ktw:hadByKitTray_LargeBoxWithEmptyKitTrays)
ObjectPropertyDomain(ktw:hadByKitTray_LargeBoxWithEmptyKitTrays ktw:KitTray)
ObjectPropertyRange(ktw:hadByKitTray_LargeBoxWithEmptyKitTrays ktw:LargeBoxWithEmptyKitTrays)



Declaration(Class(ktw:LargeBoxWithKits))

AnnotationAssertion(rdfs:comment ktw:LargeBoxWithKits
  "LargeBoxWithKits is derived from NoSkuObject.
  An instance of LargeBoxWithKits has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    LargeContainer
    Kit (optional, multiple)
    KitDesign
    Capacity.
 
  The coordinate system of a LargeBoxWithKits is in the same place as
  the coordinate system of its LargeContainer. The PrimaryLocation of
  the LargeContainer should be relative to the LargeBoxWithKits.
  The KitDesign is an identifier for a KitDesign. The
  PrimaryLocation of a Kit in a LargeBoxWithKits should be given by a
  PoseLocationIn or RelativeLocationIn that is relative to
  the LargeContainer.
 
  The Capacity is an xsd:positiveInteger giving the maximum number of
  kits of the given design that can be held in the box.
 
  The Kits in a LargeBoxWithKits are intended to all be of
  the given design, but there is currently no formal constraint
  requiring that.")

Declaration(ObjectProperty(ktw:hasLargeBoxWithKits_LargeContainer))
ObjectPropertyDomain(ktw:hasLargeBoxWithKits_LargeContainer ktw:LargeBoxWithKits)
ObjectPropertyRange(ktw:hasLargeBoxWithKits_LargeContainer ktw:LargeContainer)
InverseFunctionalObjectProperty(ktw:hasLargeBoxWithKits_LargeContainer)
FunctionalObjectProperty(ktw:hasLargeBoxWithKits_LargeContainer)
EquivalentClasses(ktw:LargeBoxWithKits ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasLargeBoxWithKits_LargeContainer ktw:LargeContainer)
  ObjectAllValuesFrom (ktw:hasLargeBoxWithKits_LargeContainer ktw:LargeContainer)))

Declaration(ObjectProperty(ktw:hadByLargeContainer_LargeBoxWithKits))
InverseObjectProperties(ktw:hasLargeBoxWithKits_LargeContainer
                        ktw:hadByLargeContainer_LargeBoxWithKits)
ObjectPropertyDomain(ktw:hadByLargeContainer_LargeBoxWithKits ktw:LargeContainer)
ObjectPropertyRange(ktw:hadByLargeContainer_LargeBoxWithKits ktw:LargeBoxWithKits)

Declaration(ObjectProperty(ktw:hasLargeBoxWithKits_Kit))
ObjectPropertyDomain(ktw:hasLargeBoxWithKits_Kit ktw:LargeBoxWithKits)
ObjectPropertyRange(ktw:hasLargeBoxWithKits_Kit ktw:Kit)
InverseFunctionalObjectProperty(ktw:hasLargeBoxWithKits_Kit)

Declaration(ObjectProperty(ktw:hadByKit_LargeBoxWithKits))
InverseObjectProperties(ktw:hasLargeBoxWithKits_Kit
                        ktw:hadByKit_LargeBoxWithKits)
ObjectPropertyDomain(ktw:hadByKit_LargeBoxWithKits ktw:Kit)
ObjectPropertyRange(ktw:hadByKit_LargeBoxWithKits ktw:LargeBoxWithKits)


Declaration(ObjectProperty(ktw:hasLargeBoxWithKits_KitDesign))
ObjectPropertyDomain(ktw:hasLargeBoxWithKits_KitDesign ktw:LargeBoxWithKits)
ObjectPropertyRange(ktw:hasLargeBoxWithKits_KitDesign ktw:KitDesign)
FunctionalObjectProperty(ktw:hasLargeBoxWithKits_KitDesign)
EquivalentClasses(ktw:LargeBoxWithKits ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasLargeBoxWithKits_KitDesign ktw:KitDesign)
  ObjectAllValuesFrom (ktw:hasLargeBoxWithKits_KitDesign ktw:KitDesign)))

Declaration(DataProperty(ktw:hasLargeBoxWithKits_Capacity))
DataPropertyDomain(ktw:hasLargeBoxWithKits_Capacity ktw:LargeBoxWithKits)
DataPropertyRange(ktw:hasLargeBoxWithKits_Capacity xsd:positiveInteger)
FunctionalDataProperty(ktw:hasLargeBoxWithKits_Capacity)
EquivalentClasses(ktw:LargeBoxWithKits ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasLargeBoxWithKits_Capacity xsd:positiveInteger)
  DataAllValuesFrom (ktw:hasLargeBoxWithKits_Capacity xsd:positiveInteger)))



Declaration(Class(ktw:LargeContainer))

AnnotationAssertion(rdfs:comment ktw:LargeContainer
  "LargeContainer is derived from SkuObject.
  An instance of LargeContainer has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber.
 
  The Sku specifies the SKU of the LargeContainer. A
  LargeContainer can hold one or more instances of a single type
  of tray, bin, or kit.")

Declaration(DataProperty(ktw:hasLargeContainer_SerialNumber))
DataPropertyDomain(ktw:hasLargeContainer_SerialNumber ktw:LargeContainer)
DataPropertyRange(ktw:hasLargeContainer_SerialNumber xsd:NMTOKEN)
FunctionalDataProperty(ktw:hasLargeContainer_SerialNumber)
EquivalentClasses(ktw:LargeContainer ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasLargeContainer_SerialNumber xsd:NMTOKEN)
  DataAllValuesFrom (ktw:hasLargeContainer_SerialNumber xsd:NMTOKEN)))



Declaration(Class(ktw:MechanicalComponent))

AnnotationAssertion(rdfs:comment ktw:MechanicalComponent
  "MechanicalComponent is derived from NoSkuObject.
  An instance of MechanicalComponent has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional).
 
  A MechanicalComponent is a component of kitting workstation
  device such as a robot or an end effector changing station.")



Declaration(Class(ktw:NoSkuObject))

AnnotationAssertion(rdfs:comment ktw:NoSkuObject
  "NoSkuObject is derived from SolidObject.
  An instance NoSkuObject has the following:
    PrimaryLocation (inherited)
    SecondaryLocations (inherited, optional, multiple)
    InternalShape (optional)
    ExternalShape (optional).
 
  A SkuObject is an abstract type from which more specific types
  of solid object are derived. The InternalShape and ExternalShape
  are not required to represent the same shape, but they should not
  be inconsistent. If a NoSkuObject consists of components it may
  also get its shape from the shape of the components and their
  relative positions.")

SubClassOf(ktw:EndEffectorChangingStation ktw:NoSkuObject)
SubClassOf(ktw:EndEffectorHolder ktw:NoSkuObject)
SubClassOf(ktw:EndEffector ktw:NoSkuObject)
SubClassOf(ktw:Human ktw:NoSkuObject)
SubClassOf(ktw:Kit ktw:NoSkuObject)
SubClassOf(ktw:KittingWorkstation ktw:NoSkuObject)
SubClassOf(ktw:LargeBoxWithEmptyKitTrays ktw:NoSkuObject)
SubClassOf(ktw:LargeBoxWithKits ktw:NoSkuObject)
SubClassOf(ktw:MechanicalComponent ktw:NoSkuObject)
SubClassOf(ktw:Robot ktw:NoSkuObject)
SubClassOf(ktw:WorkTable ktw:NoSkuObject)
DisjointUnion(ktw:NoSkuObject
              ktw:EndEffectorChangingStation
              ktw:EndEffectorHolder
              ktw:EndEffector
              ktw:Human
              ktw:Kit
              ktw:KittingWorkstation
              ktw:LargeBoxWithEmptyKitTrays
              ktw:LargeBoxWithKits
              ktw:MechanicalComponent
              ktw:Robot
              ktw:WorkTable)

Declaration(ObjectProperty(ktw:hasNoSkuObject_InternalShape))
ObjectPropertyDomain(ktw:hasNoSkuObject_InternalShape ktw:NoSkuObject)
ObjectPropertyRange(ktw:hasNoSkuObject_InternalShape ktw:InternalShape)
InverseFunctionalObjectProperty(ktw:hasNoSkuObject_InternalShape)
FunctionalObjectProperty(ktw:hasNoSkuObject_InternalShape)

Declaration(ObjectProperty(ktw:hadByInternalShape_NoSkuObject))
InverseObjectProperties(ktw:hasNoSkuObject_InternalShape
                        ktw:hadByInternalShape_NoSkuObject)
ObjectPropertyDomain(ktw:hadByInternalShape_NoSkuObject ktw:InternalShape)
ObjectPropertyRange(ktw:hadByInternalShape_NoSkuObject ktw:NoSkuObject)

Declaration(ObjectProperty(ktw:hasNoSkuObject_ExternalShape))
ObjectPropertyDomain(ktw:hasNoSkuObject_ExternalShape ktw:NoSkuObject)
ObjectPropertyRange(ktw:hasNoSkuObject_ExternalShape ktw:ExternalShape)
InverseFunctionalObjectProperty(ktw:hasNoSkuObject_ExternalShape)
FunctionalObjectProperty(ktw:hasNoSkuObject_ExternalShape)

Declaration(ObjectProperty(ktw:hadByExternalShape_NoSkuObject))
InverseObjectProperties(ktw:hasNoSkuObject_ExternalShape
                        ktw:hadByExternalShape_NoSkuObject)
ObjectPropertyDomain(ktw:hadByExternalShape_NoSkuObject ktw:ExternalShape)
ObjectPropertyRange(ktw:hadByExternalShape_NoSkuObject ktw:NoSkuObject)



Declaration(Class(ktw:Part))

AnnotationAssertion(rdfs:comment ktw:Part
  "Part is derived from SkuObject.
  An instance of Part has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber.
 
  The Part represents a part.
  The Sku specifies the SKU for the part.")

Declaration(DataProperty(ktw:hasPart_SerialNumber))
DataPropertyDomain(ktw:hasPart_SerialNumber ktw:Part)
DataPropertyRange(ktw:hasPart_SerialNumber xsd:NMTOKEN)
FunctionalDataProperty(ktw:hasPart_SerialNumber)
EquivalentClasses(ktw:Part ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasPart_SerialNumber xsd:NMTOKEN)
  DataAllValuesFrom (ktw:hasPart_SerialNumber xsd:NMTOKEN)))



Declaration(Class(ktw:PartRefAndPose))

AnnotationAssertion(rdfs:comment ktw:PartRefAndPose
  "PartRefAndPose is derived from DataThing.
  An instance of PartRefAndPose has the following:
    Sku
    Point
    ZAxis
    XAxis.
 
  The Sku identifies a type of part. The Point specifies
  the location of the origin of the part in the coordinate system of
  the tray of the KitDesign to which the PartRefAndPose
  belongs. The ZAxis and XAxis specify the orientation of the part
  relative to that coordinate system.")


Declaration(ObjectProperty(ktw:hasPartRefAndPose_Sku))
ObjectPropertyDomain(ktw:hasPartRefAndPose_Sku ktw:PartRefAndPose)
ObjectPropertyRange(ktw:hasPartRefAndPose_Sku ktw:StockKeepingUnit)
FunctionalObjectProperty(ktw:hasPartRefAndPose_Sku)
EquivalentClasses(ktw:PartRefAndPose ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPartRefAndPose_Sku ktw:StockKeepingUnit)
  ObjectAllValuesFrom (ktw:hasPartRefAndPose_Sku ktw:StockKeepingUnit)))

Declaration(ObjectProperty(ktw:hasPartRefAndPose_Point))
ObjectPropertyDomain(ktw:hasPartRefAndPose_Point ktw:PartRefAndPose)
ObjectPropertyRange(ktw:hasPartRefAndPose_Point ktw:Point)
InverseFunctionalObjectProperty(ktw:hasPartRefAndPose_Point)
FunctionalObjectProperty(ktw:hasPartRefAndPose_Point)
EquivalentClasses(ktw:PartRefAndPose ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPartRefAndPose_Point ktw:Point)
  ObjectAllValuesFrom (ktw:hasPartRefAndPose_Point ktw:Point)))

Declaration(ObjectProperty(ktw:hadByPoint_PartRefAndPose))
InverseObjectProperties(ktw:hasPartRefAndPose_Point
                        ktw:hadByPoint_PartRefAndPose)
ObjectPropertyDomain(ktw:hadByPoint_PartRefAndPose ktw:Point)
ObjectPropertyRange(ktw:hadByPoint_PartRefAndPose ktw:PartRefAndPose)

Declaration(ObjectProperty(ktw:hasPartRefAndPose_XAxis))
ObjectPropertyDomain(ktw:hasPartRefAndPose_XAxis ktw:PartRefAndPose)
ObjectPropertyRange(ktw:hasPartRefAndPose_XAxis ktw:Vector)
InverseFunctionalObjectProperty(ktw:hasPartRefAndPose_XAxis)
FunctionalObjectProperty(ktw:hasPartRefAndPose_XAxis)
EquivalentClasses(ktw:PartRefAndPose ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPartRefAndPose_XAxis ktw:Vector)
  ObjectAllValuesFrom (ktw:hasPartRefAndPose_XAxis ktw:Vector)))

Declaration(ObjectProperty(ktw:hadByXAxis_PartRefAndPose))
InverseObjectProperties(ktw:hasPartRefAndPose_XAxis
                        ktw:hadByXAxis_PartRefAndPose)
ObjectPropertyDomain(ktw:hadByXAxis_PartRefAndPose ktw:Vector)
ObjectPropertyRange(ktw:hadByXAxis_PartRefAndPose ktw:PartRefAndPose)

Declaration(ObjectProperty(ktw:hasPartRefAndPose_ZAxis))
ObjectPropertyDomain(ktw:hasPartRefAndPose_ZAxis ktw:PartRefAndPose)
ObjectPropertyRange(ktw:hasPartRefAndPose_ZAxis ktw:Vector)
InverseFunctionalObjectProperty(ktw:hasPartRefAndPose_ZAxis)
FunctionalObjectProperty(ktw:hasPartRefAndPose_ZAxis)
EquivalentClasses(ktw:PartRefAndPose ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPartRefAndPose_ZAxis ktw:Vector)
  ObjectAllValuesFrom (ktw:hasPartRefAndPose_ZAxis ktw:Vector)))

Declaration(ObjectProperty(ktw:hadByZAxis_PartRefAndPose))
InverseObjectProperties(ktw:hasPartRefAndPose_ZAxis
                        ktw:hadByZAxis_PartRefAndPose)
ObjectPropertyDomain(ktw:hadByZAxis_PartRefAndPose ktw:Vector)
ObjectPropertyRange(ktw:hadByZAxis_PartRefAndPose ktw:PartRefAndPose)



Declaration(Class(ktw:PartsBin))

AnnotationAssertion(rdfs:comment ktw:PartsBin
  "PartsBin is derived from PartsVessel.
  An instance of PartsBin has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber (inherited)
    PartSku (inherited)
    PartQuantity (inherited)
    Part (inherited, optional, multiple).
 
  The Sku specifies the SKU for the PartsBin. A
  PartsBin holds a number of Parts (PartQuantity) with the
  same SKU (PartSku)in unknown random positions. Each
  Part in the tray should be listed explictly and have a
  RelativeLocationIn with the bin as its RefObject.")



Declaration(Class(ktw:PartsVessel))

AnnotationAssertion(rdfs:comment ktw:PartsVessel
  "PartsVessel is derived from SkuObject.
  An instance of PartsVessel has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber
    PartSku
    PartQuantity
    Part (optional, multiple)
 
  PartsVessel is an abstract type from which more specific types
  of things that supply parts are derived. The Sku
  specifies the SKU for the PartsVessel. The shape of a
  PartsVessel is as specified in its Sku. The PartSku
  specifies the SKU for the Parts in the PartsVessel. The value
  of PartQuantity should be the number of instances of Part.")

SubClassOf(ktw:PartsBin ktw:PartsVessel)
SubClassOf(ktw:PartsTray ktw:PartsVessel)
DisjointUnion(ktw:PartsVessel
              ktw:PartsBin
              ktw:PartsTray)

Declaration(DataProperty(ktw:hasPartsVessel_SerialNumber))
DataPropertyDomain(ktw:hasPartsVessel_SerialNumber ktw:PartsVessel)
DataPropertyRange(ktw:hasPartsVessel_SerialNumber xsd:NMTOKEN)
FunctionalDataProperty(ktw:hasPartsVessel_SerialNumber)
EquivalentClasses(ktw:PartsVessel ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasPartsVessel_SerialNumber xsd:NMTOKEN)
  DataAllValuesFrom (ktw:hasPartsVessel_SerialNumber xsd:NMTOKEN)))


Declaration(ObjectProperty(ktw:hasPartsVessel_PartSku))
ObjectPropertyDomain(ktw:hasPartsVessel_PartSku ktw:PartsVessel)
ObjectPropertyRange(ktw:hasPartsVessel_PartSku ktw:StockKeepingUnit)
FunctionalObjectProperty(ktw:hasPartsVessel_PartSku)
EquivalentClasses(ktw:PartsVessel ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPartsVessel_PartSku ktw:StockKeepingUnit)
  ObjectAllValuesFrom (ktw:hasPartsVessel_PartSku ktw:StockKeepingUnit)))

Declaration(DataProperty(ktw:hasPartsVessel_PartQuantity))
DataPropertyDomain(ktw:hasPartsVessel_PartQuantity ktw:PartsVessel)
DataPropertyRange(ktw:hasPartsVessel_PartQuantity xsd:nonNegativeInteger)
FunctionalDataProperty(ktw:hasPartsVessel_PartQuantity)
EquivalentClasses(ktw:PartsVessel ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasPartsVessel_PartQuantity xsd:nonNegativeInteger)
  DataAllValuesFrom (ktw:hasPartsVessel_PartQuantity xsd:nonNegativeInteger)))

Declaration(ObjectProperty(ktw:hasPartsVessel_Part))
ObjectPropertyDomain(ktw:hasPartsVessel_Part ktw:PartsVessel)
ObjectPropertyRange(ktw:hasPartsVessel_Part ktw:Part)
InverseFunctionalObjectProperty(ktw:hasPartsVessel_Part)

Declaration(ObjectProperty(ktw:hadByPart_PartsVessel))
InverseObjectProperties(ktw:hasPartsVessel_Part
                        ktw:hadByPart_PartsVessel)
ObjectPropertyDomain(ktw:hadByPart_PartsVessel ktw:Part)
ObjectPropertyRange(ktw:hadByPart_PartsVessel ktw:PartsVessel)



Declaration(Class(ktw:PartsTray))

AnnotationAssertion(rdfs:comment ktw:PartsTray
  "PartsTray is derived from PartsVessel.
  An instance of PartsTray has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    Sku (inherited)
    SerialNumber (inherited)
    PartSku (inherited)
    PartQuantity (inherited)
    Part (inherited, optional, multiple).
 
  The Sku specifies the SKU of the PartsTray. A
  PartsTray holds a number of Parts (PartQuantity) with the
  same SKU (PartSku) in known positions. Each Part in
  the tray should be listed explictly and have a PoseLocation with
  the parts tray as its RefObject.")



Declaration(Class(ktw:PhysicalLocation))

AnnotationAssertion(rdfs:comment ktw:PhysicalLocation
  "PhysicalLocation is derived from DataThing.
  An instance of PhysicalLocation has the following:
    RefObject
    Timestamp (optional).
 
  PhysicalLocation is an abstract type from which more specific
  types of physical location are derived. A PhysicalLocation says
  where a SolidObject is relative to its reference object.
  Timestamp represents the most recent date and time when the
  location was updated.")

SubClassOf(ktw:PoseLocation ktw:PhysicalLocation)
SubClassOf(ktw:RelativeLocation ktw:PhysicalLocation)
DisjointUnion(ktw:PhysicalLocation
              ktw:PoseLocation
              ktw:RelativeLocation)


Declaration(ObjectProperty(ktw:hasPhysicalLocation_RefObject))
ObjectPropertyDomain(ktw:hasPhysicalLocation_RefObject ktw:PhysicalLocation)
ObjectPropertyRange(ktw:hasPhysicalLocation_RefObject ktw:SolidObject)
FunctionalObjectProperty(ktw:hasPhysicalLocation_RefObject)
EquivalentClasses(ktw:PhysicalLocation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPhysicalLocation_RefObject ktw:SolidObject)
  ObjectAllValuesFrom (ktw:hasPhysicalLocation_RefObject ktw:SolidObject)))

Declaration(DataProperty(ktw:hasPhysicalLocation_Timestamp))
DataPropertyDomain(ktw:hasPhysicalLocation_Timestamp ktw:PhysicalLocation)
DataPropertyRange(ktw:hasPhysicalLocation_Timestamp xsd:dateTime)
FunctionalDataProperty(ktw:hasPhysicalLocation_Timestamp)



Declaration(Class(ktw:Point))

AnnotationAssertion(rdfs:comment ktw:Point
  "Point is derived from DataThing.
  An instance of Point has the following:
    X
    Y
    Z.
 
  X, Y, and Z are the Cartesian coordinates of the Point.")

Declaration(DataProperty(ktw:hasPoint_X))
DataPropertyDomain(ktw:hasPoint_X ktw:Point)
DataPropertyRange(ktw:hasPoint_X xsd:decimal)
FunctionalDataProperty(ktw:hasPoint_X)
EquivalentClasses(ktw:Point ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasPoint_X xsd:decimal)
  DataAllValuesFrom (ktw:hasPoint_X xsd:decimal)))

Declaration(DataProperty(ktw:hasPoint_Y))
DataPropertyDomain(ktw:hasPoint_Y ktw:Point)
DataPropertyRange(ktw:hasPoint_Y xsd:decimal)
FunctionalDataProperty(ktw:hasPoint_Y)
EquivalentClasses(ktw:Point ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasPoint_Y xsd:decimal)
  DataAllValuesFrom (ktw:hasPoint_Y xsd:decimal)))

Declaration(DataProperty(ktw:hasPoint_Z))
DataPropertyDomain(ktw:hasPoint_Z ktw:Point)
DataPropertyRange(ktw:hasPoint_Z xsd:decimal)
FunctionalDataProperty(ktw:hasPoint_Z)
EquivalentClasses(ktw:Point ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasPoint_Z xsd:decimal)
  DataAllValuesFrom (ktw:hasPoint_Z xsd:decimal)))



Declaration(Class(ktw:PoseLocation))

AnnotationAssertion(rdfs:comment ktw:PoseLocation
  "PoseLocation is derived from PhysicalLocation.
  An instance of PoseLocation has the following:
    RefObject (inherited)
    Timestamp (inherited, optional).
    Point
    XAxis
    ZAxis 
    PositionStandardDeviation (optional)
    OrientationStandardDeviation (optional).
 
  PoseLocation is an abstract type from which more specific types
  of pose location are derived. The Point locates the origin of a
  coordinate system. The XAxis and ZAxis give the orientation of the
  coordinate system. The data for the Point, the ZAxis and the XAxis
  are expressed relative to the coordinate system of the reference
  object.
 
  The PositionStandardDeviation is based on a normal distribution of
  actual position about its given value. Thus, for example, the
  actual position is expected to be within the given
  PositionStandardDeviation amount 68% of the time and within twice
  the given amount 95% of the time. The PositionStandardDeviation is
  measured in the length units being used.
 
  The OrientationStandardDeviation is based on a normal distribution
  of orientation about its given value. The error is to be measured
  as the angle of rotation about a single axis needed to rotate a
  solid object from its stated orientation to its actual orientation.
  The OrientationStandardDeviation is measured in the angle units
  being used.")

SubClassOf(ktw:PoseLocationIn ktw:PoseLocation)
SubClassOf(ktw:PoseLocationOn ktw:PoseLocation)
SubClassOf(ktw:PoseOnlyLocation ktw:PoseLocation)
DisjointUnion(ktw:PoseLocation
              ktw:PoseLocationIn
              ktw:PoseLocationOn
              ktw:PoseOnlyLocation)

Declaration(ObjectProperty(ktw:hasPoseLocation_Point))
ObjectPropertyDomain(ktw:hasPoseLocation_Point ktw:PoseLocation)
ObjectPropertyRange(ktw:hasPoseLocation_Point ktw:Point)
InverseFunctionalObjectProperty(ktw:hasPoseLocation_Point)
FunctionalObjectProperty(ktw:hasPoseLocation_Point)
EquivalentClasses(ktw:PoseLocation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPoseLocation_Point ktw:Point)
  ObjectAllValuesFrom (ktw:hasPoseLocation_Point ktw:Point)))

Declaration(ObjectProperty(ktw:hadByPoint_PoseLocation))
InverseObjectProperties(ktw:hasPoseLocation_Point
                        ktw:hadByPoint_PoseLocation)
ObjectPropertyDomain(ktw:hadByPoint_PoseLocation ktw:Point)
ObjectPropertyRange(ktw:hadByPoint_PoseLocation ktw:PoseLocation)

Declaration(ObjectProperty(ktw:hasPoseLocation_XAxis))
ObjectPropertyDomain(ktw:hasPoseLocation_XAxis ktw:PoseLocation)
ObjectPropertyRange(ktw:hasPoseLocation_XAxis ktw:Vector)
InverseFunctionalObjectProperty(ktw:hasPoseLocation_XAxis)
FunctionalObjectProperty(ktw:hasPoseLocation_XAxis)
EquivalentClasses(ktw:PoseLocation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPoseLocation_XAxis ktw:Vector)
  ObjectAllValuesFrom (ktw:hasPoseLocation_XAxis ktw:Vector)))

Declaration(ObjectProperty(ktw:hadByXAxis_PoseLocation))
InverseObjectProperties(ktw:hasPoseLocation_XAxis
                        ktw:hadByXAxis_PoseLocation)
ObjectPropertyDomain(ktw:hadByXAxis_PoseLocation ktw:Vector)
ObjectPropertyRange(ktw:hadByXAxis_PoseLocation ktw:PoseLocation)

Declaration(ObjectProperty(ktw:hasPoseLocation_ZAxis))
ObjectPropertyDomain(ktw:hasPoseLocation_ZAxis ktw:PoseLocation)
ObjectPropertyRange(ktw:hasPoseLocation_ZAxis ktw:Vector)
InverseFunctionalObjectProperty(ktw:hasPoseLocation_ZAxis)
FunctionalObjectProperty(ktw:hasPoseLocation_ZAxis)
EquivalentClasses(ktw:PoseLocation ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasPoseLocation_ZAxis ktw:Vector)
  ObjectAllValuesFrom (ktw:hasPoseLocation_ZAxis ktw:Vector)))

Declaration(ObjectProperty(ktw:hadByZAxis_PoseLocation))
InverseObjectProperties(ktw:hasPoseLocation_ZAxis
                        ktw:hadByZAxis_PoseLocation)
ObjectPropertyDomain(ktw:hadByZAxis_PoseLocation ktw:Vector)
ObjectPropertyRange(ktw:hadByZAxis_PoseLocation ktw:PoseLocation)

Declaration(DataProperty(ktw:hasPoseLocation_PositionStandardDeviation))
DataPropertyDomain(ktw:hasPoseLocation_PositionStandardDeviation ktw:PoseLocation)
DataPropertyRange(ktw:hasPoseLocation_PositionStandardDeviation ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasPoseLocation_PositionStandardDeviation)

Declaration(DataProperty(ktw:hasPoseLocation_OrientationStandardDeviation))
DataPropertyDomain(ktw:hasPoseLocation_OrientationStandardDeviation ktw:PoseLocation)
DataPropertyRange(ktw:hasPoseLocation_OrientationStandardDeviation ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasPoseLocation_OrientationStandardDeviation)



Declaration(Class(ktw:PoseLocationIn))

AnnotationAssertion(rdfs:comment ktw:PoseLocationIn
  "PoseLocationIn is derived from PoseLocation.
  An instance of PoseLocationIn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional).
    Point (inherited)
    XAxis (inherited)
    ZAxis  (inherited)
    PositionStandardDeviation (inherited, optional)
    OrientationStandardDeviation (inherited, optional).
 
  A PoseLocationIn indicates that the object is inside
  the location-parent. The notion of 'inside' is vague and might be
  made more precise.")



Declaration(Class(ktw:PoseLocationOn))

AnnotationAssertion(rdfs:comment ktw:PoseLocationOn
  "PoseLocationOn is derived from PoseLocation.
  An instance of PoseLocationOn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional).
    Point (inherited)
    XAxis (inherited)
    ZAxis  (inherited)
    PositionStandardDeviation (inherited, optional)
    OrientationStandardDeviation (inherited, optional).
 
  A PoseLocationOn indicates that the Object is on top of the
  location-parent. The notion of 'on top of' is vague and might be
  made more precise.")



Declaration(Class(ktw:PoseOnlyLocation))

AnnotationAssertion(rdfs:comment ktw:PoseOnlyLocation
  "PoseOnlyLocation is derived from PoseLocation.
  An instance of PoseOnlyLocation has the following:
    RefObject (inherited)
    Timestamp (inherited, optional).
    Point (inherited)
    XAxis (inherited)
    ZAxis  (inherited)
    PositionStandardDeviation (inherited, optional)
    OrientationStandardDeviation (inherited, optional).
 
  An object located by a PoseOnlyLocation may or may not be
  inside or on top of the reference object of the
  PoseOnlyLocation.")



Declaration(Class(ktw:RelativeLocation))

AnnotationAssertion(rdfs:comment ktw:RelativeLocation
  "RelativeLocation is derived from PhysicalLocation.
  An instance of RelativeLocation has a the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Description.
 
  RelativeLocation is an abstract type from which more specific
  types of relative location are derived. A RelativeLocation
  indicates that the SolidObject that has the
  RelativeLocation is on or in the RefObject. The Description may
  be used to describe the relative positions of the object and its
  reference object.")

SubClassOf(ktw:RelativeLocationIn ktw:RelativeLocation)
SubClassOf(ktw:RelativeLocationOn ktw:RelativeLocation)
DisjointUnion(ktw:RelativeLocation
              ktw:RelativeLocationIn
              ktw:RelativeLocationOn)

Declaration(DataProperty(ktw:hasRelativeLocation_Description))
DataPropertyDomain(ktw:hasRelativeLocation_Description ktw:RelativeLocation)
DataPropertyRange(ktw:hasRelativeLocation_Description xsd:string)
FunctionalDataProperty(ktw:hasRelativeLocation_Description)
EquivalentClasses(ktw:RelativeLocation ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasRelativeLocation_Description xsd:string)
  DataAllValuesFrom (ktw:hasRelativeLocation_Description xsd:string)))



Declaration(Class(ktw:RelativeLocationIn))

AnnotationAssertion(rdfs:comment ktw:RelativeLocationIn
  "RelativeLocationIn is derived from RelativeLocation.
  An instance of RelativeLocationIn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Description (inherited).
 
  A RelativeLocationIn indicates that the SolidObject that
  has the RelativeLocation is in the RefObject. The notion of
  'in' is vague and might be made more precise.")



Declaration(Class(ktw:RelativeLocationOn))

AnnotationAssertion(rdfs:comment ktw:RelativeLocationOn
  "RelativeLocationOn is derived from RelativeLocation.
  An instance of RelativeLocationOn has the following:
    RefObject (inherited)
    Timestamp (inherited, optional)
    Description (inherited).
 
  A RelativeLocationOn indicates that the SolidObject that
  has the RelativeLocation is on top of the the RefObject. The
  notion of 'on top of' is vague and might be made more precise.")



Declaration(Class(ktw:Robot))

AnnotationAssertion(rdfs:comment ktw:Robot
  "Robot is derived from NoSkuObject.
  An instance of Robot has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Description
    EndEffector (optional)
    MaximumLoadWeight
    WorkVolume (multiple).
 
  The Robot ontology given here might be expanded greatly to include,
  for example, its kinematic description, the values of joint angles,
  arm lengths of variable length arms, gripper actuation (open,
  closed, etc.), ranges, velocities, and accelerations of each joint,
  etc.")

Declaration(DataProperty(ktw:hasRobot_Description))
DataPropertyDomain(ktw:hasRobot_Description ktw:Robot)
DataPropertyRange(ktw:hasRobot_Description xsd:string)
FunctionalDataProperty(ktw:hasRobot_Description)
EquivalentClasses(ktw:Robot ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasRobot_Description xsd:string)
  DataAllValuesFrom (ktw:hasRobot_Description xsd:string)))

Declaration(ObjectProperty(ktw:hasRobot_EndEffector))
ObjectPropertyDomain(ktw:hasRobot_EndEffector ktw:Robot)
ObjectPropertyRange(ktw:hasRobot_EndEffector ktw:EndEffector)
InverseFunctionalObjectProperty(ktw:hasRobot_EndEffector)
FunctionalObjectProperty(ktw:hasRobot_EndEffector)

Declaration(ObjectProperty(ktw:hadByEndEffector_Robot))
InverseObjectProperties(ktw:hasRobot_EndEffector
                        ktw:hadByEndEffector_Robot)
ObjectPropertyDomain(ktw:hadByEndEffector_Robot ktw:EndEffector)
ObjectPropertyRange(ktw:hadByEndEffector_Robot ktw:Robot)

Declaration(DataProperty(ktw:hasRobot_MaximumLoadWeight))
DataPropertyDomain(ktw:hasRobot_MaximumLoadWeight ktw:Robot)
DataPropertyRange(ktw:hasRobot_MaximumLoadWeight ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasRobot_MaximumLoadWeight)
EquivalentClasses(ktw:Robot ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasRobot_MaximumLoadWeight ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasRobot_MaximumLoadWeight ktw:positiveDecimal)))

Declaration(ObjectProperty(ktw:hasRobot_WorkVolume))
ObjectPropertyDomain(ktw:hasRobot_WorkVolume ktw:Robot)
ObjectPropertyRange(ktw:hasRobot_WorkVolume ktw:BoxVolume)
InverseFunctionalObjectProperty(ktw:hasRobot_WorkVolume)

Declaration(ObjectProperty(ktw:hadByWorkVolume_Robot))
InverseObjectProperties(ktw:hasRobot_WorkVolume
                        ktw:hadByWorkVolume_Robot)
ObjectPropertyDomain(ktw:hadByWorkVolume_Robot ktw:BoxVolume)
ObjectPropertyRange(ktw:hadByWorkVolume_Robot ktw:Robot)



Declaration(Class(ktw:ShapeDesign))

AnnotationAssertion(rdfs:comment ktw:ShapeDesign
  "ShapeDesign is derived from DataThing.
  An instance of ShapeDesign has the following:
    Description (optional)
    GraspPose (optional).
 
  ShapeDesign is an abstract type from which more specific types
  of shape design are derived. Each ShapeDesign has a coordinate
  system that is expected to be specified explicitly or implicitly. A
  shape defined using coordinate values has an implicit coordinate
  system.
 
  The GraspPose is relative to the coordinate system of the
  ShapeDesign. The Point in the pose is the point at which a
  gripper should make contact with the shape. The ZAxis of the pose
  may be used to indicate a direction for aligning the ZAxis of the
  gripper (parallel or antiparallel) and is usually normal to the the
  object having the shape and pointing away from the object. The
  GraspPose should not use the optional Timestamp.")

SubClassOf(ktw:ExternalShape ktw:ShapeDesign)
SubClassOf(ktw:InternalShape ktw:ShapeDesign)
DisjointUnion(ktw:ShapeDesign
              ktw:ExternalShape
              ktw:InternalShape)

Declaration(DataProperty(ktw:hasShapeDesign_Description))
DataPropertyDomain(ktw:hasShapeDesign_Description ktw:ShapeDesign)
DataPropertyRange(ktw:hasShapeDesign_Description xsd:string)
FunctionalDataProperty(ktw:hasShapeDesign_Description)
EquivalentClasses(ktw:ShapeDesign ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasShapeDesign_Description xsd:string)
  DataAllValuesFrom (ktw:hasShapeDesign_Description xsd:string)))

Declaration(ObjectProperty(ktw:hasShapeDesign_GraspPose))
ObjectPropertyDomain(ktw:hasShapeDesign_GraspPose ktw:ShapeDesign)
ObjectPropertyRange(ktw:hasShapeDesign_GraspPose ktw:PoseLocation)
InverseFunctionalObjectProperty(ktw:hasShapeDesign_GraspPose)
FunctionalObjectProperty(ktw:hasShapeDesign_GraspPose)

Declaration(ObjectProperty(ktw:hadByGraspPose_ShapeDesign))
InverseObjectProperties(ktw:hasShapeDesign_GraspPose
                        ktw:hadByGraspPose_ShapeDesign)
ObjectPropertyDomain(ktw:hadByGraspPose_ShapeDesign ktw:PoseLocation)
ObjectPropertyRange(ktw:hadByGraspPose_ShapeDesign ktw:ShapeDesign)



Declaration(Class(ktw:SkuObject))

AnnotationAssertion(rdfs:comment ktw:SkuObject
  "SkuObject is derived from SolidObject.
  An instance of SkuObject has the following:
    PrimaryLocation (inherited)
    SecondaryLocations (inherited, optional, multiple)
    Sku
 
  A SkuObject is an abstract type from which more specific types
  of solid object are derived. A SkuObject is an instance of a
  stockkeeping unit. The shape of a SkuObject is specified by its
  stockkeeping unit.")

SubClassOf(ktw:KitTray ktw:SkuObject)
SubClassOf(ktw:LargeContainer ktw:SkuObject)
SubClassOf(ktw:Part ktw:SkuObject)
SubClassOf(ktw:PartsVessel ktw:SkuObject)
DisjointUnion(ktw:SkuObject
              ktw:KitTray
              ktw:LargeContainer
              ktw:Part
              ktw:PartsVessel)


Declaration(ObjectProperty(ktw:hasSkuObject_Sku))
ObjectPropertyDomain(ktw:hasSkuObject_Sku ktw:SkuObject)
ObjectPropertyRange(ktw:hasSkuObject_Sku ktw:StockKeepingUnit)
FunctionalObjectProperty(ktw:hasSkuObject_Sku)
EquivalentClasses(ktw:SkuObject ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasSkuObject_Sku ktw:StockKeepingUnit)
  ObjectAllValuesFrom (ktw:hasSkuObject_Sku ktw:StockKeepingUnit)))



Declaration(Class(ktw:Slot))

AnnotationAssertion(rdfs:comment ktw:Slot
  "Slot is derived from DataThing.
  An instance of Slot has the following:
    PartRefAndPose
    Part (optional).
 
  A Slot identifies whether or not a particular PartRefAndPose from
  the design of a Kit is occupied in an instance of a Kit. The
  PartRefAndPose identifies a PartRefAndPose from the
  Design of the Kit. The Part identifies a Part that
  occupies the PartRefAndPose. The Sku of the PartRefAndPose should
  be the Sku of the Part, the PartRefAndPose should be in the Kit
  design, and the Part should be in the Kit. The location described
  by the Pose of the Part in the Kit may differ from the location
  described by the Pose in the PartRefAndPose, but will usually be
  very close to it. If the Part is not used for a slot,
  that means the slot is empty.")


Declaration(ObjectProperty(ktw:hasSlot_PartRefAndPose))
ObjectPropertyDomain(ktw:hasSlot_PartRefAndPose ktw:Slot)
ObjectPropertyRange(ktw:hasSlot_PartRefAndPose ktw:PartRefAndPose)
FunctionalObjectProperty(ktw:hasSlot_PartRefAndPose)
EquivalentClasses(ktw:Slot ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasSlot_PartRefAndPose ktw:PartRefAndPose)
  ObjectAllValuesFrom (ktw:hasSlot_PartRefAndPose ktw:PartRefAndPose)))


Declaration(ObjectProperty(ktw:hasSlot_Part))
ObjectPropertyDomain(ktw:hasSlot_Part ktw:Slot)
ObjectPropertyRange(ktw:hasSlot_Part ktw:Part)
FunctionalObjectProperty(ktw:hasSlot_Part)



Declaration(Class(ktw:SolidObject))

AnnotationAssertion(rdfs:comment ktw:SolidObject
  "An instance of SolidObject has the following:
    PrimaryLocation
    SecondaryLocations (optional, multiple)
 
  SolidObject is an abstract type from which more specific types
  of SolidObject are derived. The secondary locations are required to
  be logically and mathematically consistent with the value of the
  PrimaryLocation so that all locations of a SolidObject describe
  (or are consistent with) a single place in space. No
  SolidObject except the Workstation may be located with respect
  to itself, and all chains of primary location must end at the
  Workstation.")

SubClassOf(ktw:NoSkuObject ktw:SolidObject)
SubClassOf(ktw:SkuObject ktw:SolidObject)
DisjointUnion(ktw:SolidObject
              ktw:NoSkuObject
              ktw:SkuObject)

Declaration(ObjectProperty(ktw:hasSolidObject_PrimaryLocation))
ObjectPropertyDomain(ktw:hasSolidObject_PrimaryLocation ktw:SolidObject)
ObjectPropertyRange(ktw:hasSolidObject_PrimaryLocation ktw:PhysicalLocation)
InverseFunctionalObjectProperty(ktw:hasSolidObject_PrimaryLocation)
FunctionalObjectProperty(ktw:hasSolidObject_PrimaryLocation)
EquivalentClasses(ktw:SolidObject ObjectIntersectionOf(
  ObjectSomeValuesFrom(ktw:hasSolidObject_PrimaryLocation ktw:PhysicalLocation)
  ObjectAllValuesFrom (ktw:hasSolidObject_PrimaryLocation ktw:PhysicalLocation)))

Declaration(ObjectProperty(ktw:hadByPrimaryLocation_SolidObject))
InverseObjectProperties(ktw:hasSolidObject_PrimaryLocation
                        ktw:hadByPrimaryLocation_SolidObject)
ObjectPropertyDomain(ktw:hadByPrimaryLocation_SolidObject ktw:PhysicalLocation)
ObjectPropertyRange(ktw:hadByPrimaryLocation_SolidObject ktw:SolidObject)

Declaration(ObjectProperty(ktw:hasSolidObject_SecondaryLocation))
ObjectPropertyDomain(ktw:hasSolidObject_SecondaryLocation ktw:SolidObject)
ObjectPropertyRange(ktw:hasSolidObject_SecondaryLocation ktw:PhysicalLocation)
InverseFunctionalObjectProperty(ktw:hasSolidObject_SecondaryLocation)

Declaration(ObjectProperty(ktw:hadBySecondaryLocation_SolidObject))
InverseObjectProperties(ktw:hasSolidObject_SecondaryLocation
                        ktw:hadBySecondaryLocation_SolidObject)
ObjectPropertyDomain(ktw:hadBySecondaryLocation_SolidObject ktw:PhysicalLocation)
ObjectPropertyRange(ktw:hadBySecondaryLocation_SolidObject ktw:SolidObject)



Declaration(Class(ktw:StockKeepingUnit))

AnnotationAssertion(rdfs:comment ktw:StockKeepingUnit
  "StockKeepingUnit is derived from DataThing.
  An instance of StockKeepingUnit has the following:
    Description
    InternalShape (optional)
    ExternalShape (optional)
    Weight
    EndEffector (optional, multiple).
 
  A StockKeepingUnit is a description of a type of object. SKU is
  an abbreviation for Stock Keeping Unit. Each EndEffectorName
  (IDREF) identifies an instance of EndEffector that can handle
  the SKU. One or both of InternalShape and ExternalShape must be
  given. The shapes are not required to represent the same shape, but
  they should not be inconsistent.")

Declaration(DataProperty(ktw:hasStockKeepingUnit_Description))
DataPropertyDomain(ktw:hasStockKeepingUnit_Description ktw:StockKeepingUnit)
DataPropertyRange(ktw:hasStockKeepingUnit_Description xsd:string)
FunctionalDataProperty(ktw:hasStockKeepingUnit_Description)
EquivalentClasses(ktw:StockKeepingUnit ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasStockKeepingUnit_Description xsd:string)
  DataAllValuesFrom (ktw:hasStockKeepingUnit_Description xsd:string)))

Declaration(ObjectProperty(ktw:hasStockKeepingUnit_InternalShape))
ObjectPropertyDomain(ktw:hasStockKeepingUnit_InternalShape ktw:StockKeepingUnit)
ObjectPropertyRange(ktw:hasStockKeepingUnit_InternalShape ktw:InternalShape)
InverseFunctionalObjectProperty(ktw:hasStockKeepingUnit_InternalShape)
FunctionalObjectProperty(ktw:hasStockKeepingUnit_InternalShape)

Declaration(ObjectProperty(ktw:hadByInternalShape_StockKeepingUnit))
InverseObjectProperties(ktw:hasStockKeepingUnit_InternalShape
                        ktw:hadByInternalShape_StockKeepingUnit)
ObjectPropertyDomain(ktw:hadByInternalShape_StockKeepingUnit ktw:InternalShape)
ObjectPropertyRange(ktw:hadByInternalShape_StockKeepingUnit ktw:StockKeepingUnit)

Declaration(ObjectProperty(ktw:hasStockKeepingUnit_ExternalShape))
ObjectPropertyDomain(ktw:hasStockKeepingUnit_ExternalShape ktw:StockKeepingUnit)
ObjectPropertyRange(ktw:hasStockKeepingUnit_ExternalShape ktw:ExternalShape)
InverseFunctionalObjectProperty(ktw:hasStockKeepingUnit_ExternalShape)
FunctionalObjectProperty(ktw:hasStockKeepingUnit_ExternalShape)

Declaration(ObjectProperty(ktw:hadByExternalShape_StockKeepingUnit))
InverseObjectProperties(ktw:hasStockKeepingUnit_ExternalShape
                        ktw:hadByExternalShape_StockKeepingUnit)
ObjectPropertyDomain(ktw:hadByExternalShape_StockKeepingUnit ktw:ExternalShape)
ObjectPropertyRange(ktw:hadByExternalShape_StockKeepingUnit ktw:StockKeepingUnit)

Declaration(DataProperty(ktw:hasStockKeepingUnit_Weight))
DataPropertyDomain(ktw:hasStockKeepingUnit_Weight ktw:StockKeepingUnit)
DataPropertyRange(ktw:hasStockKeepingUnit_Weight ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasStockKeepingUnit_Weight)
EquivalentClasses(ktw:StockKeepingUnit ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasStockKeepingUnit_Weight ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasStockKeepingUnit_Weight ktw:positiveDecimal)))


Declaration(ObjectProperty(ktw:hasStockKeepingUnit_EndEffector))
ObjectPropertyDomain(ktw:hasStockKeepingUnit_EndEffector ktw:StockKeepingUnit)
ObjectPropertyRange(ktw:hasStockKeepingUnit_EndEffector ktw:EndEffector)



Declaration(Class(ktw:VacuumEffector))

AnnotationAssertion(rdfs:comment ktw:VacuumEffector
  "VacuumEffector is derived from EndEffector.
  An instance of VacuumEffector has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Description (inherited)
    Weight (inherited)
    MaximumLoadWeight (inherited)
    CupDiameter
    Length.
 
  VacuumEffector is an abstract type from which more specific
  types of VacuumEffector are derived. A VacuumEffector holds
  an object by putting a cup or cups against the object and applying
  a vacuum.")

SubClassOf(ktw:VacuumEffectorMultiCup ktw:VacuumEffector)
SubClassOf(ktw:VacuumEffectorSingleCup ktw:VacuumEffector)
DisjointUnion(ktw:VacuumEffector
              ktw:VacuumEffectorMultiCup
              ktw:VacuumEffectorSingleCup)

Declaration(DataProperty(ktw:hasVacuumEffector_CupDiameter))
DataPropertyDomain(ktw:hasVacuumEffector_CupDiameter ktw:VacuumEffector)
DataPropertyRange(ktw:hasVacuumEffector_CupDiameter ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasVacuumEffector_CupDiameter)
EquivalentClasses(ktw:VacuumEffector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVacuumEffector_CupDiameter ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasVacuumEffector_CupDiameter ktw:positiveDecimal)))

Declaration(DataProperty(ktw:hasVacuumEffector_Length))
DataPropertyDomain(ktw:hasVacuumEffector_Length ktw:VacuumEffector)
DataPropertyRange(ktw:hasVacuumEffector_Length ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasVacuumEffector_Length)
EquivalentClasses(ktw:VacuumEffector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVacuumEffector_Length ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasVacuumEffector_Length ktw:positiveDecimal)))



Declaration(Class(ktw:VacuumEffectorMultiCup))

AnnotationAssertion(rdfs:comment ktw:VacuumEffectorMultiCup
  "VacuumEffectorMultiCup is derived from VacuumEffector. An
  instance of VacuumEffectorMultiCup has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Description (inherited)
    Weight (inherited)
    MaximumLoadWeight (inherited)
    CupDiameter
    Length
    ArrayNumber
    ArrayRadius.
 
  The ArrayNumber is the number of cups, which must be at least 2.
  The cups are arranged in a circular array spaced evenly apart. The
  center of the wide end of one cup is on the X-axis of the
  coordinate system of the VacuumEffectorMultiCup. The center of
  the circular array is at the origin of the coordinate system. The
  axis of the array circle is the Z axis of the coordinate system,
  and the length of the VacuumEffector is measured along that
  axis. The wide ends of the cups lie on the XY plane of the
  coordinate system.
 
  Note that a square array can be represented easily as circular
  array.")

Declaration(DataProperty(ktw:hasVacuumEffectorMultiCup_ArrayNumber))
DataPropertyDomain(ktw:hasVacuumEffectorMultiCup_ArrayNumber ktw:VacuumEffectorMultiCup)
DataPropertyRange(ktw:hasVacuumEffectorMultiCup_ArrayNumber xsd:positiveInteger)
FunctionalDataProperty(ktw:hasVacuumEffectorMultiCup_ArrayNumber)
EquivalentClasses(ktw:VacuumEffectorMultiCup ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVacuumEffectorMultiCup_ArrayNumber xsd:positiveInteger)
  DataAllValuesFrom (ktw:hasVacuumEffectorMultiCup_ArrayNumber xsd:positiveInteger)))

Declaration(DataProperty(ktw:hasVacuumEffectorMultiCup_ArrayRadius))
DataPropertyDomain(ktw:hasVacuumEffectorMultiCup_ArrayRadius ktw:VacuumEffectorMultiCup)
DataPropertyRange(ktw:hasVacuumEffectorMultiCup_ArrayRadius ktw:positiveDecimal)
FunctionalDataProperty(ktw:hasVacuumEffectorMultiCup_ArrayRadius)
EquivalentClasses(ktw:VacuumEffectorMultiCup ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVacuumEffectorMultiCup_ArrayRadius ktw:positiveDecimal)
  DataAllValuesFrom (ktw:hasVacuumEffectorMultiCup_ArrayRadius ktw:positiveDecimal)))



Declaration(Class(ktw:VacuumEffectorSingleCup))

AnnotationAssertion(rdfs:comment ktw:VacuumEffectorSingleCup
  "VacuumEffectorSingleCup is derived from VacuumEffector.
  An instance of KitTray has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    Description (inherited)
    Weight (inherited)
    MaximumLoadWeight (inherited)
    CupDiameter (inherited)
    Length (inherited).
 
  A VacuumEffectorSingleCup has one cup. The center of the wide
  end of the cup (which is a circle) is at the origin of the
  coordinate system of the VacuumEffectorSingleCup. The Z axis of
  the coordinate system is the axis of that circle, and the length of
  the VacuumEffector is measured along that axis.")



Declaration(Class(ktw:Vector))

AnnotationAssertion(rdfs:comment ktw:Vector
  "Vector is derived from DataThing.
  An instance of Vector has the following:
    I
    J
    K.
 
  I, J, and K represent the usual i, j, and k components of a 3D
  vector.")

Declaration(DataProperty(ktw:hasVector_I))
DataPropertyDomain(ktw:hasVector_I ktw:Vector)
DataPropertyRange(ktw:hasVector_I xsd:decimal)
FunctionalDataProperty(ktw:hasVector_I)
EquivalentClasses(ktw:Vector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVector_I xsd:decimal)
  DataAllValuesFrom (ktw:hasVector_I xsd:decimal)))

Declaration(DataProperty(ktw:hasVector_J))
DataPropertyDomain(ktw:hasVector_J ktw:Vector)
DataPropertyRange(ktw:hasVector_J xsd:decimal)
FunctionalDataProperty(ktw:hasVector_J)
EquivalentClasses(ktw:Vector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVector_J xsd:decimal)
  DataAllValuesFrom (ktw:hasVector_J xsd:decimal)))

Declaration(DataProperty(ktw:hasVector_K))
DataPropertyDomain(ktw:hasVector_K ktw:Vector)
DataPropertyRange(ktw:hasVector_K xsd:decimal)
FunctionalDataProperty(ktw:hasVector_K)
EquivalentClasses(ktw:Vector ObjectIntersectionOf(
  DataSomeValuesFrom(ktw:hasVector_K xsd:decimal)
  DataAllValuesFrom (ktw:hasVector_K xsd:decimal)))



Declaration(Class(ktw:WorkTable))

AnnotationAssertion(rdfs:comment ktw:WorkTable
  "WorkTable is derived from NoSkuObject.
  An instance of WorkTable has the following:
    PrimaryLocation (inherited)
    SecondaryLocation (inherited, optional, multiple)
    InternalShape (inherited, optional)
    ExternalShape (inherited, optional)
    ObjectOnTable (optional, multiple).
 
  Each ObjectOnTable is a SolidObject located with respect to the
  WorkTable. The reference object of each ObjectOnTable should be
  the WorkTable. Typically, those objects will be on top of the
  WorkTable. Typically, the shape of a WorkTable will be a
  BoxyShape, so that the table has Length, Width, and Height.")

Declaration(ObjectProperty(ktw:hasWorkTable_ObjectOnTable))
ObjectPropertyDomain(ktw:hasWorkTable_ObjectOnTable ktw:WorkTable)
ObjectPropertyRange(ktw:hasWorkTable_ObjectOnTable ktw:SolidObject)
InverseFunctionalObjectProperty(ktw:hasWorkTable_ObjectOnTable)

Declaration(ObjectProperty(ktw:hadByObjectOnTable_WorkTable))
InverseObjectProperties(ktw:hasWorkTable_ObjectOnTable
                        ktw:hadByObjectOnTable_WorkTable)
ObjectPropertyDomain(ktw:hadByObjectOnTable_WorkTable ktw:SolidObject)
ObjectPropertyRange(ktw:hadByObjectOnTable_WorkTable ktw:WorkTable)
)
