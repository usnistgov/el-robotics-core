
canonicalController.cpp:
main cpp file. Creates the controller object and queues messages onto it (either individually or through the command parser, which is started in this file). It also creates and starts the dequeueing thread.

scanPickup.cpp:
Same as canonicalController.cpp, but it also generates a pattern to scan the bin for parts and continually attempts to read the file "output_commands.txt" for more commands. 

scanPattern.cpp:
consists of a single function to generate a MoveThroughTo message used for scanning. The function takes a start point, a length, a width, and a pointer to the ROS interface (to get the FOV of the sensor doing the scanning). It generates a rectangular scan pattern with the initial point in one corner and extending [length] along the x axis and [width] along the y. The function assumes the sensor points downwards and that its field of view fans along the y-axis. The height of the arm during the scan pattern is fixed at an arbitrary amount (0.5 m) above the start point.
The prototype for this function is at the top of scanPickup.cpp (there is no header file to include).

navigationGoal.hh, navigationGoal.cpp:
Definition of NavigationGoal class. This class consists of an arm_navigation_msgs::MoveArmGoal message, and functions for initializing and manipulating it. The constructor checks the ROS parameter server (robot_description_planning/groups) for the name of the arm to control. When the getGoal() function is called, before returning the MoveArmGoal message, the object checks the current state of the arm to convert the goal pose to the correct coordinate system (since poses may be given to the arm either globally or locally). 

rosInf.hh, rosInf.cpp:
definitions for RosInf and EffectorController classes. RosInf is the direct interface to ROS and contains publishers, subscribers, action servers, callbacks, and state data, as well as public methods for robot control (addArmGoal, stopMotion, setEffectorGoal, etc.) and a function to check if a command is currently operating (checkCommandDone). EffectorController contains the publisher, subscriber, and state data for a single effector (gripper or toolchanger). RosInf contains a vector of EffectorControllers, and a deque of NavigationGoals (used to handle a MoveThroughTo message).
The ObjectSensor callback writes the "output_commands.txt" file, which has the canonical commands to move to an object, close the gripper, and move it to a certain location depending on what type of object it is (these locations are hard-coded into the callback).


rosController.cpp:
Implementation of each of the different CanonicalMsg::process() functions, for handling a message. The sendTo pointer is cast to RosInf* .  
