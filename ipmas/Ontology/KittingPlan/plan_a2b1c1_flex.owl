Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(:=<http://www.nist.gov/el/ontologies/plan_a2b1c1_flex.owl#>)
Prefix(ktp:=<http://www.nist.gov/el/ontologies/kittingPlanClasses.owl#>)
Prefix(ktw:=<http://www.nist.gov/el/ontologies/kittingWorkstationClasses.owl#>)
Ontology(<http://www.nist.gov/el/ontologies/plan_a2b1c1_flex.owl>
Import(<file:kittingPlanClasses.owl>)

//*****************************************
// 1 start ktp:KittingPlan plan_a2b1c1_flex
Declaration(NamedIndividual(:plan_a2b1c1_flex))
ClassAssertion(ktp:KittingPlan :plan_a2b1c1_flex)
DataPropertyAssertion(ktp:hasKittingPlan_PlanId :plan_a2b1c1_flex
                      "plan_a2b1c1_flex.xml"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_PlanVersion :plan_a2b1c1_flex
                      "2013Sep16"^^xsd:token)
DataPropertyAssertion(ktp:hasKittingPlan_PlanDateAndTime :plan_a2b1c1_flex
                      "2013-09-16T18:16:00-05:00"^^xsd:dateTime)
DataPropertyAssertion(ktp:hasKittingPlan_PlanAuthor :plan_a2b1c1_flex
                      "Zeid Kootbally and Tom Kramer"^^xsd:token)
DataPropertyAssertion(ktp:hasKittingPlan_PlanDescription :plan_a2b1c1_flex
                      "
    This is a version of a plan generated by PDDL for building a kit with
    two part a, one part b, and one part c. The plan is partially ordered
    to make the plan flexible. Specifically, the parts may be loaded in any
    order. Each section that loads a part is sequentially ordered.
    Some portions of the plan are implicitly sequentially ordered by
    the way predecessors are assigned.
  "^^xsd:string)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "finished_kit_receiver"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "kit_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "kit_tray_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_a_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_a_2"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_b_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_c_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "part_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "tray_gripper_holder"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasKittingPlan_Object :plan_a2b1c1_flex
                      "work_table_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasKittingPlan_PlanRoot
                        :plan_a2b1c1_flex :plan_1)

//*****************************************
// 2 start ktp:PartiallyOrderedActionGroup plan_1
Declaration(NamedIndividual(:plan_1))
ClassAssertion(ktp:PartiallyOrderedActionGroup :plan_1)
ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_1)

//*****************************************
// 3 start ktp:StepWithPredecessors step_1
Declaration(NamedIndividual(:step_1))
ClassAssertion(ktp:StepWithPredecessors :step_1)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_1 :attach_1)

//*****************************************
// 4 start ktp:AttachEndEffector attach_1
Declaration(NamedIndividual(:attach_1))
ClassAssertion(ktp:AttachEndEffector :attach_1)
DataPropertyAssertion(ktp:hasAttachEndEffector_RobotName :attach_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasAttachEndEffector_EndEffectorName :attach_1
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasAttachEndEffector_EndEffectorHolderName :attach_1
                      "tray_gripper_holder"^^xsd:NMTOKEN)
// 4 end ktp:AttachEndEffector
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_2)

//*****************************************
// 3 start ktp:StepWithPredecessors step_2
Declaration(NamedIndividual(:step_2))
ClassAssertion(ktp:StepWithPredecessors :step_2)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_2
                      "2"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_2
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_2 :take_kit_tray_1)

//*****************************************
// 4 start ktp:TakeKitTray take_kit_tray_1
Declaration(NamedIndividual(:take_kit_tray_1))
ClassAssertion(ktp:TakeKitTray :take_kit_tray_1)
DataPropertyAssertion(ktp:hasTakeKitTray_RobotName :take_kit_tray_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakeKitTray_KitTrayName :take_kit_tray_1
                      "kit_tray_1"^^xsd:NMTOKEN)
// 4 end ktp:TakeKitTray
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_3)

//*****************************************
// 3 start ktp:StepWithPredecessors step_3
Declaration(NamedIndividual(:step_3))
ClassAssertion(ktp:StepWithPredecessors :step_3)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_3
                      "3"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_3
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_3 :put_kit_tray_1)

//*****************************************
// 4 start ktp:PutKitTray put_kit_tray_1
Declaration(NamedIndividual(:put_kit_tray_1))
ClassAssertion(ktp:PutKitTray :put_kit_tray_1)
DataPropertyAssertion(ktp:hasPutKitTray_RobotName :put_kit_tray_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPutKitTray_KitTrayName :put_kit_tray_1
                      "kit_tray_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasPutKitTray_Location
                        :put_kit_tray_1 :kit_on_table_1)

//*****************************************
// 5 start ktw:RelativeLocationOn kit_on_table_1
Declaration(NamedIndividual(:kit_on_table_1))
ClassAssertion(ktw:RelativeLocationOn :kit_on_table_1)
ObjectPropertyAssertion(ktw:hasPhysicalLocation_RefObject
                        :kit_on_table_1 :work_table_1)
DataPropertyAssertion(ktw:hasRelativeLocation_Description :kit_on_table_1
                      "kit on table"^^xsd:string)
// 5 end ktw:RelativeLocationOn
//*****************************************

// 4 end ktp:PutKitTray
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_4)

//*****************************************
// 3 start ktp:StepWithPredecessors step_4
Declaration(NamedIndividual(:step_4))
ClassAssertion(ktp:StepWithPredecessors :step_4)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_4
                      "4"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_4
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_4 :create_kit_1)

//*****************************************
// 4 start ktp:CreateKit create_kit_1
Declaration(NamedIndividual(:create_kit_1))
ClassAssertion(ktp:CreateKit :create_kit_1)
DataPropertyAssertion(ktp:hasCreateKit_KitTrayName :create_kit_1
                      "kit_tray_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasCreateKit_KitName :create_kit_1
                      "kit_1"^^xsd:NMTOKEN)
// 4 end ktp:CreateKit
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_5)

//*****************************************
// 3 start ktp:StepWithPredecessors step_5
Declaration(NamedIndividual(:step_5))
ClassAssertion(ktp:StepWithPredecessors :step_5)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_5
                      "2"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_5
                      "4"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_5 :detach_1)

//*****************************************
// 4 start ktp:DetachEndEffector detach_1
Declaration(NamedIndividual(:detach_1))
ClassAssertion(ktp:DetachEndEffector :detach_1)
DataPropertyAssertion(ktp:hasDetachEndEffector_RobotName :detach_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasDetachEndEffector_EndEffectorName :detach_1
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasDetachEndEffector_EndEffectorHolderName :detach_1
                      "tray_gripper_holder"^^xsd:NMTOKEN)
// 4 end ktp:DetachEndEffector
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_6)

//*****************************************
// 3 start ktp:StepWithPredecessors step_6
Declaration(NamedIndividual(:step_6))
ClassAssertion(ktp:StepWithPredecessors :step_6)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_6
                      "6"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_6
                      "5"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_6 :attach_2)

//*****************************************
// 4 start ktp:AttachEndEffector attach_2
Declaration(NamedIndividual(:attach_2))
ClassAssertion(ktp:AttachEndEffector :attach_2)
DataPropertyAssertion(ktp:hasAttachEndEffector_RobotName :attach_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasAttachEndEffector_EndEffectorName :attach_2
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasAttachEndEffector_EndEffectorHolderName :attach_2
                      "part_gripper_holder"^^xsd:NMTOKEN)
// 4 end ktp:AttachEndEffector
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_7)

//*****************************************
// 3 start ktp:StepWithPredecessors step_7
Declaration(NamedIndividual(:step_7))
ClassAssertion(ktp:StepWithPredecessors :step_7)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_7
                      "7"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_7
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_7 :ordered_1)

//*****************************************
// 4 start ktp:OrderedActionGroup ordered_1
Declaration(NamedIndividual(:ordered_1))
ClassAssertion(ktp:OrderedActionGroup :ordered_1)
ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_1 :step_c_1_1)

//*****************************************
// 5 start ktp:NumberedPlanElement step_c_1_1
Declaration(NamedIndividual(:step_c_1_1))
ClassAssertion(ktp:NumberedPlanElement :step_c_1_1)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_c_1_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_c_1_1 :locate_part_c_1)

//*****************************************
// 6 start ktp:LocatePart locate_part_c_1
Declaration(NamedIndividual(:locate_part_c_1))
ClassAssertion(ktp:LocatePart :locate_part_c_1)
DataPropertyAssertion(ktp:hasLocatePart_PartName :locate_part_c_1
                      "part_c_1"^^xsd:NMTOKEN)
// 6 end ktp:LocatePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_1 :step_c_1_2)

//*****************************************
// 5 start ktp:NumberedPlanElement step_c_1_2
Declaration(NamedIndividual(:step_c_1_2))
ClassAssertion(ktp:NumberedPlanElement :step_c_1_2)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_c_1_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_c_1_2 :take_part_c_1)

//*****************************************
// 6 start ktp:TakePart take_part_c_1
Declaration(NamedIndividual(:take_part_c_1))
ClassAssertion(ktp:TakePart :take_part_c_1)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_c_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_c_1
                      "part_c_1"^^xsd:NMTOKEN)
// 6 end ktp:TakePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_1 :step_c_1_3)

//*****************************************
// 5 start ktp:NumberedPlanElement step_c_1_3
Declaration(NamedIndividual(:step_c_1_3))
ClassAssertion(ktp:NumberedPlanElement :step_c_1_3)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_c_1_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_c_1_3 :put_part_c_1)

//*****************************************
// 6 start ktp:PutPart put_part_c_1
Declaration(NamedIndividual(:put_part_c_1))
ClassAssertion(ktp:PutPart :put_part_c_1)
DataPropertyAssertion(ktp:hasPutPart_RobotName :put_part_c_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPutPart_PartName :put_part_c_1
                      "part_c_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasPutPart_Location
                        :put_part_c_1 :c_1_in_kit)

//*****************************************
// 7 start ktw:RelativeLocationIn c_1_in_kit
Declaration(NamedIndividual(:c_1_in_kit))
ClassAssertion(ktw:RelativeLocationIn :c_1_in_kit)
ObjectPropertyAssertion(ktw:hasPhysicalLocation_RefObject
                        :c_1_in_kit :kit_1)
DataPropertyAssertion(ktw:hasRelativeLocation_Description :c_1_in_kit
                      "part c1 in kit"^^xsd:string)
// 7 end ktw:RelativeLocationIn
//*****************************************

// 6 end ktp:PutPart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

// 4 end ktp:OrderedActionGroup
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_8)

//*****************************************
// 3 start ktp:StepWithPredecessors step_8
Declaration(NamedIndividual(:step_8))
ClassAssertion(ktp:StepWithPredecessors :step_8)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_8
                      "8"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_8
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_8 :ordered_2)

//*****************************************
// 4 start ktp:OrderedActionGroup ordered_2
Declaration(NamedIndividual(:ordered_2))
ClassAssertion(ktp:OrderedActionGroup :ordered_2)
ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_2 :step_b_1_1)

//*****************************************
// 5 start ktp:NumberedPlanElement step_b_1_1
Declaration(NamedIndividual(:step_b_1_1))
ClassAssertion(ktp:NumberedPlanElement :step_b_1_1)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_b_1_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_b_1_1 :locate_part_b_1)

//*****************************************
// 6 start ktp:LocatePart locate_part_b_1
Declaration(NamedIndividual(:locate_part_b_1))
ClassAssertion(ktp:LocatePart :locate_part_b_1)
DataPropertyAssertion(ktp:hasLocatePart_PartName :locate_part_b_1
                      "part_b_1"^^xsd:NMTOKEN)
// 6 end ktp:LocatePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_2 :step_b_1_2)

//*****************************************
// 5 start ktp:NumberedPlanElement step_b_1_2
Declaration(NamedIndividual(:step_b_1_2))
ClassAssertion(ktp:NumberedPlanElement :step_b_1_2)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_b_1_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_b_1_2 :take_part_b_1)

//*****************************************
// 6 start ktp:TakePart take_part_b_1
Declaration(NamedIndividual(:take_part_b_1))
ClassAssertion(ktp:TakePart :take_part_b_1)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_b_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_b_1
                      "part_b_1"^^xsd:NMTOKEN)
// 6 end ktp:TakePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_2 :step_b_1_3)

//*****************************************
// 5 start ktp:NumberedPlanElement step_b_1_3
Declaration(NamedIndividual(:step_b_1_3))
ClassAssertion(ktp:NumberedPlanElement :step_b_1_3)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_b_1_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_b_1_3 :put_part_b_1)

//*****************************************
// 6 start ktp:PutPart put_part_b_1
Declaration(NamedIndividual(:put_part_b_1))
ClassAssertion(ktp:PutPart :put_part_b_1)
DataPropertyAssertion(ktp:hasPutPart_RobotName :put_part_b_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPutPart_PartName :put_part_b_1
                      "part_b_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasPutPart_Location
                        :put_part_b_1 :b_1_in_kit)

//*****************************************
// 7 start ktw:RelativeLocationIn b_1_in_kit
Declaration(NamedIndividual(:b_1_in_kit))
ClassAssertion(ktw:RelativeLocationIn :b_1_in_kit)
ObjectPropertyAssertion(ktw:hasPhysicalLocation_RefObject
                        :b_1_in_kit :kit_1)
DataPropertyAssertion(ktw:hasRelativeLocation_Description :b_1_in_kit
                      "part b1 in kit"^^xsd:string)
// 7 end ktw:RelativeLocationIn
//*****************************************

// 6 end ktp:PutPart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

// 4 end ktp:OrderedActionGroup
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_9)

//*****************************************
// 3 start ktp:StepWithPredecessors step_9
Declaration(NamedIndividual(:step_9))
ClassAssertion(ktp:StepWithPredecessors :step_9)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_9
                      "8"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_9
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_9 :ordered_3)

//*****************************************
// 4 start ktp:OrderedActionGroup ordered_3
Declaration(NamedIndividual(:ordered_3))
ClassAssertion(ktp:OrderedActionGroup :ordered_3)
ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_3 :step_a_2_1)

//*****************************************
// 5 start ktp:NumberedPlanElement step_a_2_1
Declaration(NamedIndividual(:step_a_2_1))
ClassAssertion(ktp:NumberedPlanElement :step_a_2_1)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_a_2_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_a_2_1 :locate_part_a_2)

//*****************************************
// 6 start ktp:LocatePart locate_part_a_2
Declaration(NamedIndividual(:locate_part_a_2))
ClassAssertion(ktp:LocatePart :locate_part_a_2)
DataPropertyAssertion(ktp:hasLocatePart_PartName :locate_part_a_2
                      "part_a_2"^^xsd:NMTOKEN)
// 6 end ktp:LocatePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_3 :step_a_2_2)

//*****************************************
// 5 start ktp:NumberedPlanElement step_a_2_2
Declaration(NamedIndividual(:step_a_2_2))
ClassAssertion(ktp:NumberedPlanElement :step_a_2_2)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_a_2_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_a_2_2 :take_part_a_2)

//*****************************************
// 6 start ktp:TakePart take_part_a_2
Declaration(NamedIndividual(:take_part_a_2))
ClassAssertion(ktp:TakePart :take_part_a_2)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_2
                      "part_a_2"^^xsd:NMTOKEN)
// 6 end ktp:TakePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_3 :step_a_2_3)

//*****************************************
// 5 start ktp:NumberedPlanElement step_a_2_3
Declaration(NamedIndividual(:step_a_2_3))
ClassAssertion(ktp:NumberedPlanElement :step_a_2_3)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_a_2_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_a_2_3 :put_part_a_2)

//*****************************************
// 6 start ktp:PutPart put_part_a_2
Declaration(NamedIndividual(:put_part_a_2))
ClassAssertion(ktp:PutPart :put_part_a_2)
DataPropertyAssertion(ktp:hasPutPart_RobotName :put_part_a_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPutPart_PartName :put_part_a_2
                      "part_a_2"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasPutPart_Location
                        :put_part_a_2 :a_2_in_kit)

//*****************************************
// 7 start ktw:RelativeLocationIn a_2_in_kit
Declaration(NamedIndividual(:a_2_in_kit))
ClassAssertion(ktw:RelativeLocationIn :a_2_in_kit)
ObjectPropertyAssertion(ktw:hasPhysicalLocation_RefObject
                        :a_2_in_kit :kit_1)
DataPropertyAssertion(ktw:hasRelativeLocation_Description :a_2_in_kit
                      "part a2 in kit"^^xsd:string)
// 7 end ktw:RelativeLocationIn
//*****************************************

// 6 end ktp:PutPart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

// 4 end ktp:OrderedActionGroup
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_10)

//*****************************************
// 3 start ktp:StepWithPredecessors step_10
Declaration(NamedIndividual(:step_10))
ClassAssertion(ktp:StepWithPredecessors :step_10)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_10
                      "10"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_10
                      "6"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_10 :ordered_4)

//*****************************************
// 4 start ktp:OrderedActionGroup ordered_4
Declaration(NamedIndividual(:ordered_4))
ClassAssertion(ktp:OrderedActionGroup :ordered_4)
ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_4 :step_a_1_1)

//*****************************************
// 5 start ktp:NumberedPlanElement step_a_1_1
Declaration(NamedIndividual(:step_a_1_1))
ClassAssertion(ktp:NumberedPlanElement :step_a_1_1)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_a_1_1
                      "1"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_a_1_1 :locate_part_a_1)

//*****************************************
// 6 start ktp:LocatePart locate_part_a_1
Declaration(NamedIndividual(:locate_part_a_1))
ClassAssertion(ktp:LocatePart :locate_part_a_1)
DataPropertyAssertion(ktp:hasLocatePart_PartName :locate_part_a_1
                      "part_a_1"^^xsd:NMTOKEN)
// 6 end ktp:LocatePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_4 :step_a_1_2)

//*****************************************
// 5 start ktp:NumberedPlanElement step_a_1_2
Declaration(NamedIndividual(:step_a_1_2))
ClassAssertion(ktp:NumberedPlanElement :step_a_1_2)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_a_1_2
                      "2"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_a_1_2 :take_part_a_1)

//*****************************************
// 6 start ktp:TakePart take_part_a_1
Declaration(NamedIndividual(:take_part_a_1))
ClassAssertion(ktp:TakePart :take_part_a_1)
DataPropertyAssertion(ktp:hasTakePart_RobotName :take_part_a_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakePart_PartName :take_part_a_1
                      "part_a_1"^^xsd:NMTOKEN)
// 6 end ktp:TakePart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

ObjectPropertyAssertion(ktp:hasOrderedActionGroup_Step
                        :ordered_4 :step_a_1_3)

//*****************************************
// 5 start ktp:NumberedPlanElement step_a_1_3
Declaration(NamedIndividual(:step_a_1_3))
ClassAssertion(ktp:NumberedPlanElement :step_a_1_3)
DataPropertyAssertion(ktp:hasNumberedPlanElement_SequenceNumber :step_a_1_3
                      "3"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasNumberedPlanElement_PlanElement
                        :step_a_1_3 :put_part_a_1)

//*****************************************
// 6 start ktp:PutPart put_part_a_1
Declaration(NamedIndividual(:put_part_a_1))
ClassAssertion(ktp:PutPart :put_part_a_1)
DataPropertyAssertion(ktp:hasPutPart_RobotName :put_part_a_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPutPart_PartName :put_part_a_1
                      "part_a_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasPutPart_Location
                        :put_part_a_1 :a_1_in_kit)

//*****************************************
// 7 start ktw:RelativeLocationIn a_1_in_kit
Declaration(NamedIndividual(:a_1_in_kit))
ClassAssertion(ktw:RelativeLocationIn :a_1_in_kit)
ObjectPropertyAssertion(ktw:hasPhysicalLocation_RefObject
                        :a_1_in_kit :kit_1)
DataPropertyAssertion(ktw:hasRelativeLocation_Description :a_1_in_kit
                      "part a1 in kit"^^xsd:string)
// 7 end ktw:RelativeLocationIn
//*****************************************

// 6 end ktp:PutPart
//*****************************************

// 5 end ktp:NumberedPlanElement
//*****************************************

// 4 end ktp:OrderedActionGroup
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_11)

//*****************************************
// 3 start ktp:StepWithPredecessors step_11
Declaration(NamedIndividual(:step_11))
ClassAssertion(ktp:StepWithPredecessors :step_11)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_11
                      "11"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_11
                      "7"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_11
                      "8"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_11
                      "9"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_11
                      "10"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_11 :detach_2)

//*****************************************
// 4 start ktp:DetachEndEffector detach_2
Declaration(NamedIndividual(:detach_2))
ClassAssertion(ktp:DetachEndEffector :detach_2)
DataPropertyAssertion(ktp:hasDetachEndEffector_RobotName :detach_2
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasDetachEndEffector_EndEffectorName :detach_2
                      "part_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasDetachEndEffector_EndEffectorHolderName :detach_2
                      "part_gripper_holder"^^xsd:NMTOKEN)
// 4 end ktp:DetachEndEffector
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_12)

//*****************************************
// 3 start ktp:StepWithPredecessors step_12
Declaration(NamedIndividual(:step_12))
ClassAssertion(ktp:StepWithPredecessors :step_12)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_12
                      "12"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_12
                      "11"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_12 :attach_3)

//*****************************************
// 4 start ktp:AttachEndEffector attach_3
Declaration(NamedIndividual(:attach_3))
ClassAssertion(ktp:AttachEndEffector :attach_3)
DataPropertyAssertion(ktp:hasAttachEndEffector_RobotName :attach_3
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasAttachEndEffector_EndEffectorName :attach_3
                      "tray_gripper"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasAttachEndEffector_EndEffectorHolderName :attach_3
                      "tray_gripper_holder"^^xsd:NMTOKEN)
// 4 end ktp:AttachEndEffector
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_13)

//*****************************************
// 3 start ktp:StepWithPredecessors step_13
Declaration(NamedIndividual(:step_13))
ClassAssertion(ktp:StepWithPredecessors :step_13)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_13
                      "13"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_13
                      "12"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_13 :take_kit_1)

//*****************************************
// 4 start ktp:TakeKit take_kit_1
Declaration(NamedIndividual(:take_kit_1))
ClassAssertion(ktp:TakeKit :take_kit_1)
DataPropertyAssertion(ktp:hasTakeKit_RobotName :take_kit_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasTakeKit_KitName :take_kit_1
                      "kit_1"^^xsd:NMTOKEN)
// 4 end ktp:TakeKit
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

ObjectPropertyAssertion(ktp:hasPartiallyOrderedActionGroup_Step
                        :plan_1 :step_14)

//*****************************************
// 3 start ktp:StepWithPredecessors step_14
Declaration(NamedIndividual(:step_14))
ClassAssertion(ktp:StepWithPredecessors :step_14)
DataPropertyAssertion(ktp:hasStepWithPredecessors_SequenceNumber :step_14
                      "14"^^xsd:positiveInteger)
DataPropertyAssertion(ktp:hasStepWithPredecessors_Predecessor :step_14
                      "13"^^xsd:positiveInteger)
ObjectPropertyAssertion(ktp:hasStepWithPredecessors_PlanElement
                        :step_14 :put_kit_1)

//*****************************************
// 4 start ktp:PutKit put_kit_1
Declaration(NamedIndividual(:put_kit_1))
ClassAssertion(ktp:PutKit :put_kit_1)
DataPropertyAssertion(ktp:hasPutKit_RobotName :put_kit_1
                      "robot_1"^^xsd:NMTOKEN)
DataPropertyAssertion(ktp:hasPutKit_KitName :put_kit_1
                      "kit_1"^^xsd:NMTOKEN)
ObjectPropertyAssertion(ktp:hasPutKit_Location
                        :put_kit_1 :kit_in_receiver)

//*****************************************
// 5 start ktw:RelativeLocationIn kit_in_receiver
Declaration(NamedIndividual(:kit_in_receiver))
ClassAssertion(ktw:RelativeLocationIn :kit_in_receiver)
ObjectPropertyAssertion(ktw:hasPhysicalLocation_RefObject
                        :kit_in_receiver :finished_kit_receiver)
DataPropertyAssertion(ktw:hasRelativeLocation_Description :kit_in_receiver
                      "kit in receiver"^^xsd:string)
// 5 end ktw:RelativeLocationIn
//*****************************************

// 4 end ktp:PutKit
//*****************************************

// 3 end ktp:StepWithPredecessors
//*****************************************

// 2 end ktp:PartiallyOrderedActionGroup
//*****************************************

// 1 end ktp:KittingPlan
//*****************************************


//*****************************************
// ktp:AttachEndEffector individuals 
DifferentIndividuals(
 :attach_1
 :attach_2
 :attach_3)

//*****************************************
// ktp:DetachEndEffector individuals 
DifferentIndividuals(
 :detach_1
 :detach_2)

//*****************************************
// ktp:LocatePart individuals 
DifferentIndividuals(
 :locate_part_a_1
 :locate_part_a_2
 :locate_part_b_1
 :locate_part_c_1)

//*****************************************
// ktp:NumberedPlanElement individuals 
DifferentIndividuals(
 :step_a_1_1
 :step_a_1_2
 :step_a_1_3
 :step_a_2_1
 :step_a_2_2
 :step_a_2_3
 :step_b_1_1
 :step_b_1_2
 :step_b_1_3
 :step_c_1_1
 :step_c_1_2
 :step_c_1_3)

//*****************************************
// ktp:OrderedActionGroup individuals 
DifferentIndividuals(
 :ordered_1
 :ordered_2
 :ordered_3
 :ordered_4)

//*****************************************
// ktp:PutPart individuals 
DifferentIndividuals(
 :put_part_a_1
 :put_part_a_2
 :put_part_b_1
 :put_part_c_1)

//*****************************************
// ktw:RelativeLocationIn individuals 
DifferentIndividuals(
 :a_1_in_kit
 :a_2_in_kit
 :b_1_in_kit
 :c_1_in_kit
 :kit_in_receiver)

//*****************************************
// ktp:StepWithPredecessors individuals 
DifferentIndividuals(
 :step_1
 :step_10
 :step_11
 :step_12
 :step_13
 :step_14
 :step_2
 :step_3
 :step_4
 :step_5
 :step_6
 :step_7
 :step_8
 :step_9)

//*****************************************
// ktp:TakePart individuals 
DifferentIndividuals(
 :take_part_a_1
 :take_part_a_2
 :take_part_b_1
 :take_part_c_1)
)
