<?xml version="1.0" encoding="UTF-8"?>

<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.0.0">

  <xs:annotation>
    <xs:documentation>
      This kitting plan ontology models a plan for actions in a kitting
      workstation. It is expected that most plans conforming to the 
      model will be plans for building kits.

      This ontology uses the following items from the kitting ontology:
      DataThingType
      PhysicalLocationType (and its derived subtypes)
      PointType
      PositiveDecimalType
      VectorType
      Those definitions are included at the end of this file.
 
      The model includes:
      - a tree-like plan structure of arbitrary length and depth
      - a variety of methods of ordering the steps of the tree
      - arithmetic variables
      - boolean expressions
      - arithmetic expressions
      - actions specific to kitting
      - a 'while' loop
      - an If-ElseIf-Else structure
 
      The appinfo entries in the model are solely for the benefit of the
      xmlSchemaOwlPrinter, which needs to know the type of the named
      objects.

    </xs:documentation>
  </xs:annotation>

  <xs:element name="KittingPlan"
    type="KittingPlanType">
    <xs:annotation>
      <xs:documentation>
        Root element of a kitting plan.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ActionBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        ActionBaseType is derived from PlanElementBaseType.
        An instance of ActionBaseType has the following elements:
          Name (inherited)
          .
 
        ActionBaseType is the abstract base type that defines a single
        action to be carried out.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PlanElementBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ActionGroupBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        ActionGroupBaseType is derived from PlanElementBaseType.
        An instance of ActionGroupBaseType has the following elements:
          Name (inherited)
          .
 
        ActionGroupBaseType is the abstract base type that defines an
        action group. An action group consists of a control structure
        and the plan elements to which the control structure applies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PlanElementBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttachEndEffectorType">
    <xs:annotation>
      <xs:documentation>
        AttachEndEffectorType is derived from RobotActionBaseType.
        An instance of AttachEndEffectorType has the following elements:
          Name (inherited)
          RobotName
          EndEffectorName
          EndEffectorHolderName.
 
        Immediately before an instance of AttachEndEffectorType is executed:
        (1) The named robot must not have an end effector in its tool changer.
        (2) The end effector must be located relative to the named
            end effector holder.
 
        As an instance of AttachEndEffectorType is executed:
        If the tool changer is closed, the robot opens the tool changer.
        The robot moves to a position relative to the tool holder at
        which it can attach to the end effector. The robot closes the
        tool changer so as to attach the end effector. The location of
        the end effector changes from being relative to the end effector
        holder to being relative to the robot. The robot withdraws the end
        end effector from the tool holder a slight amount that is far
        enough so that any end effector sensor on the end effector holder no
        longer indicates that there is an end effector in the holder.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="EndEffectorName"
            type="xs:NMTOKEN"/>
          <xs:element name="EndEffectorHolderName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CreateKitType">
    <xs:annotation>
      <xs:documentation>
        CreateKitType is derived from ActionBaseType.
        An instance of CreateKitType has the following elements:
          Name (inherited)
          KitTrayName
          KitName.
 
        Immediately before an instance of CreateKitType is executed:
        (1) The named kit tray must not be in a kit.
        (2) A kit with the given name must not exist.
 
        As an instance of CreateKitType is executed:
        A kit with the given name is created at the location of the kit
        tray, and the location of the kit tray becomes relative to the kit,
        in the same place relative to the kitting workstation as before.
        The location of any parts in the kit tray becomes relative to the
        kit.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionBaseType">
        <xs:sequence>
          <xs:element name="KitTrayName"
            type="xs:NMTOKEN"/>
          <xs:element name="KitName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DetachEndEffectorType">
    <xs:annotation>
      <xs:documentation>
        DetachEndEffectorType is derived from RobotActionBaseType.
        An instance of DetachEndEffectorType has the following elements:
          Name (inherited)
          RobotName
          EndEffectorName
          EndEffectorHolderName.
 
        Immediately before an instance of DetachEndEffectorType is executed:
        (1) The named robot must have the named end effector in its tool
            changer.
        (2) The end effector must be located relative to the robot.
        (3) The end effector holder must be empty.
 
        As an instance of DetachEndEffectorType is executed:
        The robot moves to a position relative to the tool holder at which
        it can detach from the end effector. The robot opens the tool
        changer so as to detach the end effector. The location of the end
        effector changes from being relative to the robot to being relative
        to the end effector holder. The robot moves a small distance away
        from the end effector holder.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="EndEffectorName"
            type="xs:NMTOKEN"/>
          <xs:element name="EndEffectorHolderName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ElseType">
    <xs:annotation>
      <xs:documentation>
        Else type represents the 'else' part of an If-ElseIf-Else
        construct.
        An instance of ElseType has the following elements:
          Name (inherited)
          Step.

        Step is the plan element to execute.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="Step"
            type="PlanElementBaseType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IfActionGroupType">
    <xs:annotation>
      <xs:documentation>
        IfActionGroupType is derived from ActionGroupBaseType and
        represents an If-ElseIf-Else construct with zero to many Else-Ifs
        and an optional Else.
        An instance of IfActionGroupType has the following elements:
          Name (inherited)
          If
          ElseIf (optional, multiple)
          Else (optional).
 
        If is a test to evaluate and the plan element to execute if the
        test evaluates to true.
 
        Each optional ElseIf is a test to evaluate and the plan
        element to execute if the test evaluates to true.
 
        The optional Else is a plan element to execute if none
        of the If or ElseIf tests evaluates to true.
 
        To execute an instance of IfActionGroupType:
        1. Evaluate the test in the If. If it evaluates to true,
           execute the plan element in the If and return.
 
        2. Otherwise, evaluate the test in the next ElseIf if there is one.
           If it evaluates to true, execute the plan element in the ElseIf
           and return. Repeat until either return occurs or there are no
           more ElseIfs.
 
        3. Otherwise, if there is an Else, execute the plan element in the
           Else and return.
 
        4. Otherwise, return.
 
        It is possible that no plan element will be executed when an
        instance of IfActionGroupType is executed.
 
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="If"
            type="TestAndStepType"/>
          <xs:element name="ElseIf"
            type="TestAndStepType"
            minOccurs="0"
            maxOccurs="unbounded"/>
          <xs:element name="Else"
            type="ElseType"
            minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KittingPlanType">
    <xs:annotation>
      <xs:documentation>
        KittingPlanType is derived from DataThingType
        An instance of KittingPlanType has the following elements:
          Name (inherited)
          PlanId
          PlanVersion
          PlanDateAndTime
          PlanAuthor
          PlanDescription
          Object (multiple)
          Variable (optional, multiple)
          PlanRoot.
 
        The KittingPlanType defines information about a kitting plan.
 
        The PlanId identifies the plan. It would be a good idea to 
        use a universally unique identifier instead of a NMTOKEN.
 
        The PlanDescription is a natural language description of the plan.
 
        Each object is the name of an object mentioned by name elsewhere in
        the plan.
 
        Each Variable is a numeric variable used in the plan.
 
        The PlanRoot gives information about the activities to be carried
        out in executing the kitting plan and how execution of the kitting
        plan is to be controlled. Structurally, the PlanRoot is at the top
        of an (upside down) plan tree of PlanElements. All PlanElement
        instances occur within the tree. The PlanRoot consists of a control
        structure and the plan elements to which the control structure
        applies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="PlanId"
            type="xs:NMTOKEN"/>
          <xs:element name="PlanVersion"
            type="xs:token"/>
          <xs:element name="PlanDateAndTime"
            type="xs:dateTime"/>
          <xs:element name="PlanAuthor"
            type="xs:token"/>
          <xs:element name="PlanDescription"
            type="xs:string"/>
          <xs:element name="Object"
            type="xs:NMTOKEN"
            maxOccurs="unbounded"/>
          <xs:element name="Variable"
            type="VariableDeclarationType"
            minOccurs="0"
            maxOccurs="unbounded"/>
          <xs:element name="PlanRoot"
            type="PlanElementBaseType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocatePartType">
    <xs:annotation>
      <xs:documentation>
        LocatePartType is derived from SensorActionBaseType.
        An instance of LocatePartType has the following elements:
          Name (inherited)
          PartName.
 
        The LocatePartType is an action that locates the specified
        part. This may change the location information in the part.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SensorActionBaseType">
        <xs:sequence>
          <xs:element name="PartName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NumberedPlanElementType">
    <xs:annotation>
      <xs:documentation>
        NumberedPlanElementType is derived from DataThingType.
        An instance of NumberedPlanElementType has the following elements:
          Name (inherited)
          SequenceNumber
          PlanElement.
 
        The NumberedPlanElementType defines a single ordered plan element.
 
        The SequenceNumber is a positive integer used in determining either
        the order within a set of PlanElements in which a plan element
        should be executed or which plan element in the set should be
        executed.
 
        The PlanElement is the plan element associated with the
        SequenceNumber.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="SequenceNumber"
            type="xs:positiveInteger"/>
          <xs:element name="PlanElement"
            type="PlanElementBaseType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OneOfActionGroupType">
    <xs:annotation>
      <xs:documentation>
        OneOfActionGroupType is derived from ActionGroupBaseType.
        An instance of OneOfActionGroupType has the following elements:
          Name (inherited)
          Step (multiple).
 
        The OneOfActionGroupType defines an action group for which exactly
        one of the steps it contains must be executed. Any step in the list
        will do. The SequenceNumbers of the Steps in an instance of
        OneOfActionGroupType are not required to be distinct. The
        SequenceNumbers indicate a preference for which step is executed,
        with 1 the most preferred, 2 the second most preferred, and so on.
        Steps with the same SequenceNumber are equally preferred.
 
        Each Step is a numbered plan element.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="Step"
            type="NumberedPlanElementType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrderedActionGroupType">
    <xs:annotation>
      <xs:documentation>
        OrderedActionGroupType is derived from ActionGroupBaseType.
        An instance of OrderedActionGroupType has the following elements:
          Name (inherited)
          Step (multiple).
 
        The OrderedActionGroupType defines an action group for which the
        all the steps it contains must be executed in order of increasing
        sequence number. The SequenceNumbers of the Steps in an instance of
        OrderedActionGroupType must be present, must be assigned 1, 2, 3,
        ..., and must be executed in that order.
 
        Each Step is a numbered plan element.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="Step"
            type="NumberedPlanElementType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PartiallyOrderedActionGroupType">
    <xs:annotation>
      <xs:documentation>
        PartiallyOrderedActionGroupType is derived from ActionGroupBaseType.
        An instance of Partially OrderedActionGroupType has the following
        elements:
          Name (inherited)
          Step (multiple).
 
        The PartiallyOrderedActionGroupType defines an action group for
        which all of the steps it contains should be executed, but each
        step may be executed only after all of the predecessors of that
        step have been executed. If more than one step meets that
        condition, any order of executing those steps will work, and no
        particular order is required by the plan. The SequenceNumbers of
        the steps in an instance of PartiallyOrderedActionGroupType must be
        assigned 1, 2, 3, ... but usually will not be executed in that
        order.
 
        Each Step is a PlanElement with predecessors.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="Step"
            type="StepWithPredecessorsType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PlanElementBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        PlanElementBaseType is derived from DataThingType.
        An instance of PlanElementBaseType has the following elements:
          Name (inherited)
          .
 
        PlanElementBaseType is the abstract base type for plan element
        types.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PutKitType">
    <xs:annotation>
      <xs:documentation>
        PutKitType is derived from RobotActionBaseType.
        An instance of PutKitType has the following elements:
          Name (inherited)
          RobotName
          KitName
          Location.
 
        When an instance of PutKitType is executed:
        (1) The named robot must have a gripper in its tool changer.
        (2) The gripper must be holding the named kit.
        (3) The gripper must be closed.
        (4) The location of the kit should be relative to the gripper.
        The robot moves to the specified location at which it opens the
        gripper so as to release the kit. The location of the kit
        changes so that the kit is located as specified. The Location
        may be a relative location or a pose location. The gripper is
        open and not holding anything after the action is complete.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="KitName"
            type="xs:NMTOKEN"/>
          <xs:element name="Location"
            type="PhysicalLocationType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PutKitTrayType">
    <xs:annotation>
      <xs:documentation>
        PutKitTrayType is derived from RobotActionBaseType.
        An instance of PutKitTrayType has the following elements:
          Name (inherited)
          RobotName
          KitTrayName
          Location.
 
        When an instance of PutKitTrayType is executed:
        (1) The named robot must have a gripper in its tool changer.
        (2) The gripper must be holding the named kit tray.
        (3) The gripper must be closed.
        (4) The location of the kit tray should be relative to the gripper.
        The robot moves to the specified location at which it opens the
        gripper so as to release the kit tray. The location of the kit tray
        changes so that the kit tray is located as specified. The Location
        may be a relative location or a pose location. The gripper is
        open and not holding anything after the action is complete.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="KitTrayName"
            type="xs:NMTOKEN"/>
          <xs:element name="Location"
            type="PhysicalLocationType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PutPartType">
    <xs:annotation>
      <xs:documentation>
        PutPartType is derived from RobotActionBaseType.
        An instance of PutPartType has the following elements:
          Name (inherited)
          RobotName
          PartName
          Location.
 
        When an instance of PutPartType is executed:
        (1) The named robot must have a gripper in its tool changer.
        (2) The gripper must be holding the named part.
        (3) The gripper must be closed.
        (4) The location of the part should be relative to the gripper.
        The robot moves to the specified location at which it opens the
        gripper so as to release the part. The location of the part
        changes so that the part is located as specified. The Location
        may be a relative location or a pose location. The gripper is
        open and not holding anything after the action is complete.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="PartName"
            type="xs:NMTOKEN"/>
          <xs:element name="Location"
            type="PhysicalLocationType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RobotActionBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        RobotActionBaseType is derived from ActionBaseType.
        An instance of RobotActionBaseType has the following elements:
          Name (inherited)
          .
 
        The RobotActionBaseType defines the base type for robot actions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SensorActionBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        SensorActionBaseType is derived from ActionBaseType.
        An instance of SensorActionBaseType has the following elements:
          Name (inherited)
          .
 
        The SensorActionBaseType defines the base type for sensor actions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SomeOfActionGroupType">
    <xs:annotation>
      <xs:documentation>
        SomeOfActionGroupType is derived from ActionGroupBaseType.
        An instance of SomeOfActionGroupType has the following elements:
          Name (inherited)
          Step
          NumberOfSteps.
 
        The SomeOfActionGroupType defines an action group for which a
        specified number of the steps it contains must be executed; they
        may be executed in any order.
 
        Each Step is a plan element.
 
        The NumberOfSteps is the number of steps from the Step
        list to be executed. This must be at least one and must not be
        larger than the number of items in the Step list.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="Step"
            type="PlanElementBaseType"
            maxOccurs="unbounded"/>
          <xs:element name="NumberOfSteps"
            type="xs:positiveInteger"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StepWithPredecessorsType">
    <xs:annotation>
      <xs:documentation>
        StepWithPredecessorsType is derived from DataThingType
        An instance of StepWithPredecessorsType has the following elements:
          Name (inherited)
          SequenceNumber
          Predecessor (optional, multiple)
          PlanElement.
 
        The StepWithPredecessorsType defines information about a single
        PlanElement that has predecessors.
 
        Each optional Predecessor is the number of a step that must be
        executed before this step is executed. Care should be taken that no
        step has itself as a predecessor and that there are no loops of
        predecessors, as when step 1 is a predecessor of step 2 and step 2
        is a predecessor of step 1.
 
        The PlanElement is a plan element to be executed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="SequenceNumber"
            type="xs:positiveInteger"/>
          <xs:element name="Predecessor"
            type="xs:positiveInteger"
            minOccurs="0"
            maxOccurs="unbounded"/>
          <xs:element name="PlanElement"
            type="PlanElementBaseType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TakeKitType">
    <xs:annotation>
      <xs:documentation>
        TakeKitType is derived from RobotActionBaseType.
        An instance of TakeKitType has the following elements:
          Name (inherited)
          RobotName
          KitName.
 
        Immediately before an instance of TakeKitType is executed:
        (1) The named robot must have a gripper in its tool changer.
        (2) The gripper must be appropriate for picking up the named kit.
        (3) The gripper must be empty.
        (4) The gripper must be open.
 
        As an instance of TakeKitType is executed:
        The robot moves to a position from which it may pick up the kit
        and closes the gripper on the kit. The kit is not moved but
        the location of the kit changes so that the kit is located
        relative to the gripper.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="KitName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TakeKitTrayType">
    <xs:annotation>
      <xs:documentation>
        TakeKitTrayType is derived from RobotActionBaseType.
        An instance of TakeKitTrayType has the following elements:
          Name (inherited)
          RobotName
          KitTrayName.
 
        Immediately before an instance of TakeKitTrayType is executed:
        (1) The named robot must have a gripper in its tool changer.
        (2) The gripper must be appropriate for picking up the named kit tray.
        (3) The gripper must be empty.
        (4) The gripper must be open.
 
        As an instance of TakeKitTrayType is executed:
        The robot moves to a position from which it may pick up the kit tray
        and closes the gripper on the kit tray. The kit tray is not moved but
        the location of the kit tray changes so that the kit tray is located
        relative to the gripper.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="KitTrayName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TakePartType">
    <xs:annotation>
      <xs:documentation>
        TakePartType is derived from RobotActionBaseType.
        An instance of TakePartType has the following elements:
          Name (inherited)
          RobotName
          PartName.
 
        Immediately before an instance of TakePartType is executed:
        (1) The named robot must have a gripper in its tool changer.
        (2) The gripper must be appropriate for picking up the named part.
        (3) The gripper must be empty.
        (4) The gripper must be open.
 
        As an instance of TakePartType is executed:
        The robot moves to a position from which it may pick up the part
        and closes the gripper on the part. The part is not moved but
        the location of the part changes so that the part is located
        relative to the gripper.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RobotActionBaseType">
        <xs:sequence>
          <xs:element name="RobotName"
            type="xs:NMTOKEN"/>
          <xs:element name="PartName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TestAndStepType">
    <xs:annotation>
      <xs:documentation>
        TestAndStepType represents a test to evaluate and a plan element
        to execute if the test evaluates to true.
        An instance of TestAndStepType has the following elements:
          Name (inherited)
          Test
          Step.
 
        Test is a boolean expression to evaluate.
        Step is the plan element to execute if the Test evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="Test"
            type="BooleanExpressionType"/>
          <xs:element name="Step"
            type="PlanElementBaseType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UnorderedActionGroupType">
    <xs:annotation>
      <xs:documentation>
        UnorderedActionGroupType is derived from ActionGroupBaseType.
        An instance of UnorderedActionGroupType has the following elements:
          Name (inherited)
          Step.
 
        The UnorderedActionGroupType defines an action group for which all
        of the steps it contains should be executed, but any order of
        executing them will work, and no particular order of execution is
        required.
 
        Each Step is a plan element to execute.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="Step"
            type="PlanElementBaseType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="WhileActionGroupType">
    <xs:annotation>
      <xs:documentation>
        WhileActionGroupType represents a loop.
        An instance of WhileActionGroupType has the following elements:
          Name (inherited)
          Test
          Step.
 
        Test is a boolean expression to evaluate.
        Step is a plan element to execute if the test evaluates to true.
 
        To execute an instance of WhileActionGroupType, evaluate the Test.
        If the Test evaluates to true, execute the Step. Repeat evaluating
        and executing as long as the Test evaluates to true. The first time
        the Test evaluates to false, return.
 
        If the Test evaluates to false the first time it is evaluated, the
        Step is never executed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ActionGroupBaseType">
        <xs:sequence>
          <xs:element name="Test"
            type="BooleanExpressionType"/>
          <xs:element name="Step"
            type="PlanElementBaseType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AndType">
    <xs:annotation>
      <xs:documentation>
        AndType is derived from BinaryBooleanExpressionType.
        An instance of AndType has the following elements:
          Name (inherited)
          B1 (inherited)
          B2 (inherited).
 
        B1 and B2 are two boolean expressions to be considered. The AndType
        returns True if the value of B1 is True and the value of B2 is
        True. Otherwise, it returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ArithmeticComparisonBooleanExpressionType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        ArithmeticComparisonBooleanExpressionType is an abstract type
        derived from BooleanExpressionType representing an expression
        with a value that is an xs:boolean. An instance of
        ArithmeticComparisonBooleanExpressionType has the following elements:
          Name (inherited)
          A1
          A2.
 
        A1 and A2 are two arithmetic expressions to be compared.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BooleanExpressionType">
        <xs:sequence>
          <xs:element name="A1"
            type="ArithmeticExpressionType"/>
          <xs:element name="A2"
            type="ArithmeticExpressionType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ArithmeticExpressionType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        ArithmeticExpressionType is an abstract type derived from
        DataThingType and representing an expression with a value that
        is an xs:decimal.
        An instance of ArithmeticExpressionType has the following elements:
          Name (inherited)
          .
 
        ArithmeticExpressionType has the following derivation hierarchy:
        DataThingType
        |-ArithmeticExpressionType
          |-DecimalType
          |-BinaryArithmeticExpressionType
          | |-DivType
          | |-MinusType
          | |-ModType
          | |-PlusType
          | |-TimesType
          |-NegateType
          |-PropValType
          |-VarValType
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BinaryArithmeticExpressionType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        BinaryArithmeticExpressionType is an abstract type derived from
        ArithmeticExpressionType that represents an arithmetic operation
        with two operands, both of which are ArithmeticExpressionType.
        An instance of BinaryArithmeticExpressionType has the
        following elements:
          A1
          A2.
 
        A1 is the first arithmetic expression.
        A2 is the second arithmetic expression.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticExpressionType">
        <xs:sequence>
          <xs:element name="A1"
            type="ArithmeticExpressionType"/>
          <xs:element name="A2"
            type="ArithmeticExpressionType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BinaryBooleanExpressionType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        BinaryBooleanExpressionType is an abstract type derived from
        BooleanExpressionType that represents a boolean operation
        with two operands, both of which are BooleanExpressionType.
        An instance of BinaryBooleanExpressionType has the
        following elements:
          Name (inherited)
          B1
          B2.
 
        B1 is the first boolean expression.
        B2 is the second boolean expression.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BooleanExpressionType">
        <xs:sequence>
          <xs:element name="B1"
            type="BooleanExpressionType"/>
          <xs:element name="B2"
            type="BooleanExpressionType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BooleanExpressionType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        BooleanExpressionType is an abstract type derived from
	DataThingType and representing an expression with a value that is
        an xs:boolean (i.e., either True or False).
        An instance of BooleanExpressionType has the following elements:
          Name (inherited)
          .
 
        BooleanExpressionType has the following derivation hierarchy:
        DataThingType
        |-BooleanExpressionType
          |-ArithmeticComparisonBooleanExpressionType
          | |-EqualType
          | |-GreaterOrEqualType
          | |-GreaterType
          | |-LessOrEqualType
          | |-LessType
          | |-NotEqualType
          |-BooleanConstantType
          | |-TrueType
          | |-FalseType
          |-BinaryBooleanExpressionType
          | |-AndType
          | |-OrType
          |-NotType
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BooleanConstantType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        BooleanConstantType is an abstract type derived from
        BooleanExpressionType representing a constant boolean value
        (i.e., either True or False). An instance of BooleanConstantType
        has the following elements:
          Name (inherited)
          .
 
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DecimalType">
    <xs:annotation>
      <xs:documentation>
        DecimalType is derived from ArithmeticExpressionType and
        represents a constant number. An instance of DecimalType has
        the following elements:
          Name (inherited)
          A.
 
        A is a number that is an xs:decimal.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticExpressionType">
        <xs:sequence>
          <xs:element name="A"
            type="xs:decimal"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DivType">
    <xs:annotation>
      <xs:documentation>
        DivType is derived from BinaryArithmeticExpressionType and
        represents one number divided by another.
        An instance of DivType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The value of an instance of DivType is the value of A1 divided by
        the value of A2. The value of A2 should not be zero.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryArithmeticExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="EqualType">
    <xs:annotation>
      <xs:documentation>
        EqualType is derived from ArithmeticComparisonBooleanExpressionType.
        An instance of EqualType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The EqualType is an arithmetic comparison type. It returns a
        boolean value of True if the value of arithmetic expression A1 is
        equal to the value of arithmetic expression A2. Otherwise, it
        returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticComparisonBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="FalseType">
    <xs:annotation>
      <xs:documentation>
        FalseType is derived from BooleanConstantType and represents
        a boolean value of False.
        An instance of FalseType has the following elements:
          Name (inherited)
          .

      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BooleanConstantType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GreaterOrEqualType">
    <xs:annotation>
      <xs:documentation>
        GreaterOrEqualType is derived from
        ArithmeticComparisonBooleanExpressionType.
        An instance of GreaterOrEqualType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The GreaterOrEqualType is an arithmetic comparison type. It returns
        a boolean value of True if the value of arithmetic expression A1 is
        greater than or equal to the value of arithmetic expression A2.
        Otherwise, it returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticComparisonBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GreaterType">
    <xs:annotation>
      <xs:documentation>
        GreaterType is derived from
        ArithmeticComparisonBooleanExpressionType.
        An instance of GreaterType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The GreaterType is an arithmetic comparison type. It returns a
        boolean value of True if the value of arithmetic expression A1 is
        greater than the value of arithmetic expression A2. Otherwise, it
        returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticComparisonBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LessOrEqualType">
    <xs:annotation>
      <xs:documentation>
        LessOrEqualType is derived from
        ArithmeticComparisonBooleanExpressionType.
        An instance of LessOrEqualType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The LessOrEqualType is an arithmetic comparison type. It returns a
        boolean value of True if the value of arithmetic expression A1 is
        less than or equal to the value of arithmetic expression A2.
        Otherwise, it returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticComparisonBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LessType">
    <xs:annotation>
      <xs:documentation>
        LessType is derived from ArithmeticComparisonBooleanExpressionType.
        An instance of LessType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The LessType is an arithmetic comparison type. It returns a boolean
        value of True if the value of arithmetic expression A1 is less than
        the value of arithmetic expression A2. Otherwise, it returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticComparisonBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MinusType">
    <xs:annotation>
      <xs:documentation>
        MinusType is derived from BinaryArithmeticExpressionType and
        represents one number subtracted from another.
        An instance of MinusType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The value of an instance of MinusType is the value of A1 minus the
        value of A2.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryArithmeticExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ModType">
    <xs:annotation>
      <xs:documentation>
        ModType is derived from BinaryArithmeticExpressionType and
        represents the remainder when one number is divided by another.
        An instance of ModType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The value of an instance of ModType is the remainder when the value
        of A1 is divided by the value of A2. The value of A2 should not be
        zero.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryArithmeticExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NegateType">
    <xs:annotation>
      <xs:documentation>
        NegateType is derived from ArithmeticExpressionType and represents
        reversing the sign of the value of an arithmetic expression.
        An instance of NegateType has the following elements:
          Name (inherited)
          A.
 
        A is the arithmetic expression whose value is to have its sign
        reversed. The value of an instance of NegateType is the value of
        A multiplied by -1.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticExpressionType">
        <xs:sequence>
          <xs:element name="A"
            type="ArithmeticExpressionType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NotEqualType">
    <xs:annotation>
      <xs:documentation>
        NotEqualType is derived from ArithmeticComparisonBooleanExpressionType.
        An instance of NotEqualType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The NotEqualType is an arithmetic comparison type. It returns a
        boolean value of True if the value of arithmetic expression A1 is
        not equal to the value of arithmetic expression A2. Otherwise, it
        returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticComparisonBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NotType">
    <xs:annotation>
      <xs:documentation>
        NotType is derived from BooleanExpressionType.
        An instance of NotType has the following elements:
          Name (inherited)
          B.
 
        B is a boolean expression to be negated. The NotType returns True
        if the value of B is False. Otherwise, it returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BooleanExpressionType">
        <xs:sequence>
          <xs:element name="B"
            type="BooleanExpressionType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrType">
    <xs:annotation>
      <xs:documentation>
        OrType is derived from BinaryBooleanExpressionType.
        An instance of OrType has the following elements:
          Name (inherited)
          B1 (inherited)
          B2 (inherited).
 
        B1 and B2 are two boolean expressions to be considered. The OrType
        returns True (a) if the value of B1 is True and the value of B2 is
        False, or (b) if the value of B2 is True and the value of B1 is
        False, or (c) if both values are True. Otherwise, it returns False.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryBooleanExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PlusType">
    <xs:annotation>
      <xs:documentation>
        PlusType is derived from BinaryArithmeticExpressionType and
        represents one number added to another.
        An instance of PlusType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The value of an instance of PlusType is the value of A1 plus the
        value of A2.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryArithmeticExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PropValType">
    <xs:annotation>
      <xs:documentation>
        PropValType is derived from ArithmeticExpressionType and represents
        the value of any numerical data property of any SolidObjectType
        or DataThingType.
        An instance of PropValType has the following elements.
          Name (inherited)
          ThingName
          Property.
 
        ThingName is the name of an instance of DataThingType or
        SolidObjectType.
 
        Property is the name of a numerical property of the identified
        instance. The value of an instance of PropValType is the value
        of the property.
       </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticExpressionType">
        <xs:sequence>
          <xs:element name="ThingName"
            type="xs:NMTOKEN"/>
          <xs:element name="Property"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimesType">
    <xs:annotation>
      <xs:documentation>
        TimesType is derived from BinaryArithmeticExpressionType and
        represents one number multiplied by another.
        An instance of TimesType has the following elements:
          Name (inherited)
          A1 (inherited)
          A2 (inherited)
          .
 
        The value of an instance of TimesType is the value of A1 multiplied
        by the value of A2.
       </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BinaryArithmeticExpressionType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TrueType">
    <xs:annotation>
      <xs:documentation>
        TrueType is derived from BooleanConstantType and represents
        a boolean value of True.
        An instance of TrueType has the following elements:
          Name (inherited)
          .
 
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BooleanConstantType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VariableDeclarationType">
    <xs:annotation>
      <xs:documentation>
        VariableDeclarationType is derived from DataThingType and
        represents declaring a numerical variable whose value is
        an xs:decimal.
        An instance of VariableDeclarationType has the following elements:
          Name (inherited)
          Val.
 
        Val is the initial value of the variable. The value may be reset
        using an instance of VarSetType. The value may be used using an
        instance of VarValType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="Val"
            type="xs:decimal"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VarValType">
    <xs:annotation>
      <xs:documentation>
        VarValType is derived from ArithmeticExpressionType and represents
        the value of a numerical variable.
        An instance of VarValType has the following elements.
          Name (inherited)
          VarName.
 
        VarName is the name of a variable created with the
        VariableDeclarationType. The value of an instance of VarValType is
        the value of the variable at the time the variable is used (as in
        standard programming languages).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArithmeticExpressionType">
        <xs:sequence>
          <xs:element name="VarName"
            type="xs:IDREF">
            <xs:annotation>
              <xs:appinfo>VariableDeclarationType</xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VarSetType">
    <xs:annotation>
      <xs:documentation>
        VarSetType is derived from PlanElementBaseType and represents
        the setting of a variable.
        An instance of VarSetType has the following elements:
          Name (inherited)
          VarName (IDREF)
          Val.
 
        VarName is the name of a variable.
 
        Val is the value to which the variable should be set.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PlanElementBaseType">
        <xs:sequence>
          <xs:element name="VarName"
            type="xs:IDREF">
            <xs:annotation>
              <xs:appinfo>VariableDeclarationType</xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="Val"
            type="ArithmeticExpressionType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataThingType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        An instance of DataThingType has the following elements:
          Name
          .
 
        DataThingType is an abstract type from which more specific types
        of data thing are derived. That includes all complex data
        types such as Vector, PhysicalLocation, etc.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Name"
        type="xs:ID"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PhysicalLocationType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        PhysicalLocationType is derived from DataThingType.
        An instance of PhysicalLocationType has the following elements:
          Name (inherited)
          RefObjectName
          Timestamp (optional).
 
        PhysicalLocationType is an abstract type from which more specific
        types of physical location are derived. A PhysicalLocationType says
        where a SolidObjectType is relative to its reference object.

        Timestamp represents the most recent date and time when the
        location was updated.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="RefObjectName"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PointType">
    <xs:annotation>
      <xs:documentation>
        PointType is derived from DataThingType.
        An instance of PointType has the following elements:
          Name (inherited)
          X
          Y
          Z.
 
        The X, Y, and Z elements are the Cartesian coordinates of the Point.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="X"
            type="xs:decimal"/>
          <xs:element name="Y"
            type="xs:decimal"/>
          <xs:element name="Z"
            type="xs:decimal"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseLocationType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        PoseLocationType is derived from PhysicalLocationType.
        An instance of PoseLocationType has the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional).
          Point
          XAxis
          ZAxis 
          PositionStandardDeviation (optional)
          OrientationStandardDeviation (optional).
 
        PoseLocationType is an abstract type from which more specific types
        of pose location are derived. The Point locates the origin of a
        coordinate system. The XAxis and ZAxis give the orientation of the
        coordinate system. The data for the Point, the ZAxis and the XAxis
        are expressed relative to the coordinate system of the reference
        object.
 
        The PositionStandardDeviation is based on a normal distribution of
        actual position about its given value. Thus, for example, the
        actual position is expected to be within the given
        PositionStandardDeviation amount 68% of the time and within twice
        the given amount 95% of the time. The PositionStandardDeviation is
        measured in the length units being used.
 
        The OrientationStandardDeviation is based on a normal distribution
        of orientation about its given value. The error is to be measured
        as the angle of rotation about a single axis needed to rotate a
        solid object from its stated orientation to its actual orientation.
        The OrientationStandardDeviation is measured in the angle units
        being used.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PhysicalLocationType">
        <xs:sequence>
          <xs:element name="Point"
            type="PointType"/>
          <xs:element name="XAxis"
            type="VectorType"/>
          <xs:element name="ZAxis"
            type="VectorType"/>
          <xs:element name="PositionStandardDeviation"
            type="PositiveDecimalType"
            minOccurs="0"/>
          <xs:element name="OrientationStandardDeviation"
            type="PositiveDecimalType"
            minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseLocationInType">
    <xs:annotation>
      <xs:documentation>
        PoseLocationInType is derived from PoseLocationType.
        An instance of PoseLocationInType has the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional).
          Point (inherited)
          XAxis (inherited)
          ZAxis  (inherited)
          PositionStandardDeviation (inherited, optional)
          OrientationStandardDeviation (inherited, optional).
 
        A PoseLocationInType indicates that the object is inside
        the location-parent. The notion of 'inside' is vague and might be
        made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PoseLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseLocationOnType">
    <xs:annotation>
      <xs:documentation>
        PoseLocationOnType is derived from PoseLocationType.
        An instance of PoseLocationOnType has the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional).
          Point (inherited)
          XAxis (inherited)
          ZAxis  (inherited)
          PositionStandardDeviation (inherited, optional)
          OrientationStandardDeviation (inherited, optional).
 
        A PoseLocationOnType indicates that the Object is on top of the
        location-parent. The notion of 'on top of' is vague and might be
        made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PoseLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseOnlyLocationType">
    <xs:annotation>
      <xs:documentation>
        PoseOnlyLocationType is derived from PoseLocationType.
        An instance of PoseOnlyLocationType has the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional).
          Point (inherited)
          XAxis (inherited)
          ZAxis  (inherited)
          PositionStandardDeviation (inherited, optional)
          OrientationStandardDeviation (inherited, optional).
 
        An object located by a PoseOnlyLocationType may or may not be
        inside or on top of the reference object of the
        PoseOnlyLocationType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PoseLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="PositiveDecimalType">
    <xs:restriction base="xs:decimal">
      <xs:minExclusive value="0"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="RelativeLocationType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        RelativeLocationType is derived from PhysicalLocationType.
        An instance of RelativeLocationType has a the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional)
          Description.
 
        RelativeLocationType is an abstract type from which more specific
        types of relative location are derived. A RelativeLocationType
        indicates that the SolidObjectType that has the
        RelativeLocationType is on or in the RefObject. The Description may
        be used to describe the relative positions of the object and its
        reference object.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PhysicalLocationType">
        <xs:sequence>
          <xs:element name="Description"
            type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RelativeLocationInType">
    <xs:annotation>
      <xs:documentation>
        RelativeLocationInType is derived from RelativeLocationType.
        An instance of RelativeLocationInType has the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional)
          Description (inherited).
 
        A RelativeLocationInType indicates that the SolidObjectType that
        has the RelativeLocationType is in the RefObject. The notion of
        'in' is vague and might be made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RelativeLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RelativeLocationOnType">
    <xs:annotation>
      <xs:documentation>
        RelativeLocationOnType is derived from RelativeLocationType.
        An instance of RelativeLocationOnType has the following elements:
          Name (inherited)
          RefObjectName (inherited)
          Timestamp (inherited, optional)
          Description (inherited).
 
        A RelativeLocationOnType indicates that the SolidObjectType that
        has the RelativeLocationType is on top of the the RefObject. The
        notion of 'on top of' is vague and might be made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RelativeLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VectorType">
    <xs:annotation>
      <xs:documentation>
        VectorType is derived from DataThingType.
        An instance of VectorType has the following elements:
          Name (inherited)
          I
          J
          K.
 
        I, J, and K represent the usual i, j, and k components of a 3D
        vector.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="I"
            type="xs:decimal"/>
          <xs:element name="J"
            type="xs:decimal"/>
          <xs:element name="K"
            type="xs:decimal"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

</xs:schema>
