
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 182
#define YY_END_OF_BUFFER 183
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1640] =
    {   0,
      180,  180,    0,    0,    5,    5,    6,    6,  183,  181,
      180,  180,  181,  181,  178,  181,  181,  181,    2,    3,
        2,    5,  182,    6,    7,    6,    8,  180,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,   51,   55,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  139,  141,  145,   10,    0,
        0,    0,    0,    5,    6,    7,    6,    0,  179,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    0,    1,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,   54,    0,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  138,    0,    0,  140,    0,  144,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   67,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   89,    0,    0,

      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      125,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  105,    0,    0,

      111,    0,    0,  117,    0,    0,    0,  131,    0,    0,
      137,  143,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,    0,    0,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  124,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   45,   47,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,   91,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  104,    0,    0,    0,  110,    0,    0,    0,
      116,    0,    0,    0,    0,  130,    0,    0,    0,  136,
        0,  142,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  119,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
        0,   46,    0,    0,    0,    0,    0,    0,    0,   74,
        0,    0,    0,    0,    0,    0,    0,   90,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      128,    0,    0,    0,    0,    0,    0,   23,    0,    0,
        0,    0,    0,    0,   41,    0,    0,    0,    0,    0,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    9,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
        0,    0,   15,    0,    0,    0,    0,    0,    0,    0,
        0,   43,    0,    0,   61,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,    0,    0,  103,
        0,  109,    0,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,

        0,    0,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   31,    0,    0,   49,    0,    0,    0,    0,
        0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  127,  135,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,    0,    0,    0,   60,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   84,
        0,    0,    0,    0,    0,    0,  102,    0,    0,  108,
        0,    0,    0,    0,    0,  132,    0,   17,   19,    0,
       27,   29,   37,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   99,    0,    0,
        0,  123,    0,   13,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
        0,   48,    0,    0,    0,    0,    0,    0,   72,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  126,    0,  134,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   79,   81,    0,    0,
        0,   95,    0,    0,    0,  115,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,    0,   18,    0,    0,   26,
        0,   28,    0,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,  122,    0,    0,    0,
       39,   53,   59,    0,    0,    0,    0,   83,   87,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   78,    0,   80,    0,    0,    0,    0,   94,
        0,    0,    0,    0,  114,    0,    0,    0,   63,    0,
       71,    0,   97,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       38,    0,   52,    0,   58,    0,    0,    0,    0,    0,
       82,    0,   86,    0,   92,    0,    0,    0,   25,    0,
       35,    0,    0,  107,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   62,    0,    0,   70,    0,    0,   96,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,    0,   34,    0,    0,    0,  106,    0,    0,    0,
       77,  113,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  154,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,

       69,    0,  176,    0,   12,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  160,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   76,    0,  112,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  171,    0,    0,
        0,   32,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  161,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      162,    0,    0,    0,    0,    0,    0,    0,  175,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  149,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  166,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  150,    0,  152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  158,    0,    0,  164,  165,    0,    0,    0,    0,
        0,    0,  174,    0,    0,    0,  151,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  157,    0,    0,  167,    0,    0,  170,
        0,    0,    0,    0,  148,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,    0,    0,  163,  168,
      169,    0,    0,    0,    0,    0,  159,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  172,    0,    0,    0,    0,  173,    0,    0,
        0,    0,    0,  156,    0,  147,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  177,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,    1,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,   61,   62,   63,   64,   65,   66,   67,
       68,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1647] =
    {   0,
        0,    5,    7,    9, 2140, 2139,   22,   25, 2153, 2156,
       28,   31,    0,   97, 2156, 2135, 2093,    0, 2156, 2156,
     2143,    0, 2156,    0,   48,   56, 2156,   75, 2144, 2086,
     2141,   56, 2139,  141, 2156,    5, 2100,   19, 2095,   15,
     2090, 2081,   31, 2083, 2156, 2087,   36,   44, 2094,    7,
       46,   35,   97, 2077,   55, 2118, 2156, 2117, 2156, 2088,
     2078, 2080, 2115,    0,    0,   84,  107, 2078, 2156, 2123,
        0,   35, 2084,  135, 2079,   90, 2074, 2065,   87,  186,
      189,  192,  102,  152, 2080,   29,  141,  149,  155, 2063,
      163,  215,  221,  224, 2072, 2061, 2059, 2060, 2074, 2058,

     2055, 2068, 2052, 2056, 2068, 2050,   97, 2048, 2047, 2048,
     2050, 2040, 2048, 2057, 2047, 2049, 2050, 2040, 2047, 2046,
     2048, 2051,    8, 2051, 2031, 2038, 2048, 2039, 2043, 2029,
     2022, 2021, 2028,   54, 2072, 2156, 2071, 2156, 2033, 2022,
     2020, 2021, 2035, 2019, 2016, 2029, 2013, 2017, 2029, 2011,
      102,  233, 2156, 2009,  244, 2156,  249, 2156, 2008, 2009,
     2011, 2001, 2009, 2018, 2008, 2010, 2011, 2001, 2008, 2007,
     2009, 2012,  154, 2012, 1992, 1999, 2009, 2000, 2004, 1990,
      252, 2156, 1983,  255, 2156,  260, 2156, 1982, 1992, 2002,
     1997, 2000, 1986, 2021,  186, 2019, 1992, 1987, 1977, 2000,

     1986, 1988, 1986,  227, 1983, 1982, 1979, 1978, 1981, 1980,
     1979, 1978, 1963, 1967, 1967, 1990, 1963, 1962, 1967, 1959,
     1986, 1964, 1948, 1964, 1951, 1958, 1959, 1958, 1962,    3,
     1947,  158, 1945, 1951, 1961, 1956, 1959, 1945, 1980,  220,
     1978, 1951, 1946, 1936, 1959, 1945, 1947, 1945,  272, 1942,
     1941, 1938, 1937, 1940, 1939, 1938, 1937, 1922, 1926, 1926,
     1949, 1922, 1921, 1926, 1918,  276, 1924, 1908, 1924, 1911,
     1918, 1919, 1918, 1921, 1901, 2156, 1921, 1916, 1913, 1904,
     1913, 1913, 1901, 1899, 1900, 1900, 1906, 1924, 1895, 1906,
     1893, 1900, 1903, 1888, 1893, 1892, 1892, 2156, 1900, 1885,

      247, 1882, 1899, 1897, 1879, 1883, 1895, 1890, 1893, 1889,
     2156, 1884, 1883,    1, 1872, 1871, 1879, 1882,  283, 1883,
     1861, 1879, 1859,  298, 1879, 1874, 1871, 1862, 1871, 1871,
     1859, 1857, 1858, 1858, 1864, 1882, 1853,  301, 2156, 1864,
     1851, 1858, 1861, 1846, 1851, 1850, 1850,  309, 1858, 1843,
      317, 1840, 1857, 1855, 1837, 1841, 1853, 1848,  320, 2156,
     1851, 1847,  325, 1842, 1841,    4, 1830, 1829, 1851,  256,
     1836, 1835, 1842, 1833, 1827, 1834, 1825, 1830, 1847, 1820,
     1816, 1832, 1819, 1814, 1830, 1816, 1852, 1820, 1807, 1806,
      293, 1806, 1835, 1803, 1817, 1810, 1826, 2156, 1802, 1808,

     2156, 1813, 1804, 2156, 1802, 1825, 1794, 2156, 1811, 1796,
     2156, 2156, 1796, 1792,  341, 1785,  344, 1799, 1790, 1810,
      259,  356, 2156, 1795, 1794, 1801, 1792, 1786, 1793, 1784,
     1789, 1806, 1779, 1775, 1791, 1778, 1773, 1789, 1775, 1811,
     1779, 1766, 1765,  317,  359, 2156, 1765, 1794,  363, 2156,
     1762, 1776, 1769, 1785,  366, 1761, 1767,  382, 1772, 1763,
      385, 1761, 1784,  388, 2156, 1753,  391, 1770, 1755,  394,
      410, 1755, 1748, 1766, 1747, 1751, 1751, 1747, 1774, 1756,
     1759, 1754, 1743, 2156, 2156, 1747, 1755, 1746, 1730, 1746,
     1737, 1756, 1737, 1736, 1739, 1746, 1722, 2156, 1743, 1743,

     1737, 1722, 1724, 1716, 1734, 1737, 1749, 1731, 1733, 1739,
     1731, 1720, 1724, 1712, 1711,  413, 1708, 1722, 1721, 1711,
     1704, 1722, 1703, 1707, 1707, 1703, 1730, 1712, 1715, 1710,
     1699,  418,  421, 1703, 1711, 1702, 1686, 1702, 1693,  426,
     1694, 1693, 1696, 1703, 1679,  429, 1700, 1700, 1694, 1679,
     1681,  437, 2156, 1673, 1691,  445, 2156, 1694, 1706,  449,
     2156, 1688, 1690,  453,  456, 2156, 1689, 1678,  465, 2156,
      472, 2156, 1680, 1675, 1683, 1662, 1678, 1679, 1664, 1681,
     1678, 1668, 1675, 1660, 1672, 1664, 1668,  234, 1677, 1659,
     1658,  302, 1681, 1658, 1656, 1652, 1649, 1652, 1690, 1676,

     1662, 1676, 1658, 1643, 1639, 2156, 1648, 1643, 1644, 1635,
      475, 1645, 1644, 1635, 1638,  481, 1641, 1636, 1644, 1623,
     1639, 1640, 1625, 1642, 1639, 1629, 1636, 1621,  484, 2156,
      491, 2156, 1633, 1625, 1629,  244, 1638, 1620,  496, 2156,
     1619,  341, 1642, 1619, 1617, 1613,  500, 2156, 1610, 1613,
     1651, 1637, 1623, 1637, 1619, 1604, 1600,  503, 1609,  507,
     2156, 1604, 1605, 1596, 1596, 1611, 1598, 2156,    1,   50,
       84,   97,   96,  139, 2156,  132,  166,  192,  172,  176,
     2156,  181,  179,  207,  209,  211,  239,  258,  265,  267,
      267,  270,  280,  294,  272,  292,  293,  296,  315,  325,

      324,  329,  324,  512, 2156,  323,  519,  342,  356,  523,
      527,  340,  358,  353,  534,  370,  346,  357,  361,  363,
      397,  538,  387,  390,  405,  386,  390,  541,  391,  398,
      410,  405,  412,  413,  431,  432,  441,  433,  449,  460,
      474,  464,  475,  483,  479,  491,  550, 2156,  500,  497,
      507,  500, 2156,  510,  496,  498,  513,  504,  515,  506,
      514, 2156,  505,  517,  538,  507,  511,  528,  511,  530,
      523,  524,  546, 2156,  547,  535,  528,  534,  526, 2156,
      537, 2156,  555,  540,  540,  525, 2156,  540,  532,  589,
      592,  583,  569,  598,  586,  621,  554,  543,  626, 2156,

      545,  561,  553,  565,  559,  567,  629, 2156,  632,  558,
      585,  637,  578,  648, 2156,  583,  600,  584,  603,  600,
      602,  624,  655,  628,  616,  609,  615,  607,  664,  623,
      671,  641,  630,  630,  615,  680,  630,  619,  623,  641,
      626,  631, 2156,  629,  646, 2156,  647,  648,  662,  640,
      643, 2156,  650,  641,  642,  656,  657,  656,  641,  671,
      657,  662,  649,  660,  647, 2156, 2156,  709,  712,  665,
      664,  661,  662,  664,  662,  666,  673,  682,  679,  684,
      681,  687,  674,  732, 2156,  676,  676,  694,  680,  684,
      742,  686,  703,  748, 2156,  751,  711,  758, 2156,  712,

      726,  708,  711,  767,  718,  709,  714,  728,  774, 2156,
      729,  732,  717,  747,  733,  783, 2156,  738,  786, 2156,
      733,  744,  731,  793,  802, 2156,  805, 2156, 2156,  735,
     2156, 2156,  785,  739,  741,  745,  767,  751,  756,  774,
      753,  755,  763,  764,  767,  756,  766, 2156,  763,  780,
      767, 2156,  827, 2156,  769,  780,  787,  768,  788,  774,
      785,  776,  777,  780,  795,  783,  783,  790,  801,  801,
      788,  848,  851,  793,  855,  858,  867, 2156,  874,  803,
      877, 2156,  804,  809,  822,  811,  816,  884, 2156,  841,
      820,  822,  832,  833,  836,  825,  836,  894,  836,  855,

      842,  905,  910, 2156,  913, 2156,  851,  846,  865,  869,
      870,  871,  864,  860,  875,  876, 2156, 2156,  877,  879,
      880, 2156,  869,  879,  888, 2156,  871,  872,  891,  869,
      915,  890,  880,  892,  904,  892,  892,  882,  897,  902,
      889,  885,  895,  949, 2156,  952, 2156,  904,  956, 2156,
      959, 2156,  968, 2156,  905,  920,  919,  925,  926,  920,
      915,  930,  931,  979,  984,  935,  940,  941,  989,  932,
      995, 2156,  942,  955, 1000, 1005, 2156,  946,  954,  954,
     2156, 2156, 2156,  964,  969,  954,  963, 2156, 2156, 2156,
      969,  960,  957,  961,  960,  961,  988,  976,  966,  968,

      968,  969,  978,  983,  988,  996, 1005,  973,  976,  976,
     1003,  983,  987,  987, 1043, 1046, 1049, 1005, 1010,  995,
     1004, 1065, 2156, 1068, 2156, 1071, 1074, 1077, 1093, 2156,
     1010, 1002,  999, 1096, 2156, 1006, 1017, 1034, 2156, 1021,
     2156, 1035, 2156, 1029, 1036, 1076, 1039, 1040, 1049, 1052,
     1045, 1055, 1047, 1061, 1047, 1050, 1091, 1051, 1046, 1095,
     1057, 1059, 1065, 1081, 1063, 1076, 1064, 1075, 1075, 1123,
     2156, 1126, 2156, 1132, 2156, 1135, 1068, 1142, 1081, 1151,
     2156, 1154, 2156, 1158, 2156, 1161, 1083, 1089, 2156, 1098,
     2156, 1095, 1098, 2156, 1092, 1157, 1109, 1110, 1125, 1123,

     1128, 1113, 1131, 1109, 1130, 1129, 1122, 1123, 1130, 1124,
     1132, 1125, 1140, 1132, 1124, 1122, 1168, 1146, 1191, 1147,
     1195, 1198, 2156, 1150, 1202, 2156, 1155, 1207, 2156, 1214,
     1154, 1153, 1161, 1158, 1164, 1214, 1174, 1168, 1167, 1181,
     1173, 1207, 1176, 1195, 1228, 1194, 1169, 1179, 1191, 1190,
     1182, 1196, 1197, 1175, 1195, 1185, 1196, 1191, 1246, 2156,
     1190, 1250, 2156, 1196, 1193, 1255, 2156, 1202, 1199, 1204,
     2156, 2156, 1198, 1259, 1266, 1217, 1208, 1236, 1224, 1238,
     1208, 2156, 1218, 1237, 1216, 1235, 1275, 1245, 1216, 1222,
     1256, 1257, 1239, 1239, 1241, 1229, 1234, 1291, 1294, 2156,

     2156, 1233, 2156, 1298, 2156, 1265, 1245, 1253, 1256, 1255,
     1249, 1249, 1259, 1268, 1259, 2156, 1248, 1279, 1265, 1260,
     1262, 1316, 1274, 1286, 1323, 1326, 1329, 2156, 1332, 2156,
     1271, 1270, 1278, 1296, 1293, 1299, 1296, 1292, 1285, 1297,
     1330, 1292, 1285, 1301, 1296, 1309, 1310, 2156, 1311, 1291,
     1358, 2156, 1361, 2156, 1358, 1307, 1347, 1309, 1323, 1311,
     1366, 1312, 1324, 1319, 1320, 1331, 1321, 1319, 1325, 1339,
     1341, 1324, 1328, 1323, 1341, 1339, 1333, 1325, 1345, 1332,
     1347, 2156, 1334, 1375, 1350, 1343, 1395, 1353, 1351, 1378,
     1343, 1344, 1349, 1360, 1397, 1406, 1368, 1358, 1355, 1379,

     1359, 1381, 1375, 1364, 1369, 1362, 1364, 2156, 1419, 1392,
     1369, 1370, 1361, 1377, 1378, 1371, 1427, 1426, 2156, 1377,
     1388, 1388, 1370, 1378, 1372, 1378, 1382, 1380, 1406, 1386,
     2156, 1401, 1409, 1410, 1389, 1391, 1392, 1421, 2156, 1394,
     1403, 1406, 1450, 1397, 1422, 1401, 1409, 1400, 1402, 1397,
     1408, 1406, 1400, 1401, 1421, 1413, 1414, 1409, 1421, 1407,
     1415, 1424, 1417, 2156, 1430, 1412, 1432, 1423, 1415, 1446,
     1425, 1437, 1424, 1428, 1429, 1484, 1453, 1465, 1437, 1436,
     1435, 1445, 1439, 1461, 1494, 1441, 1496, 1446, 1476, 1438,
     1458, 1450, 1447, 1461, 1462, 2156, 1444, 1455, 1456, 1447,

     1453, 1466, 1469, 1510, 1469, 1453, 2156, 1473, 2156, 1485,
     1471, 1465, 1520, 1464, 1490, 1523, 1524, 1471, 1494, 1495,
     1474, 1482, 1480, 1531, 1526, 1502, 1480, 1535, 1474, 1480,
     1495, 2156, 1507, 1478, 2156, 2156, 1498, 1480, 1481, 1501,
     1530, 1503, 2156, 1543, 1491, 1506, 2156, 1496, 1519, 1552,
     1491, 1500, 1555, 1502, 1503, 1558, 1501, 1545, 1557, 1523,
     1563, 1521, 1510, 2156, 1512, 1524, 2156, 1525, 1526, 2156,
     1516, 1513, 1567, 1516, 2156, 1574, 1536, 1533, 1577, 1578,
     1579, 1548, 1527, 1579, 1536, 2156, 1522, 1585, 2156, 2156,
     2156, 1524, 1555, 1552, 1536, 1534, 2156, 1537, 1530, 1568,

     1542, 1563, 1553, 1543, 1574, 1567, 1538, 1601, 1559, 1572,
     1542, 1551, 2156, 1606, 1566, 1554, 1566, 2156, 1564, 1568,
     1612, 1570, 1614, 2156, 1564, 2156, 1577, 1616, 1571, 1567,
     1564, 1564, 1583, 1571, 1583, 1582, 1626, 2156, 2156, 1632,
     1636, 1640, 1644, 1648, 1652, 1655
    } ;

static yyconst flex_int16_t yy_def[1647] =
    {   0,
     1640, 1640, 1641, 1641, 1642, 1642, 1643, 1643, 1639, 1639,
     1639, 1639, 1644, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1645, 1639, 1646, 1639, 1646, 1639, 1639, 1639, 1639,
     1644,   14, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1645, 1646, 1639, 1646, 1639, 1639, 1639,
       34, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,    0, 1639,
     1639, 1639, 1639, 1639, 1639, 1639
    } ;

static yyconst flex_int16_t yy_nxt[2225] =
    {   0,
     1639,   11,   12,   11,  230,   13,   11,   12,   11,   20,
       13,   20, 1639,   21,   14,   21,   15,   16, 1639,   14,
     1639,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1639,   27,  756,  409,   27,
      410,  468,   29,  469, 1639,   29, 1639, 1639,   17,   66,
       66,   66,  116,   17,  218,  230,   61,   66,   67,   67,
     1639,   62,   95,   98, 1639,   96,   18,  318,  219,  117,
       99,   18,  102, 1639,  166,  106,   28,   28,   28,  107,
      110,  103,  100,  121,  111,   66,   66,   66,  112,   29,
      118,  167,  139,  122,   30,  140,  113,   30,   32,   32,

       32,   33,  114,  128,  119,   34,  120,  129,   66,   67,
       67,  231,  757,  130,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,  150,   52,   53,   54,  151,  758,   55,   56,   57,
       58,   30,   71,   71,   71,  123,  160,  146,  124,  201,
      161,  125,  202,  759,  246,  126,  147,  247,  760,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,  761,   88,   89,   90,  142,
      762,   91,   92,   93,   94,  168,  143,  152,  152,  152,
      155,  155,  155,  157,  157,  157,  162,  171,  144,  169,

      263,  170,  153,  173,  163,  156,  174,  172,  158,  175,
      164,  178,  763,  176,  264,  179,  181,  181,  181,  320,
      321,  180,  184,  184,  184,  186,  186,  186,  764,  765,
      766,  182,  280,  183,  152,  152,  152,  185,  281,  767,
      187,  768,  188,  154,  159,  155,  155,  155,  290,  153,
      157,  157,  157,  181,  181,  181,  184,  184,  184,  769,
      156,  186,  186,  186,  291,  158,  328,  770,  182,  771,
      680,  185,  329,  338,  338,  338,  187,  359,  359,  359,
      727,  394,  395,  396,  415,  415,  415,  473,  339,  292,
      521,  474,  360,  340,  522,  681,  416,  772,  417,  422,

      422,  422,  338,  338,  338,  728,  773,  361,  397,  341,
      445,  445,  445,  774,  423,  775,  495,  339,  449,  449,
      449,  359,  359,  359,  496,  446,  464,  464,  464,  776,
      497,  685,  777,  450,  342,  686,  360,  778,  779,  780,
      543,  465,  415,  415,  415,  516,  516,  516,  544,  517,
      781,  451,  452,  453,  545,  782,  417,  422,  422,  422,
      445,  445,  445,  783,  449,  449,  449,  552,  552,  552,
      732,  784,  423,  785,  733,  446,  786,  787,  454,  450,
      788,  789,  553,  556,  556,  556,  560,  560,  560,  464,
      464,  464,  565,  565,  565,  569,  569,  569,  557,  792,

      793,  561,  796,  797,  465,  798,  801,  566,  802,  803,
      570,  571,  571,  571,  516,  516,  516,  804,  517,  629,
      629,  629,  631,  631,  631,  805,  572,  639,  639,  639,
      647,  647,  647,  806,  630,  809,  810,  632,  552,  552,
      552,  811,  640,  812,  813,  648,  556,  556,  556,  816,
      560,  560,  560,  553,  660,  660,  660,  565,  565,  565,
      817,  557,  818,  819,  641,  561,  569,  569,  569,  661,
      820,  821,  566,  571,  571,  571,  704,  704,  704,  822,
      823,  570,  710,  710,  710,  629,  629,  629,  572,  824,
      705,  662,  631,  631,  631,  825,  711,  639,  639,  639,

      630,  647,  647,  647,  747,  747,  747,  632,  660,  660,
      660,  826,  640,  704,  704,  704,  648,  827,  828,  748,
      790,  790,  790,  661,  710,  710,  710,  705,  794,  794,
      794,  829,  795,  830,  791,  799,  799,  799,  711,  807,
      807,  807,  814,  814,  814,  831,  832,  833,  834,  835,
      800,  747,  747,  747,  808,  836,  837,  815,  838,  839,
      840,  841,  842,  843,  844,  845,  748,  846,  847,  848,
      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      790,  790,  790,  869,  869,  869,  871,  870,  872,  794,

      794,  794,  886,  795,  791,  873,  887,  888,  874,  889,
      875,  890,  876,  891,  877,  878,  879,  892,  893,  880,
      896,  881,  884,  884,  884,  882,  883,  799,  799,  799,
      807,  807,  807,  894,  894,  894,  897,  885,  898,  898,
      898,  901,  800,  902,  903,  808,  904,  905,  895,  814,
      814,  814,  906,  899,  907,  908,  909,  909,  909,  911,
      912,  913,  914,  915,  815,  916,  916,  916,  900,  918,
      921,  910,  919,  919,  919,  922,  923,  924,  927,  928,
      917,  925,  925,  925,  929,  930,  931,  920,  932,  933,
      934,  935,  936,  937,  938,  939,  926,  940,  941,  942,

      943,  944,  945,  946,  947,  948,  949,  950,  951,  952,
      953,  953,  953,  869,  869,  869,  955,  870,  956,  957,
      958,  959,  961,  962,  954,  963,  964,  965,  966,  968,
      960,  970,  971,  884,  884,  884,  972,  973,  974,  969,
      975,  976,  967,  977,  977,  977,  979,  980,  885,  894,
      894,  894,  981,  981,  981,  983,  984,  985,  978,  898,
      898,  898,  986,  987,  895,  990,  991,  982,  988,  988,
      988,  992,  993,  994,  899,  909,  909,  909,  995,  996,
      997,  998,  999,  989,  916,  916,  916,  919,  919,  919,
      910, 1000, 1001, 1002, 1003, 1003, 1003, 1007, 1010,  917,

     1011, 1012,  920,  925,  925,  925, 1005, 1005, 1005, 1004,
     1008, 1013, 1014, 1015, 1016, 1017, 1009, 1018,  926, 1019,
     1020, 1006, 1021, 1022, 1023, 1024, 1025, 1026,  953,  953,
      953, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1037,  954, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
     1044, 1044, 1046, 1046, 1046, 1048, 1049, 1049, 1049, 1051,
     1051, 1051, 1057, 1058, 1045, 1059, 1060, 1047,  977,  977,
      977, 1050, 1061, 1062, 1052, 1053, 1053, 1053,  981,  981,
      981, 1063, 1064,  978, 1065,  988,  988,  988, 1066, 1067,
     1054, 1068, 1069,  982, 1070, 1071, 1071, 1071, 1073, 1055,

      989, 1074, 1075, 1078, 1079, 1056, 1076, 1076, 1076, 1080,
     1072, 1003, 1003, 1003, 1005, 1005, 1005, 1081, 1082, 1083,
     1084, 1077, 1085, 1086, 1087, 1088, 1004, 1089, 1090, 1006,
     1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
     1044, 1044, 1044, 1046, 1046, 1046, 1112, 1049, 1049, 1049,
     1051, 1051, 1051, 1113, 1114, 1045, 1103, 1115, 1047, 1053,
     1053, 1053, 1050, 1116, 1117, 1052, 1118, 1119, 1120, 1121,
     1122, 1122, 1122, 1126, 1054, 1124, 1124, 1124, 1127, 1128,
     1129, 1129, 1129, 1131, 1132, 1123, 1071, 1071, 1071, 1133,

     1125, 1134, 1134, 1134, 1136, 1130, 1076, 1076, 1076, 1137,
     1138, 1072, 1139, 1140, 1141, 1142, 1135, 1143, 1144, 1145,
     1146, 1077, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
     1156, 1157, 1158, 1159, 1161, 1163, 1155, 1162, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1170, 1170, 1172, 1172, 1172,
     1174, 1174, 1174, 1176, 1177, 1178, 1179, 1160, 1186, 1171,
     1187, 1188, 1173, 1189, 1190, 1175, 1122, 1122, 1122, 1124,
     1124, 1124, 1180, 1180, 1180, 1182, 1182, 1182, 1184, 1184,
     1184, 1123, 1191, 1192, 1125, 1193, 1194, 1181, 1195, 1196,
     1183, 1197, 1198, 1185, 1129, 1129, 1129, 1134, 1134, 1134,

     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1130,
     1207, 1208, 1135, 1210, 1211, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1221, 1170, 1170, 1170, 1172, 1172, 1172,
     1224, 1227, 1212, 1174, 1174, 1174, 1222, 1222, 1222, 1171,
     1230, 1231, 1173, 1225, 1225, 1225, 1232, 1233, 1175, 1234,
     1235, 1223, 1180, 1180, 1180, 1182, 1182, 1182, 1226, 1184,
     1184, 1184, 1228, 1228, 1228, 1236, 1237, 1181, 1238, 1239,
     1183, 1240, 1241, 1242, 1185, 1243, 1244, 1229, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1259, 1259, 1259, 1261, 1262, 1262, 1262, 1222,

     1222, 1222, 1264, 1225, 1225, 1225, 1265, 1260, 1228, 1228,
     1228, 1263, 1268, 1269, 1223, 1266, 1266, 1266, 1226, 1270,
     1271, 1272, 1273, 1229, 1274, 1275, 1276, 1277, 1278, 1279,
     1267, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1292, 1293, 1294, 1295, 1259, 1259, 1259,
     1296, 1262, 1262, 1262, 1297, 1298, 1266, 1266, 1266, 1299,
     1300, 1301, 1260, 1302, 1303, 1306, 1263, 1304, 1304, 1304,
     1307, 1267, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1305, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
     1325, 1326, 1327, 1327, 1327, 1329, 1329, 1329, 1331, 1304,

     1304, 1304, 1332, 1333, 1334, 1335, 1336, 1328, 1337, 1338,
     1330, 1339, 1340, 1305, 1341, 1342, 1343, 1345, 1346, 1344,
     1347, 1348, 1349, 1350, 1351, 1351, 1351, 1353, 1353, 1353,
     1327, 1327, 1327, 1329, 1329, 1329, 1355, 1356, 1357, 1352,
     1358, 1359, 1354, 1360, 1361, 1328, 1362, 1363, 1330, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1351,
     1351, 1351, 1353, 1353, 1353, 1374, 1375, 1376, 1379, 1380,
     1381, 1382, 1377, 1383, 1352, 1384, 1385, 1354, 1386, 1387,
     1388, 1389, 1390, 1391, 1378, 1392, 1393, 1394, 1395, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1407,

     1408, 1409, 1410, 1405, 1411, 1414, 1415, 1416, 1417, 1418,
     1412, 1419, 1420, 1421, 1422, 1413, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
     1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
     1457, 1458, 1461, 1462, 1463, 1464, 1465, 1459, 1460, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
     1497, 1498, 1501, 1502, 1503, 1504, 1505, 1499, 1506, 1507,

     1508, 1509, 1500, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
     1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
     1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
     1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,

     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638,   10,   10,   10,   10,   19,   19,   19,   19,
       22,   22,   22,   22,   24,   24,   24,   24,   31,   31,
      755,   31,   64,   64,   64,   65,  754,   65,  753,  752,
      751,  750,  749,  746,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  735,  734,  731,  730,  729,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  709,  708,  707,  706,  703,  702,

      701,  700,  699,  698,  697,  696,  695,  694,  693,  692,
      691,  690,  689,  688,  687,  684,  683,  682,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  646,  645,  644,  643,
      642,  638,  637,  636,  635,  634,  633,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,

      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  568,  567,  564,  563,  562,  559,  558,
      555,  554,  551,  550,  549,  548,  547,  546,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  520,  519,
      518,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  472,
      471,  470,  467,  466,  463,  462,  461,  460,  459,  458,

      457,  456,  455,  448,  447,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  421,  420,  419,  418,
      414,  413,  412,  411,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  337,  336,  335,  334,  333,  332,  331,

      330,  327,  326,  325,  324,  323,  322,  321,  319,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  289,  288,  287,  286,  285,  284,
      283,  282,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  217,  216,  215,  214,

      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  177,  165,  149,  148,  145,  141,  138,
      137,  136,  135,  134,  133,  132,  131,  127,  115,  109,
      108,  105,  104,  101,   97,   70,   69,   68,   33,   63,
       60,   59, 1639,   23,   23,    9, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639
    } ;

static yyconst flex_int16_t yy_chk[2225] =
    {   0,
        0,    1,    1,    1,  230,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,  669,  314,    8,
      314,  366,   11,  366,    0,   12,    0,    0,    1,   25,
       25,   25,   50,    2,  123,  134,   18,   26,   26,   26,
       32,   18,   36,   38,   32,   36,    1,  230,  123,   50,
       38,    2,   40,   32,   86,   43,   28,   28,   28,   43,
       47,   40,   38,   52,   47,   66,   66,   66,   48,   28,
       51,   86,   72,   52,   11,   72,   48,   12,   14,   14,

       14,   14,   48,   55,   51,   14,   51,   55,   67,   67,
       67,  134,  670,   55,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   79,   14,   14,   14,   79,  671,   14,   14,   14,
       14,   28,   34,   34,   34,   53,   83,   76,   53,  107,
       83,   53,  107,  672,  151,   53,   76,  151,  673,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  674,   34,   34,   34,   74,
      676,   34,   34,   34,   34,   87,   74,   80,   80,   80,
       81,   81,   81,   82,   82,   82,   84,   88,   74,   87,

      173,   87,   80,   89,   84,   81,   89,   88,   82,   89,
       84,   91,  677,   89,  173,   91,   92,   92,   92,  232,
      232,   91,   93,   93,   93,   94,   94,   94,  678,  679,
      680,   92,  195,   92,  152,  152,  152,   93,  195,  682,
       94,  683,   94,   80,   82,  155,  155,  155,  204,  152,
      157,  157,  157,  181,  181,  181,  184,  184,  184,  684,
      155,  186,  186,  186,  204,  157,  240,  685,  181,  686,
      588,  184,  240,  249,  249,  249,  186,  266,  266,  266,
      636,  301,  301,  301,  319,  319,  319,  370,  249,  204,
      421,  370,  266,  249,  421,  588,  319,  687,  319,  324,

      324,  324,  338,  338,  338,  636,  688,  266,  301,  249,
      348,  348,  348,  689,  324,  690,  391,  338,  351,  351,
      351,  359,  359,  359,  391,  348,  363,  363,  363,  691,
      391,  592,  692,  351,  249,  592,  359,  693,  694,  695,
      444,  363,  415,  415,  415,  417,  417,  417,  444,  417,
      696,  351,  351,  351,  444,  697,  415,  422,  422,  422,
      445,  445,  445,  698,  449,  449,  449,  455,  455,  455,
      642,  699,  422,  700,  642,  445,  701,  702,  351,  449,
      703,  706,  455,  458,  458,  458,  461,  461,  461,  464,
      464,  464,  467,  467,  467,  470,  470,  470,  458,  708,

      709,  461,  712,  713,  464,  714,  716,  467,  717,  718,
      470,  471,  471,  471,  516,  516,  516,  719,  516,  532,
      532,  532,  533,  533,  533,  720,  471,  540,  540,  540,
      546,  546,  546,  721,  532,  723,  724,  533,  552,  552,
      552,  725,  540,  726,  727,  546,  556,  556,  556,  729,
      560,  560,  560,  552,  564,  564,  564,  565,  565,  565,
      730,  556,  731,  732,  540,  560,  569,  569,  569,  564,
      733,  734,  565,  571,  571,  571,  611,  611,  611,  735,
      736,  569,  616,  616,  616,  629,  629,  629,  571,  737,
      611,  564,  631,  631,  631,  738,  616,  639,  639,  639,

      629,  647,  647,  647,  658,  658,  658,  631,  660,  660,
      660,  739,  639,  704,  704,  704,  647,  740,  741,  658,
      707,  707,  707,  660,  710,  710,  710,  704,  711,  711,
      711,  742,  711,  743,  707,  715,  715,  715,  710,  722,
      722,  722,  728,  728,  728,  744,  745,  746,  749,  750,
      715,  747,  747,  747,  722,  751,  752,  728,  754,  755,
      756,  757,  758,  759,  760,  761,  747,  763,  764,  765,
      766,  767,  768,  769,  770,  771,  772,  773,  775,  776,
      777,  778,  779,  781,  783,  784,  785,  786,  788,  789,
      790,  790,  790,  791,  791,  791,  792,  791,  793,  794,

      794,  794,  797,  794,  790,  795,  798,  801,  795,  802,
      795,  803,  795,  804,  795,  795,  795,  805,  806,  795,
      810,  795,  796,  796,  796,  795,  795,  799,  799,  799,
      807,  807,  807,  809,  809,  809,  811,  796,  812,  812,
      812,  813,  799,  816,  817,  807,  818,  819,  809,  814,
      814,  814,  820,  812,  821,  822,  823,  823,  823,  824,
      825,  826,  827,  828,  814,  829,  829,  829,  812,  830,
      832,  823,  831,  831,  831,  833,  834,  835,  837,  838,
      829,  836,  836,  836,  839,  840,  841,  831,  842,  844,
      845,  847,  848,  849,  850,  851,  836,  853,  854,  855,

      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      868,  868,  868,  869,  869,  869,  870,  869,  871,  872,
      873,  874,  875,  876,  868,  877,  878,  879,  880,  881,
      874,  882,  883,  884,  884,  884,  886,  887,  888,  881,
      889,  890,  880,  891,  891,  891,  892,  893,  884,  894,
      894,  894,  896,  896,  896,  897,  900,  901,  891,  898,
      898,  898,  902,  903,  894,  905,  906,  896,  904,  904,
      904,  907,  908,  911,  898,  909,  909,  909,  912,  913,
      914,  915,  918,  904,  916,  916,  916,  919,  919,  919,
      909,  921,  922,  923,  924,  924,  924,  930,  934,  916,

      935,  936,  919,  925,  925,  925,  927,  927,  927,  924,
      933,  937,  938,  939,  940,  941,  933,  942,  925,  943,
      944,  927,  945,  946,  947,  949,  950,  951,  953,  953,
      953,  955,  956,  957,  958,  959,  960,  961,  962,  963,
      964,  965,  953,  966,  967,  968,  969,  970,  971,  972,
      972,  972,  973,  973,  973,  974,  975,  975,  975,  976,
      976,  976,  980,  983,  972,  984,  985,  973,  977,  977,
      977,  975,  986,  987,  976,  979,  979,  979,  981,  981,
      981,  990,  991,  977,  992,  988,  988,  988,  993,  994,
      979,  995,  996,  981,  997,  998,  998,  998,  999,  979,

      988, 1000, 1001, 1007, 1008,  979, 1002, 1002, 1002, 1009,
      998, 1003, 1003, 1003, 1005, 1005, 1005, 1010, 1011, 1012,
     1013, 1002, 1014, 1015, 1016, 1019, 1003, 1020, 1021, 1005,
     1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
     1044, 1044, 1044, 1046, 1046, 1046, 1048, 1049, 1049, 1049,
     1051, 1051, 1051, 1055, 1056, 1044, 1035, 1057, 1046, 1053,
     1053, 1053, 1049, 1058, 1059, 1051, 1060, 1061, 1062, 1063,
     1064, 1064, 1064, 1066, 1053, 1065, 1065, 1065, 1067, 1068,
     1069, 1069, 1069, 1070, 1073, 1064, 1071, 1071, 1071, 1074,

     1065, 1075, 1075, 1075, 1078, 1069, 1076, 1076, 1076, 1079,
     1080, 1071, 1084, 1085, 1086, 1087, 1075, 1091, 1092, 1093,
     1094, 1076, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1102, 1107, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1115, 1115, 1116, 1116, 1116,
     1117, 1117, 1117, 1118, 1119, 1120, 1121, 1106, 1131, 1115,
     1132, 1133, 1116, 1136, 1137, 1117, 1122, 1122, 1122, 1124,
     1124, 1124, 1126, 1126, 1126, 1127, 1127, 1127, 1128, 1128,
     1128, 1122, 1138, 1140, 1124, 1142, 1144, 1126, 1145, 1146,
     1127, 1147, 1148, 1128, 1129, 1129, 1129, 1134, 1134, 1134,

     1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1129,
     1157, 1157, 1134, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1170, 1170, 1172, 1172, 1172,
     1177, 1179, 1160, 1174, 1174, 1174, 1176, 1176, 1176, 1170,
     1187, 1188, 1172, 1178, 1178, 1178, 1190, 1192, 1174, 1193,
     1195, 1176, 1180, 1180, 1180, 1182, 1182, 1182, 1178, 1184,
     1184, 1184, 1186, 1186, 1186, 1196, 1197, 1180, 1198, 1199,
     1182, 1200, 1201, 1202, 1184, 1203, 1204, 1186, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1219, 1219, 1220, 1221, 1221, 1221, 1222,

     1222, 1222, 1224, 1225, 1225, 1225, 1227, 1219, 1228, 1228,
     1228, 1221, 1231, 1232, 1222, 1230, 1230, 1230, 1225, 1233,
     1234, 1235, 1236, 1228, 1237, 1238, 1239, 1240, 1241, 1242,
     1230, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1259, 1259,
     1261, 1262, 1262, 1262, 1264, 1265, 1266, 1266, 1266, 1268,
     1269, 1270, 1259, 1273, 1274, 1276, 1262, 1275, 1275, 1275,
     1277, 1266, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286,
     1287, 1275, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
     1296, 1297, 1298, 1298, 1298, 1299, 1299, 1299, 1302, 1304,

     1304, 1304, 1306, 1307, 1308, 1309, 1310, 1298, 1311, 1312,
     1299, 1313, 1314, 1304, 1315, 1317, 1318, 1319, 1320, 1318,
     1321, 1322, 1323, 1324, 1325, 1325, 1325, 1326, 1326, 1326,
     1327, 1327, 1327, 1329, 1329, 1329, 1331, 1332, 1333, 1325,
     1334, 1335, 1326, 1336, 1337, 1327, 1338, 1339, 1329, 1340,
     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351,
     1351, 1351, 1353, 1353, 1353, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1357, 1362, 1351, 1363, 1364, 1353, 1365, 1366,
     1367, 1368, 1369, 1370, 1357, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1386,

     1387, 1388, 1389, 1384, 1390, 1391, 1392, 1393, 1394, 1395,
     1390, 1396, 1397, 1398, 1399, 1390, 1400, 1401, 1402, 1403,
     1404, 1405, 1406, 1407, 1409, 1410, 1411, 1412, 1413, 1414,
     1415, 1416, 1417, 1418, 1420, 1421, 1422, 1423, 1424, 1425,
     1426, 1427, 1428, 1429, 1430, 1432, 1433, 1434, 1435, 1436,
     1437, 1438, 1440, 1441, 1442, 1443, 1444, 1438, 1438, 1445,
     1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1478, 1484, 1485,

     1486, 1487, 1478, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
     1495, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
     1506, 1508, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1533, 1534, 1537, 1538, 1539, 1540,
     1541, 1542, 1544, 1545, 1546, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
     1563, 1565, 1566, 1568, 1569, 1571, 1572, 1573, 1574, 1576,
     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1587,
     1588, 1592, 1593, 1594, 1595, 1596, 1598, 1599, 1600, 1601,

     1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
     1612, 1614, 1615, 1616, 1617, 1619, 1620, 1621, 1622, 1623,
     1625, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
     1636, 1637, 1640, 1640, 1640, 1640, 1641, 1641, 1641, 1641,
     1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643, 1644, 1644,
      667, 1644, 1645, 1645, 1645, 1646,  666, 1646,  665,  664,
      663,  662,  659,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  646,  645,  644,  643,  641,  638,  637,  635,
      634,  633,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  615,  614,  613,  612,  610,  609,

      608,  607,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  591,  590,  589,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  568,  567,  563,  562,  559,  558,  555,
      554,  551,  550,  549,  548,  547,  545,  544,  543,  542,
      541,  539,  538,  537,  536,  535,  534,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,

      486,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  469,  468,  466,  463,  462,  460,  459,
      457,  456,  454,  453,  452,  451,  448,  447,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  420,  419,
      418,  416,  414,  413,  410,  409,  407,  406,  405,  403,
      402,  400,  399,  397,  396,  395,  394,  393,  392,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  369,
      368,  367,  365,  364,  362,  361,  358,  357,  356,  355,

      354,  353,  352,  350,  349,  347,  346,  345,  344,  343,
      342,  341,  340,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  323,  322,  321,  320,
      318,  317,  316,  315,  313,  312,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  300,  299,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  248,  247,  246,  245,  244,  243,  242,

      241,  239,  238,  237,  236,  235,  234,  233,  231,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  203,  202,  201,  200,  199,  198,
      197,  196,  194,  193,  192,  191,  190,  189,  188,  183,
      180,  179,  178,  177,  176,  175,  174,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  154,  150,  149,  148,  147,  146,  145,  144,  143,
      142,  141,  140,  139,  137,  135,  133,  132,  131,  130,
      129,  128,  127,  126,  125,  124,  122,  121,  120,  119,

      118,  117,  116,  115,  114,  113,  112,  111,  110,  109,
      108,  106,  105,  104,  103,  102,  101,  100,   99,   98,
       97,   96,   95,   90,   85,   78,   77,   75,   73,   70,
       68,   63,   62,   61,   60,   58,   56,   54,   49,   46,
       44,   42,   41,   39,   37,   33,   31,   30,   29,   21,
       17,   16,    9,    6,    5, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,

     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1639, 1639
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "kittingClassesView.hh" // for classes referenced in kittingYACC.hh
#include "kittingYACC.hh"    // for tokens, yylval, etc.

#define ECHO_IT 0
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1640 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2156 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBEREND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBERSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSSTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return BASEEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return BASESTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONEND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETEREND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETERSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMEEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMESTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSSTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMEEND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMESTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTOREND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return EXTERNALSHAPEEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return EXTERNALSHAPESTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDSTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return GRASPPOSEEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return GRASPPOSESTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return HASTOPEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return HASTOPSTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTSTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return HELDOBJECTEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return HELDOBJECTSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return INTERNALSHAPEEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return INTERNALSHAPESTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMEEND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMESTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNSTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMEEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMESTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSSTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return KITEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return KITSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINEREND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINERSTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITSTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHSTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTSTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTSTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return MODELFILENAMEEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return MODELFILENAMESTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return MODELNAMEEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return MODELNAMESTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return MODELTYPENAMEEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return MODELTYPENAMESTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTSTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLEEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLESTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYSTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSEEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSESTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMEEND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMESTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return PARTEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYSTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONSTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONEND;}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONSTART;}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBEREND;}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBERSTART;}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ECH; return SHAPEEND;}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ECH; return SHAPESTART;}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMEEND;}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMESTART;}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ECH; return SKUEND;}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ECH; return SKUSTART;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTEND;}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTSTART;}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ECH; return TRAYEND;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ECH; return TRAYSTART;}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITEND;}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITSTART;}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTEND;}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTSTART;}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHEND;}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHSTART;}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLEEND;}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLESTART;}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMEEND;}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMESTART;}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ ECH; return BOXYSHAPETYPEDECL; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORCHANGINGSTATIONTYPEDECL; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORHOLDERTYPEDECL; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORTYPEDECL; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ ECH; return EXTERNALSHAPETYPEDECL; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ ECH; return GRIPPEREFFECTORTYPEDECL; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ ECH; return INTERNALSHAPETYPEDECL; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ ECH; return KITTRAYTYPEDECL; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ ECH; return KITTYPEDECL; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ ECH; return KITTINGWORKSTATIONTYPEDECL; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHEMPTYKITTRAYSTYPEDECL; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHKITSTYPEDECL; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ ECH; return LARGECONTAINERTYPEDECL; }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ ECH; return MECHANICALCOMPONENTTYPEDECL; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{ ECH; return PARTTYPEDECL; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSBINTYPEDECL; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYTYPEDECL; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYWITHPARTSTYPEDECL; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONINTYPEDECL; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONONTYPEDECL; }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONTYPEDECL; }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{ ECH; return POSEONLYLOCATIONTYPEDECL; }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONINTYPEDECL; }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONONTYPEDECL; }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONTYPEDECL; }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{ ECH; return ROBOTTYPEDECL; }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORMULTICUPTYPEDECL; }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORSINGLECUPTYPEDECL; }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORTYPEDECL; }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
{ ECH; return WORKTABLETYPEDECL; }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{ECH; return XMLNSTARGET;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 178:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yytext[first] != '"'; first++);
                            first++;
                            for (n = first; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 181:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 182:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1640 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1640 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1639);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

