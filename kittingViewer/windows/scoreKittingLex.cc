
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yysc_create_buffer
#define yy_delete_buffer yysc_delete_buffer
#define yy_flex_debug yysc_flex_debug
#define yy_init_buffer yysc_init_buffer
#define yy_flush_buffer yysc_flush_buffer
#define yy_load_buffer_state yysc_load_buffer_state
#define yy_switch_to_buffer yysc_switch_to_buffer
#define yyin yyscin
#define yyleng yyscleng
#define yylex yysclex
#define yylineno yysclineno
#define yyout yyscout
#define yyrestart yyscrestart
#define yytext yysctext
#define yywrap yyscwrap
#define yyalloc yyscalloc
#define yyrealloc yyscrealloc
#define yyfree yyscfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyscrestart(yyscin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyscleng;

extern FILE *yyscin, *yyscout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yysctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yysctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyscrestart()), so that the user can continue scanning by
	 * just pointing yyscin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yysctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyscleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyscwrap()'s to do buffer switches
 * instead of setting up a fresh yyscin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyscrestart (FILE *input_file  );
void yysc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yysc_create_buffer (FILE *file,int size  );
void yysc_delete_buffer (YY_BUFFER_STATE b  );
void yysc_flush_buffer (YY_BUFFER_STATE b  );
void yyscpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyscpop_buffer_state (void );

static void yyscensure_buffer_stack (void );
static void yysc_load_buffer_state (void );
static void yysc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yysc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yysc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yysc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yysc_scan_bytes (yyconst char *bytes,int len  );

void *yyscalloc (yy_size_t  );
void *yyscrealloc (void *,yy_size_t  );
void yyscfree (void *  );

#define yy_new_buffer yysc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyscensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yysc_create_buffer(yyscin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyscensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yysc_create_buffer(yyscin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyscin = (FILE *) 0, *yyscout = (FILE *) 0;

typedef int yy_state_type;

extern int yysclineno;

int yysclineno = 1;

extern char *yysctext;
#define yytext_ptr yysctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yysctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyscleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 46
#define YY_END_OF_BUFFER 47
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[411] =
    {   0,
       44,   44,    0,    0,    5,    5,    6,    6,   47,   45,
       44,   44,   45,   45,   42,   45,   45,   45,    2,    3,
        2,    5,   46,    6,    7,    6,    8,   44,    0,    0,
        0,    0,    0,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    5,
        6,    7,    6,   43,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   29,    0,    0,
        0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   36,    0,    0,   19,    0,
        0,    0,    0,    0,    0,    0,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   18,    0,    0,    0,
        0,    0,    0,    0,   21,   23,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,

        0,   26,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,   20,    0,   22,    0,    0,
        0,    0,   25,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   35,    0,    0,    0,    0,    0,
       24,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   34,    0,   33,    0,    0,    0,    0,    0,   17,
        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
       16,    0,   40,    0,   12,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   41,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,    1,   20,    1,   21,   22,
        1,    1,    1,    1,   23,   24,   25,    1,    1,    1,
        1,    1,   26,    1,    1,   27,    1,   28,    1,    1,
        1,    1,    1,    1,    1,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,    1,    1,   38,   39,   40,
       41,   42,    1,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[50] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[418] =
    {   0,
        0,   48,    2,    4,  573,  572,   10,   17,  586,  589,
       20,   24,    0,   96,  589,  568,  544,    1,  589,  589,
      576,    0,  589,    0,   27,   34,  589,   40,  577,  575,
       51,  573,  143,  589,  546,  537,  540,  532,  538,  543,
       24,  529,  543,   25,  589,  540,  532,  532,  551,    0,
        0,   44,   68,  589,  560,    0,  533,  524,  527,  519,
      525,  530,   30,  516,  530,   31,  514,  518,  512,  536,
      519,  512,  510,  512,  517,  511,  511,  515,  505,   39,
      531,  589,  589,  500,  504,  498,  522,  505,  498,  496,
      498,  503,  497,  497,  501,  487,  492,  485,  497,  492,

      484,  493,  492,  486,  477,  487,  476,  488,   55,  475,
      474,  472,  477,  470,  482,  477,  469,  478,  477,  471,
      462,  472,  461,  478,  475,  474,  470,  456,  467,  456,
      589,  465,  464,  460,  459,  457,  460,   71,  461,  464,
      461,  460,  456,  442,  453,  442,   74,  451,  450,  446,
      445,  451,  439,  438,  440,  450,  452,  448,  429,  450,
      426,  589,  430,  426,   80,  419,   86,  431,  437,  425,
      424,  426,  436,  438,   91,  107,  589,  416,  437,  413,
      117,  419,  424,  424,  409,  408,  415,  414,  406,  403,
      589,  413,  403,  402,  146,  399,  411,  405,  410,  410,

      395,  394,  401,  134,  589,  400,  392,  389,  151,  154,
      589,  388,  412,  399,  394,  384,  384,  396,  407,  386,
      160,  388,  387,  380,  383,  375,  399,  386,  381,  371,
      371,  383,  394,  373,  175,  589,  379,  362,  589,  363,
      375,  363,  374,  365,  374,  179,  589,  363,  194,  363,
      373,  368,  351,  197,  352,  364,  352,  363,  354,  363,
      589,  360,  359,  357,  353,  589,  350,  343,  347,  200,
      163,  372,  361,  203,  351,  209,  589,  350,  348,  344,
      215,  341,  334,  347,  589,  589,  337,  337,  338,  219,
      225,  338,  350,  331,  234,  589,  340,  237,  240,  330,

      243,  589,  330,  331,  321,  331,  336,  323,  246,  589,
      318,  325,  329,  308,  261,  589,  264,  589,  299,  303,
      290,  285,  589,  289,  288,  282,  281,  296,  279,  267,
      276,  274,  276,  279,  589,  268,  263,  262,  252,  270,
      589,  256,  273,  245,  241,  269,  245,  243,  238,  217,
      289,  589,  219,  589,  249,  216,  214,  213,  292,  589,
      243,  199,  193,  295,  298,  589,  182,  219,  301,  316,
      589,  176,  589,  319,  589,  167,  201,  160,  181,  185,
      144,  141,  137,  161,  149,  150,  149,  124,  123,  103,
      105,  105,   99,   92,   86,   85,   77,   86,  106,   75,

       67,   62,   59,   74,   46,   49,    1,    2,  589,  589,
      335,  339,  343,  347,  351,  355,  358
    } ;

static yyconst flex_int16_t yy_def[418] =
    {   0,
      411,  411,  412,  412,  413,  413,  414,  414,  410,  410,
      410,  410,  415,  410,  410,  410,  410,  410,  410,  410,
      410,  416,  410,  417,  410,  417,  410,  410,  410,  415,
       14,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  416,
      417,  410,  417,  410,  410,   33,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,    0,
      410,  410,  410,  410,  410,  410,  410
    } ;

static yyconst flex_int16_t yy_nxt[639] =
    {   0,
      410,   11,   12,   11,   20,   13,   20,  409,   21,  410,
       21,   25,   26,   26,   14,  410,   15,   16,   25,   26,
       26,   28,   28,   28,   27,   28,   28,   28,   52,   52,
       52,   27,   17,  408,   29,   52,   53,   53,   29,   47,
      109,   28,   28,   28,   48,   52,   52,   52,   18,   11,
       12,   11,   73,   13,   29,  410,  109,   77,   90,  410,
       74,   78,   14,   94,   15,   16,   91,   95,  410,   52,
       53,   53,  165,  165,  165,  176,  176,  176,  110,  407,
       17,  165,  165,  165,  166,  406,  167,  195,  195,  195,
      177,  196,  204,  204,  204,  167,   18,   31,   31,   31,

       32,  137,  405,  404,   33,  403,  402,  205,  176,  176,
      176,  401,  400,   34,  399,  398,  206,  397,  210,  210,
      210,  396,  395,  177,  394,   35,   36,   37,  393,  392,
      391,  390,   38,  211,  389,  204,  204,  204,   39,   40,
       41,   42,   43,   44,   56,   56,   56,  195,  195,  195,
      205,  196,  235,  235,  235,  210,  210,  210,  388,  387,
      386,  246,  246,  246,  291,  291,  291,  236,  292,  385,
      211,  384,   57,   58,   59,  247,  235,  235,  235,   60,
      246,  246,  246,  383,  382,   61,   62,   63,   64,   65,
       66,  236,  381,  380,  247,  270,  270,  270,  276,  276,

      276,  270,  270,  270,  295,  295,  295,  379,  378,  271,
      276,  276,  276,  277,  377,  271,  301,  301,  301,  296,
      309,  309,  309,  376,  373,  277,  291,  291,  291,  372,
      292,  302,  369,  368,  310,  295,  295,  295,  315,  315,
      315,  317,  317,  317,  301,  301,  301,  309,  309,  309,
      296,  367,  364,  316,  363,  362,  318,  361,  360,  302,
      359,  310,  315,  315,  315,  317,  317,  317,  340,  340,
      340,  340,  340,  340,  351,  351,  351,  316,  358,  357,
      318,  356,  355,  341,  354,  353,  341,  350,  349,  352,
      351,  351,  351,  365,  365,  365,  370,  370,  370,  365,

      365,  365,  374,  374,  374,  352,  348,  347,  366,  346,
      345,  371,  344,  343,  366,  342,  375,  370,  370,  370,
      374,  374,  374,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  371,  330,  375,   10,   10,   10,   10,   19,
       19,   19,   19,   22,   22,   22,   22,   24,   24,   24,
       24,   30,   30,  329,   30,   50,   50,   50,   51,  328,
       51,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      314,  313,  312,  311,  308,  307,  306,  305,  304,  303,
      300,  299,  298,  297,  294,  293,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  275,

      274,  273,  272,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  209,  208,  207,
      203,  202,  201,  200,  199,  198,  197,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179,  178,  175,  174,  173,  172,  171,  170,
      169,  168,  164,  163,  162,  161,  160,  159,  158,  157,

      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  136,
      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  113,  112,  111,  108,  107,  106,  105,  104,
      103,  102,  101,  100,   99,   98,   97,   96,   93,   92,
       89,   88,   87,   86,   85,   84,   83,   82,   81,   80,
       79,   76,   75,   72,   71,   70,   69,   68,   67,   55,
       54,   32,   49,   46,   45,  410,   23,   23,    9,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410
    } ;

static yyconst flex_int16_t yy_chk[639] =
    {   0,
        0,    1,    1,    1,    3,    1,    4,  408,    3,    0,
        4,    7,    7,    7,    1,    0,    1,    1,    8,    8,
        8,   11,   11,   11,    7,   12,   12,   12,   25,   25,
       25,    8,    1,  407,   11,   26,   26,   26,   12,   18,
       80,   28,   28,   28,   18,   52,   52,   52,    1,    2,
        2,    2,   41,    2,   28,   31,  109,   44,   63,   31,
       41,   44,    2,   66,    2,    2,   63,   66,   31,   53,
       53,   53,  138,  138,  138,  147,  147,  147,   80,  406,
        2,  165,  165,  165,  138,  405,  138,  167,  167,  167,
      147,  167,  175,  175,  175,  165,    2,   14,   14,   14,

       14,  109,  404,  403,   14,  402,  401,  175,  176,  176,
      176,  400,  399,   14,  398,  397,  175,  396,  181,  181,
      181,  395,  394,  176,  393,   14,   14,   14,  392,  391,
      390,  389,   14,  181,  388,  204,  204,  204,   14,   14,
       14,   14,   14,   14,   33,   33,   33,  195,  195,  195,
      204,  195,  209,  209,  209,  210,  210,  210,  387,  386,
      385,  221,  221,  221,  271,  271,  271,  209,  271,  384,
      210,  383,   33,   33,   33,  221,  235,  235,  235,   33,
      246,  246,  246,  382,  381,   33,   33,   33,   33,   33,
       33,  235,  380,  379,  246,  249,  249,  249,  254,  254,

      254,  270,  270,  270,  274,  274,  274,  378,  377,  249,
      276,  276,  276,  254,  376,  270,  281,  281,  281,  274,
      290,  290,  290,  372,  368,  276,  291,  291,  291,  367,
      291,  281,  363,  362,  290,  295,  295,  295,  298,  298,
      298,  299,  299,  299,  301,  301,  301,  309,  309,  309,
      295,  361,  358,  298,  357,  356,  299,  355,  353,  301,
      350,  309,  315,  315,  315,  317,  317,  317,  330,  330,
      330,  340,  340,  340,  343,  343,  343,  315,  349,  348,
      317,  347,  346,  330,  345,  344,  340,  342,  339,  343,
      351,  351,  351,  359,  359,  359,  364,  364,  364,  365,

      365,  365,  369,  369,  369,  351,  338,  337,  359,  336,
      334,  364,  333,  332,  365,  331,  369,  370,  370,  370,
      374,  374,  374,  329,  328,  327,  326,  325,  324,  322,
      321,  320,  370,  319,  374,  411,  411,  411,  411,  412,
      412,  412,  412,  413,  413,  413,  413,  414,  414,  414,
      414,  415,  415,  314,  415,  416,  416,  416,  417,  313,
      417,  312,  311,  308,  307,  306,  305,  304,  303,  300,
      297,  294,  293,  292,  289,  288,  287,  284,  283,  282,
      280,  279,  278,  275,  273,  272,  269,  268,  267,  265,
      264,  263,  262,  260,  259,  258,  257,  256,  255,  253,

      252,  251,  250,  248,  245,  244,  243,  242,  241,  240,
      238,  237,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  208,  207,  206,  203,  202,  201,
      200,  199,  198,  197,  196,  194,  193,  192,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  180,  179,  178,
      174,  173,  172,  171,  170,  169,  168,  166,  164,  163,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  150,  149,  148,  146,  145,  144,  143,  142,  141,
      140,  139,  137,  136,  135,  134,  133,  132,  130,  129,

      128,  127,  126,  125,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  114,  113,  112,  111,  110,  108,
      107,  106,  105,  104,  103,  102,  101,  100,   99,   98,
       97,   96,   95,   94,   93,   92,   91,   90,   89,   88,
       87,   86,   85,   84,   81,   79,   78,   77,   76,   75,
       74,   73,   72,   71,   70,   69,   68,   67,   65,   64,
       62,   61,   60,   59,   58,   57,   55,   49,   48,   47,
       46,   43,   42,   40,   39,   38,   37,   36,   35,   32,
       30,   29,   21,   17,   16,    9,    6,    5,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yysc_flex_debug;
int yysc_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yysctext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "scoreKittingClasses.hh" // for classes referenced in scoreKittingYACC.hh
#include "scoreKittingYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyscReadData;
extern int yyscReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yysclex_destroy (void );

int yyscget_debug (void );

void yyscset_debug (int debug_flag  );

YY_EXTRA_TYPE yyscget_extra (void );

void yyscset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyscget_in (void );

void yyscset_in  (FILE * in_str  );

FILE *yyscget_out (void );

void yyscset_out  (FILE * out_str  );

int yyscget_leng (void );

char *yyscget_text (void );

int yyscget_lineno (void );

void yyscset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyscwrap (void );
#else
extern int yyscwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yysctext, yyscleng, 1, yyscout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyscin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyscin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyscin))==0 && ferror(yyscin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyscin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yysclex (void);

#define YY_DECL int yysclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yysctext and yyscleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyscReadData)
    {
      BEGIN(DATA);
      yyscReadData = 0;
    }
  else if (yyscReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyscin )
			yyscin = stdin;

		if ( ! yyscout )
			yyscout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyscensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yysc_create_buffer(yyscin,YY_BUF_SIZE );
		}

		yysc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yysctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 411 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 589 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yysclval.sVal = strdup(yysctext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yysclval.sVal = strdup(yysctext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyscReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return BESTVALUEEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return BESTVALUESTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDEXECUTIONEND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return COMMANDEXECUTIONSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return DISTANCEEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return DISTANCESTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return ISADDITIVEEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return ISADDITIVESTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return RIGHTSTUFFEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return RIGHTSTUFFSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return SCOREKITTINGEND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return SCOREKITTINGSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return TAPERSIDEEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return TAPERSIDESTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return TAPEREND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return TAPERSTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return TIMEEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return USELESSCOMMANDSEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return USELESSCOMMANDSSTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return VALUEFUNCTIONEND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return VALUEFUNCTIONSTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHSTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return XMLNSTARGET;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yysctext[first] != '"'; first++);
                            first++;
                            for (n = first; yysctext[n] != '"'; n++);
                            yysctext[n] = 0;
                            yysclval.sVal = strdup(yysctext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 46:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyscin at a new source and called
			 * yysclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyscin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyscwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yysctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yysclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyscrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyscrestart(yyscin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyscrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 411 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 411 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 410);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yysctext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyscrestart(yyscin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyscwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yysctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyscrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyscensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yysc_create_buffer(yyscin,YY_BUF_SIZE );
	}

	yysc_init_buffer(YY_CURRENT_BUFFER,input_file );
	yysc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yysc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyscpop_buffer_state();
	 *		yyscpush_buffer_state(new_buffer);
     */
	yyscensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yysc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyscwrap()) processing, but the only time this flag
	 * is looked at is after yyscwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yysc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyscin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yysc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyscalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yysc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyscalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yysc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yysc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yysc_create_buffer()
 * 
 */
    void yysc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyscfree((void *) b->yy_ch_buf  );

	yyscfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyscrestart() or at EOF.
 */
    static void yysc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yysc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yysc_init_buffer was _probably_
     * called from yyscrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yysc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yysc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyscpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyscensure_buffer_stack();

	/* This block is copied from yysc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yysc_switch_to_buffer. */
	yysc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyscpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yysc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yysc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyscensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyscalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyscensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyscrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyscensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yysc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyscalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yysc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yysc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yysclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yysc_scan_bytes() instead.
 */
YY_BUFFER_STATE yysc_scan_string (yyconst char * yystr )
{
    
	return yysc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yysclex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yysc_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyscalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yysc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yysc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yysc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yysctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yysctext[yyscleng] = (yy_hold_char); \
		(yy_c_buf_p) = yysctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyscleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyscget_lineno  (void)
{
        
    return yysclineno;
}

/** Get the input stream.
 * 
 */
FILE *yyscget_in  (void)
{
        return yyscin;
}

/** Get the output stream.
 * 
 */
FILE *yyscget_out  (void)
{
        return yyscout;
}

/** Get the length of the current token.
 * 
 */
int yyscget_leng  (void)
{
        return yyscleng;
}

/** Get the current token.
 * 
 */

char *yyscget_text  (void)
{
        return yysctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyscset_lineno (int  line_number )
{
    
    yysclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yysc_switch_to_buffer
 */
void yyscset_in (FILE *  in_str )
{
        yyscin = in_str ;
}

void yyscset_out (FILE *  out_str )
{
        yyscout = out_str ;
}

int yyscget_debug  (void)
{
        return yysc_flex_debug;
}

void yyscset_debug (int  bdebug )
{
        yysc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yysclex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyscin = stdin;
    yyscout = stdout;
#else
    yyscin = (FILE *) 0;
    yyscout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yysclex_init()
     */
    return 0;
}

/* yysclex_destroy is for both reentrant and non-reentrant scanners. */
int yysclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yysc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyscpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyscfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yysclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyscalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyscrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyscfree (void * ptr )
{
	free( (char *) ptr );	/* see yyscrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yyscwrap()
{
  return 1;
}

