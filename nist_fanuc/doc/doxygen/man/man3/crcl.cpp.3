.TH "/usr/local/michalos/github/usnistgov/el-robotics-core/nist_fanuc/src/crcl.cpp" 3 "Fri Apr 15 2016" "CRCL FANUC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/usr/local/michalos/github/usnistgov/el-robotics-core/nist_fanuc/src/crcl.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'crcl\&.h'\fP
.br
\fC#include 'Globals\&.h'\fP
.br
\fC#include 'CrclInterface\&.h'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "\fBCrcl\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBROWMAJOR\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBCrcl::GetRPY\fP (\fBRCS::Vector3\fP Xrot, \fBRCS::Vector3\fP Zrot, double &dRoll, double &dPitch, double &dYaw)"
.br
.ti -1c
.RI "PoseType \fBCrcl::NullPose\fP ()"
.br
.ti -1c
.RI "\fBCrcl::VectorType\fP \fBCrcl::VectorZero\fP ()"
.br
.ti -1c
.RI "\fBCrcl::PoseType\fP \fBCrcl::IdentityPose\fP ()"
.br
.ti -1c
.RI "\fBRCS::Vector3\fP \fBCrcl::GetVector3D\fP (\fBCrcl::VectorType\fP &vector)"
.br
.ti -1c
.RI "\fBRCS::Vector3\fP \fBCrcl::GetVector3D\fP (\fBCrcl::PointType\fP &point)"
.br
.ti -1c
.RI "tf::Vector3 \fBCrcl::GetTfVector\fP (\fBCrcl::PointType\fP &point)"
.br
.ti -1c
.RI "tf::Vector3 \fBCrcl::GetTfVector\fP (\fBCrcl::VectorType\fP &vector)"
.br
.ti -1c
.RI "inline::PointType \fBCrcl::GetPoint\fP (\fBRCS::Vector3\fP &point)"
.br
.ti -1c
.RI "inline::VectorType \fBCrcl::GetVector\fP (\fBRCS::Vector3\fP &point)"
.br
.ti -1c
.RI "tf::Matrix3x3 \fBCrcl::GetTfRotMatrix\fP (\fBRCS::Vector3\fP Xrot, \fBRCS::Vector3\fP Zrot)"
.br
.ti -1c
.RI "\fBRCS::Pose\fP \fBCrcl::Convert\fP (\fBCrcl::PoseType\fP &pose, double lengthConversion=1\&.0)"
.br
.RI "\fIConvert converts codesynthesis \fBCrcl\fP Pose into ROS/RCS pose using length conversion \&. Note, no angle conversion - rotation/orientation always in radians\&. \fP"
.ti -1c
.RI "\fBRCS::Pose\fP \fBCrcl::Convert\fP (\fBCrcl::PoseToleranceType\fP tolerance)"
.br
.ti -1c
.RI "bool \fBCrcl::GetPoseToRPY\fP (\fBCrcl::PoseType\fP &pose, double &dRoll, double &dPitch, double &dYaw)"
.br
.RI "\fIGet roll,pitch,yaw orientation from codesynthesis \fBCrcl\fP pose\&. \fP"
.ti -1c
.RI "\fBRCS::Rotation\fP \fBCrcl::Convert\fP (\fBRCS::Vector3\fP Xrot, \fBRCS::Vector3\fP Zrot)"
.br
.RI "\fIConvert converts codesynthesis \fBCrcl\fP rotation (as x,z rotation vectors) into ROS/RCS rotation\&. \fP"
.ti -1c
.RI "\fBCrcl::PoseType\fP \fBCrcl::Convert\fP (\fBRCS::Pose\fP pose)"
.br
.RI "\fIConvert converts ROS/RCS pose into codesynthesis \fBCrcl\fP Pose\&. Note, no angle conversion - rotation/orientation always in radians\&. \fP"
.ti -1c
.RI "std::string \fBCrcl::DumpCrclJoints\fP (\fBCrcl::JointStatusSequence\fP jin)"
.br
.ti -1c
.RI "\fBsensor_msgs::JointState\fP \fBCrcl::Convert\fP (\fBCrcl::JointStatusSequence\fP jointStatusSeq, double angleConversion=1\&.0)"
.br
.RI "\fIConvert converts codesynthesis status actuator joint sequence into ROS JointState\&.(Fills position)\&. \fP"
.ti -1c
.RI "\fBCrcl::JointStatusSequence\fP \fBCrcl::Convert\fP (\fBJointState\fP joints, double _angleConversion)"
.br
.ti -1c
.RI "JointStatusSequence \fBCrcl::Convert\fP (\fBCrcl::ActuatorJointSequence\fP joints, double _angleConversion)"
.br
.ti -1c
.RI "\fBCrcl::PoseType\fP \fBCrcl::PoseHome\fP ()"
.br
.RI "\fICreate codesynthesis \fBCrcl\fP pose that is necessary for all codesynthesis \fBCrcl\fP pose constructors\&. \fP"
.ti -1c
.RI "std::vector< double > \fBCrcl::ConvertToAnglePositionVector\fP (\fBCrcl::ActuatorJointSequence\fP &joints, double dAngleConversion)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpRotationAsCrcl\fP (\fBRCS::Pose\fP rcspose, std::string separator)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpRotationAsCrcl\fP (\fBCrcl::PoseType\fP pose, std::string separator)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpCrclCommand\fP (::CRCLCommandType &crclCommand)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpStatusReply\fP (CrclStatus *wm)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpPosition\fP (\fBCrcl::PoseType\fP pose, std::string separator=',')"
.br
.RI "\fIDump contents of codesynthesis \fBCrcl\fP pose\&. \fP"
.ti -1c
.RI "std::string \fBCrcl::DumpPose\fP (\fBCrcl::PoseType\fP pose, std::string separator)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ROWMAJOR"

.SH "Author"
.PP 
Generated automatically by Doxygen for CRCL FANUC from the source code\&.
