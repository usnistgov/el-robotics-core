.TH "/usr/local/michalos/github/usnistgov/el-robotics-core/nist_fanuc/include/nist_fanuc/crcl.h" 3 "Fri Apr 15 2016" "CRCL FANUC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/usr/local/michalos/github/usnistgov/el-robotics-core/nist_fanuc/include/nist_fanuc/crcl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <math\&.h>\fP
.br
\fC#include 'RCS\&.h'\fP
.br
\fC#include 'DataPrimitives\&.hxx'\fP
.br
\fC#include 'CRCLCommands\&.hxx'\fP
.br
\fC#include 'CRCLStatus\&.hxx'\fP
.br
\fC#include 'CRCLCommandInstance\&.hxx'\fP
.br
\fC#include 'CRCLProgramInstance\&.hxx'\fP
.br
\fC#include 'Globals\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCrcl::GripperStatus\fP"
.br
.RI "\fI\fBGripperStatus\fP dummy class for future gripper information\&. \fP"
.ti -1c
.RI "struct \fBCrcl::JointReport\fP"
.br
.RI "\fI\fBJointReport\fP dummy class for future customization of \fBCrcl\fP status reports\&. \fP"
.ti -1c
.RI "struct \fBCrcl::CrclStatus\fP"
.br
.RI "\fI\fBCrclStatus\fP is a class that encapsulates all the CRCL information\&. All lot of the knowledge is converting ROS oriented \fBRCS\fP data into codesynthesis \fBCrcl\fP representation and vice versa\&. \fBCrclStatus\fP maintains the unit a crcl session uses to transmit robot commands, latest robot status, etc\&. \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "\fBCrcl\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_USE_MATH_DEFINES\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBRCS::Vector3\fP \fBCrcl::Vector3D\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBCrcl::CRCLCmdStatus\fP { \fBCrcl::CRCL_Done\fP = 0, \fBCrcl::CRCL_Error\fP, \fBCrcl::CRCL_Working\fP, \fBCrcl::CRCL_Ready\fP }"
.br
.ti -1c
.RI "enum \fBCrcl::CrclReturn\fP { \fBCrcl::CANON_REJECT\fP = -2, \fBCrcl::CANON_FAILURE\fP = -1, \fBCrcl::CANON_SUCCESS\fP = 0, \fBCrcl::CANON_STATUSREPLY\fP = 1, \fBCrcl::CANON_MOTION\fP = 2, \fBCrcl::CANON_RUNNING\fP, \fBCrcl::CANON_NOT_IMPLEMENTED\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::vector< double > \fBCrcl::ConvertToPositionVector\fP (ActuatorJointSequence &, double dConversion)"
.br
.RI "\fIConvertToPositionVector converts codesynthesis actuator sequence into std vector of position as doubles\&. \fP"
.ti -1c
.RI "JointStatusSequence \fBCrcl::Convert\fP (ActuatorJointSequence jin)"
.br
.RI "\fIConvert converts codesynthesis commanded actuator joint sequence into status actuator joint sequence \&. \fP"
.ti -1c
.RI "\fBsensor_msgs::JointState\fP \fBCrcl::Convert\fP (\fBCrcl::JointStatusSequence\fP jointStatusSeq, double angleConversion=1\&.0)"
.br
.RI "\fIConvert converts codesynthesis status actuator joint sequence into ROS JointState\&.(Fills position)\&. \fP"
.ti -1c
.RI "\fBCrcl::JointStatusSequence\fP \fBCrcl::Convert\fP (\fBJointState\fP joints)"
.br
.RI "\fIConvert converts ROS JointState (primarily position for now) and creates codesynthesis status actuator joint sequence\&. \fP"
.ti -1c
.RI "\fBCrcl::PoseType\fP \fBCrcl::Convert\fP (\fBRCS::Pose\fP pose)"
.br
.RI "\fIConvert converts ROS/RCS pose into codesynthesis \fBCrcl\fP Pose\&. Note, no angle conversion - rotation/orientation always in radians\&. \fP"
.ti -1c
.RI "\fBRCS::Pose\fP \fBCrcl::Convert\fP (\fBCrcl::PoseType\fP &pose, double lengthConversion=1\&.0)"
.br
.RI "\fIConvert converts codesynthesis \fBCrcl\fP Pose into ROS/RCS pose using length conversion \&. Note, no angle conversion - rotation/orientation always in radians\&. \fP"
.ti -1c
.RI "\fBRCS::Rotation\fP \fBCrcl::Convert\fP (\fBRCS::Vector3\fP Xrot, \fBRCS::Vector3\fP Zrot)"
.br
.RI "\fIConvert converts codesynthesis \fBCrcl\fP rotation (as x,z rotation vectors) into ROS/RCS rotation\&. \fP"
.ti -1c
.RI "bool \fBCrcl::GetPoseToRPY\fP (\fBCrcl::PoseType\fP &pose, double &dRoll, double &dPitch, double &dYaw)"
.br
.RI "\fIGet roll,pitch,yaw orientation from codesynthesis \fBCrcl\fP pose\&. \fP"
.ti -1c
.RI "\fBRCS::Pose\fP \fBCrcl::Convert\fP (\fBCrcl::PoseToleranceType\fP tolerance)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpPosition\fP (\fBCrcl::PoseType\fP pose, std::string separator=',')"
.br
.RI "\fIDump contents of codesynthesis \fBCrcl\fP pose\&. \fP"
.ti -1c
.RI "std::string \fBCrcl::DumpRotationAsCrcl\fP (\fBRCS::Pose\fP rcspose, std::string separator)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpRotationAsCrcl\fP (\fBCrcl::PoseType\fP pose, std::string separator)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpPose\fP (\fBCrcl::PoseType\fP pose, std::string separator)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpStatusReply\fP (CrclStatus *wm)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpCrclCommand\fP (::CRCLCommandType &crclCommand)"
.br
.ti -1c
.RI "std::string \fBCrcl::DumpCrclJoints\fP (\fBCrcl::JointStatusSequence\fP jin)"
.br
.ti -1c
.RI "\fBCrcl::PoseType\fP \fBCrcl::PoseHome\fP ()"
.br
.RI "\fICreate codesynthesis \fBCrcl\fP pose that is necessary for all codesynthesis \fBCrcl\fP pose constructors\&. \fP"
.ti -1c
.RI "PoseType \fBCrcl::NullPose\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "typedef::ActuateJointsType::ActuateJoint_sequence \fBCrcl::ActuatorJointSequence\fP"
.br
.ti -1c
.RI "typedef::PoseType \fBCrcl::PoseType\fP"
.br
.ti -1c
.RI "typedef::JointStatusType \fBCrcl::JointStatus\fP"
.br
.ti -1c
.RI "typedef::CommandStateEnumType \fBCrcl::CommandStateEnum\fP"
.br
.ti -1c
.RI "typedef::PointType \fBCrcl::PointType\fP"
.br
.ti -1c
.RI "typedef::VectorType \fBCrcl::VectorType\fP"
.br
.ti -1c
.RI "typedef::JointStatusesType::JointStatus_sequence \fBCrcl::JointStatusSequence\fP"
.br
.ti -1c
.RI "typedef::PoseToleranceType \fBCrcl::PoseToleranceType\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _USE_MATH_DEFINES"

.SH "Author"
.PP 
Generated automatically by Doxygen for CRCL FANUC from the source code\&.
