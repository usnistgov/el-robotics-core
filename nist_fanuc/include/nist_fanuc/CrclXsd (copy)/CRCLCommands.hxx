// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CRCLCOMMANDS_HXX
#define CRCLCOMMANDS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class CRCLCommandType;
class MiddleCommandType;
class ActuateJointsType;
class ActuateJointType;
class CloseToolChangerType;
class ConfigureJointReportsType;
class ConfigureJointReportType;
class DwellType;
class EndCanonType;
class GetStatusType;
class InitCanonType;
class JointDetailsType;
class JointForceTorqueType;
class JointSpeedAccelType;
class MessageType;
class MoveScrewType;
class MoveThroughToType;
class MoveToType;
class OpenToolChangerType;
class ParameterSettingType;
class PoseAndSetType;
class PoseToleranceType;
class RotAccelType;
class RotAccelAbsoluteType;
class RotAccelRelativeType;
class RotSpeedType;
class RotSpeedAbsoluteType;
class RotSpeedRelativeType;
class RunProgramType;
class SetAngleUnitsType;
class SetEndEffectorParametersType;
class SetEndEffectorType;
class SetEndPoseToleranceType;
class SetForceUnitsType;
class SetIntermediatePoseToleranceType;
class SetLengthUnitsType;
class SetMotionCoordinationType;
class SetRobotParametersType;
class SetRotAccelType;
class SetRotSpeedType;
class SetTorqueUnitsType;
class SetTransAccelType;
class SetTransSpeedType;
class StopConditionEnumType;
class StopMotionType;
class TransAccelType;
class TransAccelAbsoluteType;
class TransAccelRelativeType;
class TransSpeedType;
class TransSpeedAbsoluteType;
class TransSpeedRelativeType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "DataPrimitives.hxx"

class CRCLCommandType: public ::DataThingType
{
  public:
  // CommandID
  //
  typedef ::xml_schema::positive_integer CommandID_type;
  typedef ::xsd::cxx::tree::traits< CommandID_type, char > CommandID_traits;

  const CommandID_type&
  CommandID () const;

  CommandID_type&
  CommandID ();

  void
  CommandID (const CommandID_type& x);

  // Constructors.
  //
  CRCLCommandType (const CommandID_type&);

  CRCLCommandType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  CRCLCommandType (const CRCLCommandType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual CRCLCommandType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CRCLCommandType&
  operator= (const CRCLCommandType& x);

  virtual 
  ~CRCLCommandType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< CommandID_type > CommandID_;
};

class MiddleCommandType: public ::CRCLCommandType
{
  public:
  // Constructors.
  //
  MiddleCommandType (const ::CRCLCommandType&);

  MiddleCommandType (const CommandID_type&);

  MiddleCommandType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  MiddleCommandType (const MiddleCommandType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual MiddleCommandType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MiddleCommandType ();
};

class ActuateJointsType: public ::MiddleCommandType
{
  public:
  // ActuateJoint
  //
  typedef ::ActuateJointType ActuateJoint_type;
  typedef ::xsd::cxx::tree::sequence< ActuateJoint_type > ActuateJoint_sequence;
  typedef ActuateJoint_sequence::iterator ActuateJoint_iterator;
  typedef ActuateJoint_sequence::const_iterator ActuateJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< ActuateJoint_type, char > ActuateJoint_traits;

  const ActuateJoint_sequence&
  ActuateJoint () const;

  ActuateJoint_sequence&
  ActuateJoint ();

  void
  ActuateJoint (const ActuateJoint_sequence& s);

  // Constructors.
  //
  ActuateJointsType (const ::MiddleCommandType&);

  ActuateJointsType (const CommandID_type&);

  ActuateJointsType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ActuateJointsType (const ActuateJointsType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ActuateJointsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ActuateJointsType&
  operator= (const ActuateJointsType& x);

  virtual 
  ~ActuateJointsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ActuateJoint_sequence ActuateJoint_;
};

class ActuateJointType: public ::DataThingType
{
  public:
  // JointNumber
  //
  typedef ::xml_schema::positive_integer JointNumber_type;
  typedef ::xsd::cxx::tree::traits< JointNumber_type, char > JointNumber_traits;

  const JointNumber_type&
  JointNumber () const;

  JointNumber_type&
  JointNumber ();

  void
  JointNumber (const JointNumber_type& x);

  // JointPosition
  //
  typedef ::xml_schema::decimal JointPosition_type;
  typedef ::xsd::cxx::tree::traits< JointPosition_type, char, ::xsd::cxx::tree::schema_type::decimal > JointPosition_traits;

  const JointPosition_type&
  JointPosition () const;

  JointPosition_type&
  JointPosition ();

  void
  JointPosition (const JointPosition_type& x);

  // JointDetails
  //
  typedef ::JointDetailsType JointDetails_type;
  typedef ::xsd::cxx::tree::traits< JointDetails_type, char > JointDetails_traits;

  const JointDetails_type&
  JointDetails () const;

  JointDetails_type&
  JointDetails ();

  void
  JointDetails (const JointDetails_type& x);

  void
  JointDetails (::std::auto_ptr< JointDetails_type > p);

  // Constructors.
  //
  ActuateJointType (const JointNumber_type&,
                    const JointPosition_type&,
                    const JointDetails_type&);

  ActuateJointType (const JointNumber_type&,
                    const JointPosition_type&,
                    ::std::auto_ptr< JointDetails_type >);

  ActuateJointType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ActuateJointType (const ActuateJointType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual ActuateJointType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ActuateJointType&
  operator= (const ActuateJointType& x);

  virtual 
  ~ActuateJointType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< JointNumber_type > JointNumber_;
  ::xsd::cxx::tree::one< JointPosition_type > JointPosition_;
  ::xsd::cxx::tree::one< JointDetails_type > JointDetails_;
};

class CloseToolChangerType: public ::MiddleCommandType
{
  public:
  // Constructors.
  //
  CloseToolChangerType (const ::MiddleCommandType&);

  CloseToolChangerType (const CommandID_type&);

  CloseToolChangerType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  CloseToolChangerType (const CloseToolChangerType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual CloseToolChangerType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CloseToolChangerType ();
};

class ConfigureJointReportsType: public ::MiddleCommandType
{
  public:
  // ResetAll
  //
  typedef ::xml_schema::boolean ResetAll_type;
  typedef ::xsd::cxx::tree::traits< ResetAll_type, char > ResetAll_traits;

  const ResetAll_type&
  ResetAll () const;

  ResetAll_type&
  ResetAll ();

  void
  ResetAll (const ResetAll_type& x);

  // ConfigureJointReport
  //
  typedef ::ConfigureJointReportType ConfigureJointReport_type;
  typedef ::xsd::cxx::tree::sequence< ConfigureJointReport_type > ConfigureJointReport_sequence;
  typedef ConfigureJointReport_sequence::iterator ConfigureJointReport_iterator;
  typedef ConfigureJointReport_sequence::const_iterator ConfigureJointReport_const_iterator;
  typedef ::xsd::cxx::tree::traits< ConfigureJointReport_type, char > ConfigureJointReport_traits;

  const ConfigureJointReport_sequence&
  ConfigureJointReport () const;

  ConfigureJointReport_sequence&
  ConfigureJointReport ();

  void
  ConfigureJointReport (const ConfigureJointReport_sequence& s);

  // Constructors.
  //
  ConfigureJointReportsType (const ::MiddleCommandType&,
                             const ResetAll_type&);

  ConfigureJointReportsType (const CommandID_type&,
                             const ResetAll_type&);

  ConfigureJointReportsType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  ConfigureJointReportsType (const ConfigureJointReportsType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual ConfigureJointReportsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ConfigureJointReportsType&
  operator= (const ConfigureJointReportsType& x);

  virtual 
  ~ConfigureJointReportsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ResetAll_type > ResetAll_;
  ConfigureJointReport_sequence ConfigureJointReport_;
};

class ConfigureJointReportType: public ::DataThingType
{
  public:
  // JointNumber
  //
  typedef ::xml_schema::positive_integer JointNumber_type;
  typedef ::xsd::cxx::tree::traits< JointNumber_type, char > JointNumber_traits;

  const JointNumber_type&
  JointNumber () const;

  JointNumber_type&
  JointNumber ();

  void
  JointNumber (const JointNumber_type& x);

  // ReportPosition
  //
  typedef ::xml_schema::boolean ReportPosition_type;
  typedef ::xsd::cxx::tree::traits< ReportPosition_type, char > ReportPosition_traits;

  const ReportPosition_type&
  ReportPosition () const;

  ReportPosition_type&
  ReportPosition ();

  void
  ReportPosition (const ReportPosition_type& x);

  // ReportTorqueOrForce
  //
  typedef ::xml_schema::boolean ReportTorqueOrForce_type;
  typedef ::xsd::cxx::tree::traits< ReportTorqueOrForce_type, char > ReportTorqueOrForce_traits;

  const ReportTorqueOrForce_type&
  ReportTorqueOrForce () const;

  ReportTorqueOrForce_type&
  ReportTorqueOrForce ();

  void
  ReportTorqueOrForce (const ReportTorqueOrForce_type& x);

  // ReportVelocity
  //
  typedef ::xml_schema::boolean ReportVelocity_type;
  typedef ::xsd::cxx::tree::traits< ReportVelocity_type, char > ReportVelocity_traits;

  const ReportVelocity_type&
  ReportVelocity () const;

  ReportVelocity_type&
  ReportVelocity ();

  void
  ReportVelocity (const ReportVelocity_type& x);

  // Constructors.
  //
  ConfigureJointReportType (const JointNumber_type&,
                            const ReportPosition_type&,
                            const ReportTorqueOrForce_type&,
                            const ReportVelocity_type&);

  ConfigureJointReportType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  ConfigureJointReportType (const ConfigureJointReportType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual ConfigureJointReportType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ConfigureJointReportType&
  operator= (const ConfigureJointReportType& x);

  virtual 
  ~ConfigureJointReportType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< JointNumber_type > JointNumber_;
  ::xsd::cxx::tree::one< ReportPosition_type > ReportPosition_;
  ::xsd::cxx::tree::one< ReportTorqueOrForce_type > ReportTorqueOrForce_;
  ::xsd::cxx::tree::one< ReportVelocity_type > ReportVelocity_;
};

class DwellType: public ::MiddleCommandType
{
  public:
  // DwellTime
  //
  typedef ::xml_schema::decimal DwellTime_type;
  typedef ::xsd::cxx::tree::traits< DwellTime_type, char, ::xsd::cxx::tree::schema_type::decimal > DwellTime_traits;

  const DwellTime_type&
  DwellTime () const;

  DwellTime_type&
  DwellTime ();

  void
  DwellTime (const DwellTime_type& x);

  // Constructors.
  //
  DwellType (const ::MiddleCommandType&,
             const DwellTime_type&);

  DwellType (const CommandID_type&,
             const DwellTime_type&);

  DwellType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  DwellType (const DwellType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual DwellType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  DwellType&
  operator= (const DwellType& x);

  virtual 
  ~DwellType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< DwellTime_type > DwellTime_;
};

class EndCanonType: public ::CRCLCommandType
{
  public:
  // Constructors.
  //
  EndCanonType (const ::CRCLCommandType&);

  EndCanonType (const CommandID_type&);

  EndCanonType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  EndCanonType (const EndCanonType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual EndCanonType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~EndCanonType ();
};

class GetStatusType: public ::MiddleCommandType
{
  public:
  // Constructors.
  //
  GetStatusType (const ::MiddleCommandType&);

  GetStatusType (const CommandID_type&);

  GetStatusType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  GetStatusType (const GetStatusType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual GetStatusType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GetStatusType ();
};

class InitCanonType: public ::CRCLCommandType
{
  public:
  // Constructors.
  //
  InitCanonType (const ::CRCLCommandType&);

  InitCanonType (const CommandID_type&);

  InitCanonType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  InitCanonType (const InitCanonType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual InitCanonType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~InitCanonType ();
};

class JointDetailsType: public ::DataThingType
{
  public:
  // Constructors.
  //
  JointDetailsType ();

  JointDetailsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  JointDetailsType (const JointDetailsType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual JointDetailsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~JointDetailsType ();
};

class JointForceTorqueType: public ::JointDetailsType
{
  public:
  // Setting
  //
  typedef ::xml_schema::decimal Setting_type;
  typedef ::xsd::cxx::tree::optional< Setting_type > Setting_optional;
  typedef ::xsd::cxx::tree::traits< Setting_type, char, ::xsd::cxx::tree::schema_type::decimal > Setting_traits;

  const Setting_optional&
  Setting () const;

  Setting_optional&
  Setting ();

  void
  Setting (const Setting_type& x);

  void
  Setting (const Setting_optional& x);

  // ChangeRate
  //
  typedef ::xml_schema::decimal ChangeRate_type;
  typedef ::xsd::cxx::tree::optional< ChangeRate_type > ChangeRate_optional;
  typedef ::xsd::cxx::tree::traits< ChangeRate_type, char, ::xsd::cxx::tree::schema_type::decimal > ChangeRate_traits;

  const ChangeRate_optional&
  ChangeRate () const;

  ChangeRate_optional&
  ChangeRate ();

  void
  ChangeRate (const ChangeRate_type& x);

  void
  ChangeRate (const ChangeRate_optional& x);

  // Constructors.
  //
  JointForceTorqueType ();

  JointForceTorqueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  JointForceTorqueType (const JointForceTorqueType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual JointForceTorqueType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  JointForceTorqueType&
  operator= (const JointForceTorqueType& x);

  virtual 
  ~JointForceTorqueType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Setting_optional Setting_;
  ChangeRate_optional ChangeRate_;
};

class JointSpeedAccelType: public ::JointDetailsType
{
  public:
  // JointSpeed
  //
  typedef ::xml_schema::decimal JointSpeed_type;
  typedef ::xsd::cxx::tree::optional< JointSpeed_type > JointSpeed_optional;
  typedef ::xsd::cxx::tree::traits< JointSpeed_type, char, ::xsd::cxx::tree::schema_type::decimal > JointSpeed_traits;

  const JointSpeed_optional&
  JointSpeed () const;

  JointSpeed_optional&
  JointSpeed ();

  void
  JointSpeed (const JointSpeed_type& x);

  void
  JointSpeed (const JointSpeed_optional& x);

  // JointAccel
  //
  typedef ::xml_schema::decimal JointAccel_type;
  typedef ::xsd::cxx::tree::optional< JointAccel_type > JointAccel_optional;
  typedef ::xsd::cxx::tree::traits< JointAccel_type, char, ::xsd::cxx::tree::schema_type::decimal > JointAccel_traits;

  const JointAccel_optional&
  JointAccel () const;

  JointAccel_optional&
  JointAccel ();

  void
  JointAccel (const JointAccel_type& x);

  void
  JointAccel (const JointAccel_optional& x);

  // Constructors.
  //
  JointSpeedAccelType ();

  JointSpeedAccelType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  JointSpeedAccelType (const JointSpeedAccelType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual JointSpeedAccelType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  JointSpeedAccelType&
  operator= (const JointSpeedAccelType& x);

  virtual 
  ~JointSpeedAccelType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  JointSpeed_optional JointSpeed_;
  JointAccel_optional JointAccel_;
};

class MessageType: public ::MiddleCommandType
{
  public:
  // Message
  //
  typedef ::xml_schema::string Message_type;
  typedef ::xsd::cxx::tree::traits< Message_type, char > Message_traits;

  const Message_type&
  Message () const;

  Message_type&
  Message ();

  void
  Message (const Message_type& x);

  void
  Message (::std::auto_ptr< Message_type > p);

  // Constructors.
  //
  MessageType (const ::MiddleCommandType&,
               const Message_type&);

  MessageType (const ::MiddleCommandType&,
               ::std::auto_ptr< Message_type >);

  MessageType (const CommandID_type&,
               const Message_type&);

  MessageType (const CommandID_type&,
               ::std::auto_ptr< Message_type >);

  MessageType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MessageType (const MessageType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual MessageType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MessageType&
  operator= (const MessageType& x);

  virtual 
  ~MessageType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Message_type > Message_;
};

class MoveScrewType: public ::MiddleCommandType
{
  public:
  // StartPosition
  //
  typedef ::PoseType StartPosition_type;
  typedef ::xsd::cxx::tree::optional< StartPosition_type > StartPosition_optional;
  typedef ::xsd::cxx::tree::traits< StartPosition_type, char > StartPosition_traits;

  const StartPosition_optional&
  StartPosition () const;

  StartPosition_optional&
  StartPosition ();

  void
  StartPosition (const StartPosition_type& x);

  void
  StartPosition (const StartPosition_optional& x);

  void
  StartPosition (::std::auto_ptr< StartPosition_type > p);

  // AxisPoint
  //
  typedef ::PointType AxisPoint_type;
  typedef ::xsd::cxx::tree::optional< AxisPoint_type > AxisPoint_optional;
  typedef ::xsd::cxx::tree::traits< AxisPoint_type, char > AxisPoint_traits;

  const AxisPoint_optional&
  AxisPoint () const;

  AxisPoint_optional&
  AxisPoint ();

  void
  AxisPoint (const AxisPoint_type& x);

  void
  AxisPoint (const AxisPoint_optional& x);

  void
  AxisPoint (::std::auto_ptr< AxisPoint_type > p);

  // AxialDistanceFree
  //
  typedef ::xml_schema::decimal AxialDistanceFree_type;
  typedef ::xsd::cxx::tree::optional< AxialDistanceFree_type > AxialDistanceFree_optional;
  typedef ::xsd::cxx::tree::traits< AxialDistanceFree_type, char, ::xsd::cxx::tree::schema_type::decimal > AxialDistanceFree_traits;

  const AxialDistanceFree_optional&
  AxialDistanceFree () const;

  AxialDistanceFree_optional&
  AxialDistanceFree ();

  void
  AxialDistanceFree (const AxialDistanceFree_type& x);

  void
  AxialDistanceFree (const AxialDistanceFree_optional& x);

  // AxialDistanceScrew
  //
  typedef ::xml_schema::decimal AxialDistanceScrew_type;
  typedef ::xsd::cxx::tree::traits< AxialDistanceScrew_type, char, ::xsd::cxx::tree::schema_type::decimal > AxialDistanceScrew_traits;

  const AxialDistanceScrew_type&
  AxialDistanceScrew () const;

  AxialDistanceScrew_type&
  AxialDistanceScrew ();

  void
  AxialDistanceScrew (const AxialDistanceScrew_type& x);

  // Turn
  //
  typedef ::xml_schema::decimal Turn_type;
  typedef ::xsd::cxx::tree::traits< Turn_type, char, ::xsd::cxx::tree::schema_type::decimal > Turn_traits;

  const Turn_type&
  Turn () const;

  Turn_type&
  Turn ();

  void
  Turn (const Turn_type& x);

  // Constructors.
  //
  MoveScrewType (const ::MiddleCommandType&,
                 const AxialDistanceScrew_type&,
                 const Turn_type&);

  MoveScrewType (const CommandID_type&,
                 const AxialDistanceScrew_type&,
                 const Turn_type&);

  MoveScrewType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  MoveScrewType (const MoveScrewType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual MoveScrewType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MoveScrewType&
  operator= (const MoveScrewType& x);

  virtual 
  ~MoveScrewType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  StartPosition_optional StartPosition_;
  AxisPoint_optional AxisPoint_;
  AxialDistanceFree_optional AxialDistanceFree_;
  ::xsd::cxx::tree::one< AxialDistanceScrew_type > AxialDistanceScrew_;
  ::xsd::cxx::tree::one< Turn_type > Turn_;
};

class MoveThroughToType: public ::MiddleCommandType
{
  public:
  // MoveStraight
  //
  typedef ::xml_schema::boolean MoveStraight_type;
  typedef ::xsd::cxx::tree::traits< MoveStraight_type, char > MoveStraight_traits;

  const MoveStraight_type&
  MoveStraight () const;

  MoveStraight_type&
  MoveStraight ();

  void
  MoveStraight (const MoveStraight_type& x);

  // Waypoint
  //
  typedef ::PoseType Waypoint_type;
  typedef ::xsd::cxx::tree::sequence< Waypoint_type > Waypoint_sequence;
  typedef Waypoint_sequence::iterator Waypoint_iterator;
  typedef Waypoint_sequence::const_iterator Waypoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Waypoint_type, char > Waypoint_traits;

  const Waypoint_sequence&
  Waypoint () const;

  Waypoint_sequence&
  Waypoint ();

  void
  Waypoint (const Waypoint_sequence& s);

  // NumPositions
  //
  typedef ::xml_schema::positive_integer NumPositions_type;
  typedef ::xsd::cxx::tree::traits< NumPositions_type, char > NumPositions_traits;

  const NumPositions_type&
  NumPositions () const;

  NumPositions_type&
  NumPositions ();

  void
  NumPositions (const NumPositions_type& x);

  // Constructors.
  //
  MoveThroughToType (const ::MiddleCommandType&,
                     const MoveStraight_type&,
                     const NumPositions_type&);

  MoveThroughToType (const CommandID_type&,
                     const MoveStraight_type&,
                     const NumPositions_type&);

  MoveThroughToType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  MoveThroughToType (const MoveThroughToType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual MoveThroughToType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MoveThroughToType&
  operator= (const MoveThroughToType& x);

  virtual 
  ~MoveThroughToType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< MoveStraight_type > MoveStraight_;
  Waypoint_sequence Waypoint_;
  ::xsd::cxx::tree::one< NumPositions_type > NumPositions_;
};

class MoveToType: public ::MiddleCommandType
{
  public:
  // MoveStraight
  //
  typedef ::xml_schema::boolean MoveStraight_type;
  typedef ::xsd::cxx::tree::traits< MoveStraight_type, char > MoveStraight_traits;

  const MoveStraight_type&
  MoveStraight () const;

  MoveStraight_type&
  MoveStraight ();

  void
  MoveStraight (const MoveStraight_type& x);

  // EndPosition
  //
  typedef ::PoseType EndPosition_type;
  typedef ::xsd::cxx::tree::traits< EndPosition_type, char > EndPosition_traits;

  const EndPosition_type&
  EndPosition () const;

  EndPosition_type&
  EndPosition ();

  void
  EndPosition (const EndPosition_type& x);

  void
  EndPosition (::std::auto_ptr< EndPosition_type > p);

  // Constructors.
  //
  MoveToType (const ::MiddleCommandType&,
              const MoveStraight_type&,
              const EndPosition_type&);

  MoveToType (const ::MiddleCommandType&,
              const MoveStraight_type&,
              ::std::auto_ptr< EndPosition_type >);

  MoveToType (const CommandID_type&,
              const MoveStraight_type&,
              const EndPosition_type&);

  MoveToType (const CommandID_type&,
              const MoveStraight_type&,
              ::std::auto_ptr< EndPosition_type >);

  MoveToType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MoveToType (const MoveToType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MoveToType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MoveToType&
  operator= (const MoveToType& x);

  virtual 
  ~MoveToType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< MoveStraight_type > MoveStraight_;
  ::xsd::cxx::tree::one< EndPosition_type > EndPosition_;
};

class OpenToolChangerType: public ::MiddleCommandType
{
  public:
  // Constructors.
  //
  OpenToolChangerType (const ::MiddleCommandType&);

  OpenToolChangerType (const CommandID_type&);

  OpenToolChangerType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  OpenToolChangerType (const OpenToolChangerType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual OpenToolChangerType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OpenToolChangerType ();
};

class ParameterSettingType: public ::DataThingType
{
  public:
  // ParameterName
  //
  typedef ::xml_schema::token ParameterName_type;
  typedef ::xsd::cxx::tree::traits< ParameterName_type, char > ParameterName_traits;

  const ParameterName_type&
  ParameterName () const;

  ParameterName_type&
  ParameterName ();

  void
  ParameterName (const ParameterName_type& x);

  void
  ParameterName (::std::auto_ptr< ParameterName_type > p);

  // ParameterValue
  //
  typedef ::xml_schema::token ParameterValue_type;
  typedef ::xsd::cxx::tree::traits< ParameterValue_type, char > ParameterValue_traits;

  const ParameterValue_type&
  ParameterValue () const;

  ParameterValue_type&
  ParameterValue ();

  void
  ParameterValue (const ParameterValue_type& x);

  void
  ParameterValue (::std::auto_ptr< ParameterValue_type > p);

  // Constructors.
  //
  ParameterSettingType (const ParameterName_type&,
                        const ParameterValue_type&);

  ParameterSettingType (::std::auto_ptr< ParameterName_type >,
                        ::std::auto_ptr< ParameterValue_type >);

  ParameterSettingType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ParameterSettingType (const ParameterSettingType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ParameterSettingType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ParameterSettingType&
  operator= (const ParameterSettingType& x);

  virtual 
  ~ParameterSettingType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ParameterName_type > ParameterName_;
  ::xsd::cxx::tree::one< ParameterValue_type > ParameterValue_;
};

class PoseAndSetType: public ::PoseType
{
  public:
  // Coordinated
  //
  typedef ::xml_schema::boolean Coordinated_type;
  typedef ::xsd::cxx::tree::traits< Coordinated_type, char > Coordinated_traits;

  const Coordinated_type&
  Coordinated () const;

  Coordinated_type&
  Coordinated ();

  void
  Coordinated (const Coordinated_type& x);

  // TransSpeed
  //
  typedef ::TransSpeedType TransSpeed_type;
  typedef ::xsd::cxx::tree::optional< TransSpeed_type > TransSpeed_optional;
  typedef ::xsd::cxx::tree::traits< TransSpeed_type, char > TransSpeed_traits;

  const TransSpeed_optional&
  TransSpeed () const;

  TransSpeed_optional&
  TransSpeed ();

  void
  TransSpeed (const TransSpeed_type& x);

  void
  TransSpeed (const TransSpeed_optional& x);

  void
  TransSpeed (::std::auto_ptr< TransSpeed_type > p);

  // RotSpeed
  //
  typedef ::RotSpeedType RotSpeed_type;
  typedef ::xsd::cxx::tree::optional< RotSpeed_type > RotSpeed_optional;
  typedef ::xsd::cxx::tree::traits< RotSpeed_type, char > RotSpeed_traits;

  const RotSpeed_optional&
  RotSpeed () const;

  RotSpeed_optional&
  RotSpeed ();

  void
  RotSpeed (const RotSpeed_type& x);

  void
  RotSpeed (const RotSpeed_optional& x);

  void
  RotSpeed (::std::auto_ptr< RotSpeed_type > p);

  // TransAccel
  //
  typedef ::TransAccelType TransAccel_type;
  typedef ::xsd::cxx::tree::optional< TransAccel_type > TransAccel_optional;
  typedef ::xsd::cxx::tree::traits< TransAccel_type, char > TransAccel_traits;

  const TransAccel_optional&
  TransAccel () const;

  TransAccel_optional&
  TransAccel ();

  void
  TransAccel (const TransAccel_type& x);

  void
  TransAccel (const TransAccel_optional& x);

  void
  TransAccel (::std::auto_ptr< TransAccel_type > p);

  // RotAccel
  //
  typedef ::RotAccelType RotAccel_type;
  typedef ::xsd::cxx::tree::optional< RotAccel_type > RotAccel_optional;
  typedef ::xsd::cxx::tree::traits< RotAccel_type, char > RotAccel_traits;

  const RotAccel_optional&
  RotAccel () const;

  RotAccel_optional&
  RotAccel ();

  void
  RotAccel (const RotAccel_type& x);

  void
  RotAccel (const RotAccel_optional& x);

  void
  RotAccel (::std::auto_ptr< RotAccel_type > p);

  // Tolerance
  //
  typedef ::PoseToleranceType Tolerance_type;
  typedef ::xsd::cxx::tree::optional< Tolerance_type > Tolerance_optional;
  typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

  const Tolerance_optional&
  Tolerance () const;

  Tolerance_optional&
  Tolerance ();

  void
  Tolerance (const Tolerance_type& x);

  void
  Tolerance (const Tolerance_optional& x);

  void
  Tolerance (::std::auto_ptr< Tolerance_type > p);

  // Constructors.
  //
  PoseAndSetType (const ::PoseType&,
                  const Coordinated_type&);

  PoseAndSetType (const Point_type&,
                  const XAxis_type&,
                  const ZAxis_type&,
                  const Coordinated_type&);

  PoseAndSetType (::std::auto_ptr< Point_type >,
                  ::std::auto_ptr< XAxis_type >,
                  ::std::auto_ptr< ZAxis_type >,
                  const Coordinated_type&);

  PoseAndSetType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PoseAndSetType (const PoseAndSetType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual PoseAndSetType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PoseAndSetType&
  operator= (const PoseAndSetType& x);

  virtual 
  ~PoseAndSetType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Coordinated_type > Coordinated_;
  TransSpeed_optional TransSpeed_;
  RotSpeed_optional RotSpeed_;
  TransAccel_optional TransAccel_;
  RotAccel_optional RotAccel_;
  Tolerance_optional Tolerance_;
};

class PoseToleranceType: public ::DataThingType
{
  public:
  // XPointTolerance
  //
  typedef ::xml_schema::decimal XPointTolerance_type;
  typedef ::xsd::cxx::tree::optional< XPointTolerance_type > XPointTolerance_optional;
  typedef ::xsd::cxx::tree::traits< XPointTolerance_type, char, ::xsd::cxx::tree::schema_type::decimal > XPointTolerance_traits;

  const XPointTolerance_optional&
  XPointTolerance () const;

  XPointTolerance_optional&
  XPointTolerance ();

  void
  XPointTolerance (const XPointTolerance_type& x);

  void
  XPointTolerance (const XPointTolerance_optional& x);

  // YPointTolerance
  //
  typedef ::xml_schema::decimal YPointTolerance_type;
  typedef ::xsd::cxx::tree::optional< YPointTolerance_type > YPointTolerance_optional;
  typedef ::xsd::cxx::tree::traits< YPointTolerance_type, char, ::xsd::cxx::tree::schema_type::decimal > YPointTolerance_traits;

  const YPointTolerance_optional&
  YPointTolerance () const;

  YPointTolerance_optional&
  YPointTolerance ();

  void
  YPointTolerance (const YPointTolerance_type& x);

  void
  YPointTolerance (const YPointTolerance_optional& x);

  // ZPointTolerance
  //
  typedef ::xml_schema::decimal ZPointTolerance_type;
  typedef ::xsd::cxx::tree::optional< ZPointTolerance_type > ZPointTolerance_optional;
  typedef ::xsd::cxx::tree::traits< ZPointTolerance_type, char, ::xsd::cxx::tree::schema_type::decimal > ZPointTolerance_traits;

  const ZPointTolerance_optional&
  ZPointTolerance () const;

  ZPointTolerance_optional&
  ZPointTolerance ();

  void
  ZPointTolerance (const ZPointTolerance_type& x);

  void
  ZPointTolerance (const ZPointTolerance_optional& x);

  // XAxisTolerance
  //
  typedef ::xml_schema::decimal XAxisTolerance_type;
  typedef ::xsd::cxx::tree::optional< XAxisTolerance_type > XAxisTolerance_optional;
  typedef ::xsd::cxx::tree::traits< XAxisTolerance_type, char, ::xsd::cxx::tree::schema_type::decimal > XAxisTolerance_traits;

  const XAxisTolerance_optional&
  XAxisTolerance () const;

  XAxisTolerance_optional&
  XAxisTolerance ();

  void
  XAxisTolerance (const XAxisTolerance_type& x);

  void
  XAxisTolerance (const XAxisTolerance_optional& x);

  // ZAxisTolerance
  //
  typedef ::xml_schema::decimal ZAxisTolerance_type;
  typedef ::xsd::cxx::tree::optional< ZAxisTolerance_type > ZAxisTolerance_optional;
  typedef ::xsd::cxx::tree::traits< ZAxisTolerance_type, char, ::xsd::cxx::tree::schema_type::decimal > ZAxisTolerance_traits;

  const ZAxisTolerance_optional&
  ZAxisTolerance () const;

  ZAxisTolerance_optional&
  ZAxisTolerance ();

  void
  ZAxisTolerance (const ZAxisTolerance_type& x);

  void
  ZAxisTolerance (const ZAxisTolerance_optional& x);

  // Constructors.
  //
  PoseToleranceType ();

  PoseToleranceType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  PoseToleranceType (const PoseToleranceType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual PoseToleranceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PoseToleranceType&
  operator= (const PoseToleranceType& x);

  virtual 
  ~PoseToleranceType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  XPointTolerance_optional XPointTolerance_;
  YPointTolerance_optional YPointTolerance_;
  ZPointTolerance_optional ZPointTolerance_;
  XAxisTolerance_optional XAxisTolerance_;
  ZAxisTolerance_optional ZAxisTolerance_;
};

class RotAccelType: public ::DataThingType
{
  public:
  // Constructors.
  //
  RotAccelType ();

  RotAccelType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  RotAccelType (const RotAccelType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual RotAccelType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RotAccelType ();
};

class RotAccelAbsoluteType: public ::RotAccelType
{
  public:
  // Setting
  //
  typedef ::xml_schema::decimal Setting_type;
  typedef ::xsd::cxx::tree::traits< Setting_type, char, ::xsd::cxx::tree::schema_type::decimal > Setting_traits;

  const Setting_type&
  Setting () const;

  Setting_type&
  Setting ();

  void
  Setting (const Setting_type& x);

  // Constructors.
  //
  RotAccelAbsoluteType (const Setting_type&);

  RotAccelAbsoluteType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  RotAccelAbsoluteType (const RotAccelAbsoluteType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual RotAccelAbsoluteType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RotAccelAbsoluteType&
  operator= (const RotAccelAbsoluteType& x);

  virtual 
  ~RotAccelAbsoluteType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Setting_type > Setting_;
};

class RotAccelRelativeType: public ::RotAccelType
{
  public:
  // Fraction
  //
  typedef ::FractionType Fraction_type;
  typedef ::xsd::cxx::tree::traits< Fraction_type, char > Fraction_traits;

  const Fraction_type&
  Fraction () const;

  Fraction_type&
  Fraction ();

  void
  Fraction (const Fraction_type& x);

  void
  Fraction (::std::auto_ptr< Fraction_type > p);

  // Constructors.
  //
  RotAccelRelativeType (const Fraction_type&);

  RotAccelRelativeType (::std::auto_ptr< Fraction_type >);

  RotAccelRelativeType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  RotAccelRelativeType (const RotAccelRelativeType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual RotAccelRelativeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RotAccelRelativeType&
  operator= (const RotAccelRelativeType& x);

  virtual 
  ~RotAccelRelativeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Fraction_type > Fraction_;
};

class RotSpeedType: public ::DataThingType
{
  public:
  // Constructors.
  //
  RotSpeedType ();

  RotSpeedType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  RotSpeedType (const RotSpeedType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual RotSpeedType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RotSpeedType ();
};

class RotSpeedAbsoluteType: public ::RotSpeedType
{
  public:
  // Setting
  //
  typedef ::xml_schema::decimal Setting_type;
  typedef ::xsd::cxx::tree::traits< Setting_type, char, ::xsd::cxx::tree::schema_type::decimal > Setting_traits;

  const Setting_type&
  Setting () const;

  Setting_type&
  Setting ();

  void
  Setting (const Setting_type& x);

  // Constructors.
  //
  RotSpeedAbsoluteType (const Setting_type&);

  RotSpeedAbsoluteType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  RotSpeedAbsoluteType (const RotSpeedAbsoluteType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual RotSpeedAbsoluteType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RotSpeedAbsoluteType&
  operator= (const RotSpeedAbsoluteType& x);

  virtual 
  ~RotSpeedAbsoluteType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Setting_type > Setting_;
};

class RotSpeedRelativeType: public ::RotSpeedType
{
  public:
  // Fraction
  //
  typedef ::FractionType Fraction_type;
  typedef ::xsd::cxx::tree::traits< Fraction_type, char > Fraction_traits;

  const Fraction_type&
  Fraction () const;

  Fraction_type&
  Fraction ();

  void
  Fraction (const Fraction_type& x);

  void
  Fraction (::std::auto_ptr< Fraction_type > p);

  // Constructors.
  //
  RotSpeedRelativeType (const Fraction_type&);

  RotSpeedRelativeType (::std::auto_ptr< Fraction_type >);

  RotSpeedRelativeType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  RotSpeedRelativeType (const RotSpeedRelativeType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual RotSpeedRelativeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RotSpeedRelativeType&
  operator= (const RotSpeedRelativeType& x);

  virtual 
  ~RotSpeedRelativeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Fraction_type > Fraction_;
};

class RunProgramType: public ::MiddleCommandType
{
  public:
  // ProgramText
  //
  typedef ::xml_schema::string ProgramText_type;
  typedef ::xsd::cxx::tree::traits< ProgramText_type, char > ProgramText_traits;

  const ProgramText_type&
  ProgramText () const;

  ProgramText_type&
  ProgramText ();

  void
  ProgramText (const ProgramText_type& x);

  void
  ProgramText (::std::auto_ptr< ProgramText_type > p);

  // Constructors.
  //
  RunProgramType (const ::MiddleCommandType&,
                  const ProgramText_type&);

  RunProgramType (const ::MiddleCommandType&,
                  ::std::auto_ptr< ProgramText_type >);

  RunProgramType (const CommandID_type&,
                  const ProgramText_type&);

  RunProgramType (const CommandID_type&,
                  ::std::auto_ptr< ProgramText_type >);

  RunProgramType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  RunProgramType (const RunProgramType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual RunProgramType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RunProgramType&
  operator= (const RunProgramType& x);

  virtual 
  ~RunProgramType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ProgramText_type > ProgramText_;
};

class SetAngleUnitsType: public ::MiddleCommandType
{
  public:
  // UnitName
  //
  typedef ::AngleUnitEnumType UnitName_type;
  typedef ::xsd::cxx::tree::traits< UnitName_type, char > UnitName_traits;

  const UnitName_type&
  UnitName () const;

  UnitName_type&
  UnitName ();

  void
  UnitName (const UnitName_type& x);

  void
  UnitName (::std::auto_ptr< UnitName_type > p);

  // Constructors.
  //
  SetAngleUnitsType (const ::MiddleCommandType&,
                     const UnitName_type&);

  SetAngleUnitsType (const ::MiddleCommandType&,
                     ::std::auto_ptr< UnitName_type >);

  SetAngleUnitsType (const CommandID_type&,
                     const UnitName_type&);

  SetAngleUnitsType (const CommandID_type&,
                     ::std::auto_ptr< UnitName_type >);

  SetAngleUnitsType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  SetAngleUnitsType (const SetAngleUnitsType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual SetAngleUnitsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetAngleUnitsType&
  operator= (const SetAngleUnitsType& x);

  virtual 
  ~SetAngleUnitsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< UnitName_type > UnitName_;
};

class SetEndEffectorParametersType: public ::MiddleCommandType
{
  public:
  // ParameterSetting
  //
  typedef ::ParameterSettingType ParameterSetting_type;
  typedef ::xsd::cxx::tree::sequence< ParameterSetting_type > ParameterSetting_sequence;
  typedef ParameterSetting_sequence::iterator ParameterSetting_iterator;
  typedef ParameterSetting_sequence::const_iterator ParameterSetting_const_iterator;
  typedef ::xsd::cxx::tree::traits< ParameterSetting_type, char > ParameterSetting_traits;

  const ParameterSetting_sequence&
  ParameterSetting () const;

  ParameterSetting_sequence&
  ParameterSetting ();

  void
  ParameterSetting (const ParameterSetting_sequence& s);

  // Constructors.
  //
  SetEndEffectorParametersType (const ::MiddleCommandType&);

  SetEndEffectorParametersType (const CommandID_type&);

  SetEndEffectorParametersType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  SetEndEffectorParametersType (const SetEndEffectorParametersType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual SetEndEffectorParametersType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetEndEffectorParametersType&
  operator= (const SetEndEffectorParametersType& x);

  virtual 
  ~SetEndEffectorParametersType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ParameterSetting_sequence ParameterSetting_;
};

class SetEndEffectorType: public ::MiddleCommandType
{
  public:
  // Setting
  //
  typedef ::FractionType Setting_type;
  typedef ::xsd::cxx::tree::traits< Setting_type, char > Setting_traits;

  const Setting_type&
  Setting () const;

  Setting_type&
  Setting ();

  void
  Setting (const Setting_type& x);

  void
  Setting (::std::auto_ptr< Setting_type > p);

  // Constructors.
  //
  SetEndEffectorType (const ::MiddleCommandType&,
                      const Setting_type&);

  SetEndEffectorType (const ::MiddleCommandType&,
                      ::std::auto_ptr< Setting_type >);

  SetEndEffectorType (const CommandID_type&,
                      const Setting_type&);

  SetEndEffectorType (const CommandID_type&,
                      ::std::auto_ptr< Setting_type >);

  SetEndEffectorType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  SetEndEffectorType (const SetEndEffectorType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual SetEndEffectorType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetEndEffectorType&
  operator= (const SetEndEffectorType& x);

  virtual 
  ~SetEndEffectorType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Setting_type > Setting_;
};

class SetEndPoseToleranceType: public ::MiddleCommandType
{
  public:
  // Tolerance
  //
  typedef ::PoseToleranceType Tolerance_type;
  typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

  const Tolerance_type&
  Tolerance () const;

  Tolerance_type&
  Tolerance ();

  void
  Tolerance (const Tolerance_type& x);

  void
  Tolerance (::std::auto_ptr< Tolerance_type > p);

  // Constructors.
  //
  SetEndPoseToleranceType (const ::MiddleCommandType&,
                           const Tolerance_type&);

  SetEndPoseToleranceType (const ::MiddleCommandType&,
                           ::std::auto_ptr< Tolerance_type >);

  SetEndPoseToleranceType (const CommandID_type&,
                           const Tolerance_type&);

  SetEndPoseToleranceType (const CommandID_type&,
                           ::std::auto_ptr< Tolerance_type >);

  SetEndPoseToleranceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  SetEndPoseToleranceType (const SetEndPoseToleranceType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual SetEndPoseToleranceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetEndPoseToleranceType&
  operator= (const SetEndPoseToleranceType& x);

  virtual 
  ~SetEndPoseToleranceType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Tolerance_type > Tolerance_;
};

class SetForceUnitsType: public ::MiddleCommandType
{
  public:
  // UnitName
  //
  typedef ::ForceUnitEnumType UnitName_type;
  typedef ::xsd::cxx::tree::traits< UnitName_type, char > UnitName_traits;

  const UnitName_type&
  UnitName () const;

  UnitName_type&
  UnitName ();

  void
  UnitName (const UnitName_type& x);

  void
  UnitName (::std::auto_ptr< UnitName_type > p);

  // Constructors.
  //
  SetForceUnitsType (const ::MiddleCommandType&,
                     const UnitName_type&);

  SetForceUnitsType (const ::MiddleCommandType&,
                     ::std::auto_ptr< UnitName_type >);

  SetForceUnitsType (const CommandID_type&,
                     const UnitName_type&);

  SetForceUnitsType (const CommandID_type&,
                     ::std::auto_ptr< UnitName_type >);

  SetForceUnitsType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  SetForceUnitsType (const SetForceUnitsType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual SetForceUnitsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetForceUnitsType&
  operator= (const SetForceUnitsType& x);

  virtual 
  ~SetForceUnitsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< UnitName_type > UnitName_;
};

class SetIntermediatePoseToleranceType: public ::MiddleCommandType
{
  public:
  // Tolerance
  //
  typedef ::PoseToleranceType Tolerance_type;
  typedef ::xsd::cxx::tree::traits< Tolerance_type, char > Tolerance_traits;

  const Tolerance_type&
  Tolerance () const;

  Tolerance_type&
  Tolerance ();

  void
  Tolerance (const Tolerance_type& x);

  void
  Tolerance (::std::auto_ptr< Tolerance_type > p);

  // Constructors.
  //
  SetIntermediatePoseToleranceType (const ::MiddleCommandType&,
                                    const Tolerance_type&);

  SetIntermediatePoseToleranceType (const ::MiddleCommandType&,
                                    ::std::auto_ptr< Tolerance_type >);

  SetIntermediatePoseToleranceType (const CommandID_type&,
                                    const Tolerance_type&);

  SetIntermediatePoseToleranceType (const CommandID_type&,
                                    ::std::auto_ptr< Tolerance_type >);

  SetIntermediatePoseToleranceType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  SetIntermediatePoseToleranceType (const SetIntermediatePoseToleranceType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual SetIntermediatePoseToleranceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetIntermediatePoseToleranceType&
  operator= (const SetIntermediatePoseToleranceType& x);

  virtual 
  ~SetIntermediatePoseToleranceType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Tolerance_type > Tolerance_;
};

class SetLengthUnitsType: public ::MiddleCommandType
{
  public:
  // UnitName
  //
  typedef ::LengthUnitEnumType UnitName_type;
  typedef ::xsd::cxx::tree::traits< UnitName_type, char > UnitName_traits;

  const UnitName_type&
  UnitName () const;

  UnitName_type&
  UnitName ();

  void
  UnitName (const UnitName_type& x);

  void
  UnitName (::std::auto_ptr< UnitName_type > p);

  // Constructors.
  //
  SetLengthUnitsType (const ::MiddleCommandType&,
                      const UnitName_type&);

  SetLengthUnitsType (const ::MiddleCommandType&,
                      ::std::auto_ptr< UnitName_type >);

  SetLengthUnitsType (const CommandID_type&,
                      const UnitName_type&);

  SetLengthUnitsType (const CommandID_type&,
                      ::std::auto_ptr< UnitName_type >);

  SetLengthUnitsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  SetLengthUnitsType (const SetLengthUnitsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual SetLengthUnitsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetLengthUnitsType&
  operator= (const SetLengthUnitsType& x);

  virtual 
  ~SetLengthUnitsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< UnitName_type > UnitName_;
};

class SetMotionCoordinationType: public ::MiddleCommandType
{
  public:
  // Coordinated
  //
  typedef ::xml_schema::boolean Coordinated_type;
  typedef ::xsd::cxx::tree::traits< Coordinated_type, char > Coordinated_traits;

  const Coordinated_type&
  Coordinated () const;

  Coordinated_type&
  Coordinated ();

  void
  Coordinated (const Coordinated_type& x);

  // Constructors.
  //
  SetMotionCoordinationType (const ::MiddleCommandType&,
                             const Coordinated_type&);

  SetMotionCoordinationType (const CommandID_type&,
                             const Coordinated_type&);

  SetMotionCoordinationType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  SetMotionCoordinationType (const SetMotionCoordinationType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual SetMotionCoordinationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetMotionCoordinationType&
  operator= (const SetMotionCoordinationType& x);

  virtual 
  ~SetMotionCoordinationType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Coordinated_type > Coordinated_;
};

class SetRobotParametersType: public ::MiddleCommandType
{
  public:
  // ParameterSetting
  //
  typedef ::ParameterSettingType ParameterSetting_type;
  typedef ::xsd::cxx::tree::sequence< ParameterSetting_type > ParameterSetting_sequence;
  typedef ParameterSetting_sequence::iterator ParameterSetting_iterator;
  typedef ParameterSetting_sequence::const_iterator ParameterSetting_const_iterator;
  typedef ::xsd::cxx::tree::traits< ParameterSetting_type, char > ParameterSetting_traits;

  const ParameterSetting_sequence&
  ParameterSetting () const;

  ParameterSetting_sequence&
  ParameterSetting ();

  void
  ParameterSetting (const ParameterSetting_sequence& s);

  // Constructors.
  //
  SetRobotParametersType (const ::MiddleCommandType&);

  SetRobotParametersType (const CommandID_type&);

  SetRobotParametersType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  SetRobotParametersType (const SetRobotParametersType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual SetRobotParametersType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetRobotParametersType&
  operator= (const SetRobotParametersType& x);

  virtual 
  ~SetRobotParametersType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ParameterSetting_sequence ParameterSetting_;
};

class SetRotAccelType: public ::MiddleCommandType
{
  public:
  // RotAccel
  //
  typedef ::RotAccelType RotAccel_type;
  typedef ::xsd::cxx::tree::traits< RotAccel_type, char > RotAccel_traits;

  const RotAccel_type&
  RotAccel () const;

  RotAccel_type&
  RotAccel ();

  void
  RotAccel (const RotAccel_type& x);

  void
  RotAccel (::std::auto_ptr< RotAccel_type > p);

  // Constructors.
  //
  SetRotAccelType (const ::MiddleCommandType&,
                   const RotAccel_type&);

  SetRotAccelType (const ::MiddleCommandType&,
                   ::std::auto_ptr< RotAccel_type >);

  SetRotAccelType (const CommandID_type&,
                   const RotAccel_type&);

  SetRotAccelType (const CommandID_type&,
                   ::std::auto_ptr< RotAccel_type >);

  SetRotAccelType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  SetRotAccelType (const SetRotAccelType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual SetRotAccelType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetRotAccelType&
  operator= (const SetRotAccelType& x);

  virtual 
  ~SetRotAccelType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< RotAccel_type > RotAccel_;
};

class SetRotSpeedType: public ::MiddleCommandType
{
  public:
  // RotSpeed
  //
  typedef ::RotSpeedType RotSpeed_type;
  typedef ::xsd::cxx::tree::traits< RotSpeed_type, char > RotSpeed_traits;

  const RotSpeed_type&
  RotSpeed () const;

  RotSpeed_type&
  RotSpeed ();

  void
  RotSpeed (const RotSpeed_type& x);

  void
  RotSpeed (::std::auto_ptr< RotSpeed_type > p);

  // Constructors.
  //
  SetRotSpeedType (const ::MiddleCommandType&,
                   const RotSpeed_type&);

  SetRotSpeedType (const ::MiddleCommandType&,
                   ::std::auto_ptr< RotSpeed_type >);

  SetRotSpeedType (const CommandID_type&,
                   const RotSpeed_type&);

  SetRotSpeedType (const CommandID_type&,
                   ::std::auto_ptr< RotSpeed_type >);

  SetRotSpeedType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  SetRotSpeedType (const SetRotSpeedType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual SetRotSpeedType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetRotSpeedType&
  operator= (const SetRotSpeedType& x);

  virtual 
  ~SetRotSpeedType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< RotSpeed_type > RotSpeed_;
};

class SetTorqueUnitsType: public ::MiddleCommandType
{
  public:
  // UnitName
  //
  typedef ::TorqueUnitEnumType UnitName_type;
  typedef ::xsd::cxx::tree::traits< UnitName_type, char > UnitName_traits;

  const UnitName_type&
  UnitName () const;

  UnitName_type&
  UnitName ();

  void
  UnitName (const UnitName_type& x);

  void
  UnitName (::std::auto_ptr< UnitName_type > p);

  // Constructors.
  //
  SetTorqueUnitsType (const ::MiddleCommandType&,
                      const UnitName_type&);

  SetTorqueUnitsType (const ::MiddleCommandType&,
                      ::std::auto_ptr< UnitName_type >);

  SetTorqueUnitsType (const CommandID_type&,
                      const UnitName_type&);

  SetTorqueUnitsType (const CommandID_type&,
                      ::std::auto_ptr< UnitName_type >);

  SetTorqueUnitsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  SetTorqueUnitsType (const SetTorqueUnitsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual SetTorqueUnitsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetTorqueUnitsType&
  operator= (const SetTorqueUnitsType& x);

  virtual 
  ~SetTorqueUnitsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< UnitName_type > UnitName_;
};

class SetTransAccelType: public ::MiddleCommandType
{
  public:
  // TransAccel
  //
  typedef ::TransAccelType TransAccel_type;
  typedef ::xsd::cxx::tree::traits< TransAccel_type, char > TransAccel_traits;

  const TransAccel_type&
  TransAccel () const;

  TransAccel_type&
  TransAccel ();

  void
  TransAccel (const TransAccel_type& x);

  void
  TransAccel (::std::auto_ptr< TransAccel_type > p);

  // Constructors.
  //
  SetTransAccelType (const ::MiddleCommandType&,
                     const TransAccel_type&);

  SetTransAccelType (const ::MiddleCommandType&,
                     ::std::auto_ptr< TransAccel_type >);

  SetTransAccelType (const CommandID_type&,
                     const TransAccel_type&);

  SetTransAccelType (const CommandID_type&,
                     ::std::auto_ptr< TransAccel_type >);

  SetTransAccelType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  SetTransAccelType (const SetTransAccelType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual SetTransAccelType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetTransAccelType&
  operator= (const SetTransAccelType& x);

  virtual 
  ~SetTransAccelType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< TransAccel_type > TransAccel_;
};

class SetTransSpeedType: public ::MiddleCommandType
{
  public:
  // TransSpeed
  //
  typedef ::TransSpeedType TransSpeed_type;
  typedef ::xsd::cxx::tree::traits< TransSpeed_type, char > TransSpeed_traits;

  const TransSpeed_type&
  TransSpeed () const;

  TransSpeed_type&
  TransSpeed ();

  void
  TransSpeed (const TransSpeed_type& x);

  void
  TransSpeed (::std::auto_ptr< TransSpeed_type > p);

  // Constructors.
  //
  SetTransSpeedType (const ::MiddleCommandType&,
                     const TransSpeed_type&);

  SetTransSpeedType (const ::MiddleCommandType&,
                     ::std::auto_ptr< TransSpeed_type >);

  SetTransSpeedType (const CommandID_type&,
                     const TransSpeed_type&);

  SetTransSpeedType (const CommandID_type&,
                     ::std::auto_ptr< TransSpeed_type >);

  SetTransSpeedType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  SetTransSpeedType (const SetTransSpeedType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual SetTransSpeedType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SetTransSpeedType&
  operator= (const SetTransSpeedType& x);

  virtual 
  ~SetTransSpeedType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< TransSpeed_type > TransSpeed_;
};

class StopConditionEnumType: public ::xml_schema::token
{
  public:
  enum value
  {
    Immediate,
    Fast,
    Normal
  };

  StopConditionEnumType (value v);

  StopConditionEnumType (const char* v);

  StopConditionEnumType (const ::std::string& v);

  StopConditionEnumType (const ::xml_schema::token& v);

  StopConditionEnumType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  StopConditionEnumType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  StopConditionEnumType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  StopConditionEnumType (const StopConditionEnumType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual StopConditionEnumType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  StopConditionEnumType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_StopConditionEnumType_convert ();
  }

  protected:
  value
  _xsd_StopConditionEnumType_convert () const;

  public:
  static const char* const _xsd_StopConditionEnumType_literals_[3];
  static const value _xsd_StopConditionEnumType_indexes_[3];
};

class StopMotionType: public ::MiddleCommandType
{
  public:
  // StopCondition
  //
  typedef ::StopConditionEnumType StopCondition_type;
  typedef ::xsd::cxx::tree::traits< StopCondition_type, char > StopCondition_traits;

  const StopCondition_type&
  StopCondition () const;

  StopCondition_type&
  StopCondition ();

  void
  StopCondition (const StopCondition_type& x);

  void
  StopCondition (::std::auto_ptr< StopCondition_type > p);

  // Constructors.
  //
  StopMotionType (const ::MiddleCommandType&,
                  const StopCondition_type&);

  StopMotionType (const ::MiddleCommandType&,
                  ::std::auto_ptr< StopCondition_type >);

  StopMotionType (const CommandID_type&,
                  const StopCondition_type&);

  StopMotionType (const CommandID_type&,
                  ::std::auto_ptr< StopCondition_type >);

  StopMotionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  StopMotionType (const StopMotionType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual StopMotionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  StopMotionType&
  operator= (const StopMotionType& x);

  virtual 
  ~StopMotionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< StopCondition_type > StopCondition_;
};

class TransAccelType: public ::DataThingType
{
  public:
  // Constructors.
  //
  TransAccelType ();

  TransAccelType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TransAccelType (const TransAccelType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual TransAccelType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TransAccelType ();
};

class TransAccelAbsoluteType: public ::TransAccelType
{
  public:
  // Setting
  //
  typedef ::xml_schema::decimal Setting_type;
  typedef ::xsd::cxx::tree::traits< Setting_type, char, ::xsd::cxx::tree::schema_type::decimal > Setting_traits;

  const Setting_type&
  Setting () const;

  Setting_type&
  Setting ();

  void
  Setting (const Setting_type& x);

  // Constructors.
  //
  TransAccelAbsoluteType (const Setting_type&);

  TransAccelAbsoluteType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  TransAccelAbsoluteType (const TransAccelAbsoluteType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual TransAccelAbsoluteType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  TransAccelAbsoluteType&
  operator= (const TransAccelAbsoluteType& x);

  virtual 
  ~TransAccelAbsoluteType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Setting_type > Setting_;
};

class TransAccelRelativeType: public ::TransAccelType
{
  public:
  // Fraction
  //
  typedef ::FractionType Fraction_type;
  typedef ::xsd::cxx::tree::traits< Fraction_type, char > Fraction_traits;

  const Fraction_type&
  Fraction () const;

  Fraction_type&
  Fraction ();

  void
  Fraction (const Fraction_type& x);

  void
  Fraction (::std::auto_ptr< Fraction_type > p);

  // Constructors.
  //
  TransAccelRelativeType (const Fraction_type&);

  TransAccelRelativeType (::std::auto_ptr< Fraction_type >);

  TransAccelRelativeType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  TransAccelRelativeType (const TransAccelRelativeType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual TransAccelRelativeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  TransAccelRelativeType&
  operator= (const TransAccelRelativeType& x);

  virtual 
  ~TransAccelRelativeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Fraction_type > Fraction_;
};

class TransSpeedType: public ::DataThingType
{
  public:
  // Constructors.
  //
  TransSpeedType ();

  TransSpeedType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TransSpeedType (const TransSpeedType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual TransSpeedType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TransSpeedType ();
};

class TransSpeedAbsoluteType: public ::TransSpeedType
{
  public:
  // Setting
  //
  typedef ::xml_schema::decimal Setting_type;
  typedef ::xsd::cxx::tree::traits< Setting_type, char, ::xsd::cxx::tree::schema_type::decimal > Setting_traits;

  const Setting_type&
  Setting () const;

  Setting_type&
  Setting ();

  void
  Setting (const Setting_type& x);

  // Constructors.
  //
  TransSpeedAbsoluteType (const Setting_type&);

  TransSpeedAbsoluteType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  TransSpeedAbsoluteType (const TransSpeedAbsoluteType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual TransSpeedAbsoluteType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  TransSpeedAbsoluteType&
  operator= (const TransSpeedAbsoluteType& x);

  virtual 
  ~TransSpeedAbsoluteType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Setting_type > Setting_;
};

class TransSpeedRelativeType: public ::TransSpeedType
{
  public:
  // Fraction
  //
  typedef ::FractionType Fraction_type;
  typedef ::xsd::cxx::tree::traits< Fraction_type, char > Fraction_traits;

  const Fraction_type&
  Fraction () const;

  Fraction_type&
  Fraction ();

  void
  Fraction (const Fraction_type& x);

  void
  Fraction (::std::auto_ptr< Fraction_type > p);

  // Constructors.
  //
  TransSpeedRelativeType (const Fraction_type&);

  TransSpeedRelativeType (::std::auto_ptr< Fraction_type >);

  TransSpeedRelativeType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  TransSpeedRelativeType (const TransSpeedRelativeType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual TransSpeedRelativeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  TransSpeedRelativeType&
  operator= (const TransSpeedRelativeType& x);

  virtual 
  ~TransSpeedRelativeType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Fraction_type > Fraction_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const CRCLCommandType&);

void
operator<< (::xercesc::DOMElement&, const MiddleCommandType&);

void
operator<< (::xercesc::DOMElement&, const ActuateJointsType&);

void
operator<< (::xercesc::DOMElement&, const ActuateJointType&);

void
operator<< (::xercesc::DOMElement&, const CloseToolChangerType&);

void
operator<< (::xercesc::DOMElement&, const ConfigureJointReportsType&);

void
operator<< (::xercesc::DOMElement&, const ConfigureJointReportType&);

void
operator<< (::xercesc::DOMElement&, const DwellType&);

void
operator<< (::xercesc::DOMElement&, const EndCanonType&);

void
operator<< (::xercesc::DOMElement&, const GetStatusType&);

void
operator<< (::xercesc::DOMElement&, const InitCanonType&);

void
operator<< (::xercesc::DOMElement&, const JointDetailsType&);

void
operator<< (::xercesc::DOMElement&, const JointForceTorqueType&);

void
operator<< (::xercesc::DOMElement&, const JointSpeedAccelType&);

void
operator<< (::xercesc::DOMElement&, const MessageType&);

void
operator<< (::xercesc::DOMElement&, const MoveScrewType&);

void
operator<< (::xercesc::DOMElement&, const MoveThroughToType&);

void
operator<< (::xercesc::DOMElement&, const MoveToType&);

void
operator<< (::xercesc::DOMElement&, const OpenToolChangerType&);

void
operator<< (::xercesc::DOMElement&, const ParameterSettingType&);

void
operator<< (::xercesc::DOMElement&, const PoseAndSetType&);

void
operator<< (::xercesc::DOMElement&, const PoseToleranceType&);

void
operator<< (::xercesc::DOMElement&, const RotAccelType&);

void
operator<< (::xercesc::DOMElement&, const RotAccelAbsoluteType&);

void
operator<< (::xercesc::DOMElement&, const RotAccelRelativeType&);

void
operator<< (::xercesc::DOMElement&, const RotSpeedType&);

void
operator<< (::xercesc::DOMElement&, const RotSpeedAbsoluteType&);

void
operator<< (::xercesc::DOMElement&, const RotSpeedRelativeType&);

void
operator<< (::xercesc::DOMElement&, const RunProgramType&);

void
operator<< (::xercesc::DOMElement&, const SetAngleUnitsType&);

void
operator<< (::xercesc::DOMElement&, const SetEndEffectorParametersType&);

void
operator<< (::xercesc::DOMElement&, const SetEndEffectorType&);

void
operator<< (::xercesc::DOMElement&, const SetEndPoseToleranceType&);

void
operator<< (::xercesc::DOMElement&, const SetForceUnitsType&);

void
operator<< (::xercesc::DOMElement&, const SetIntermediatePoseToleranceType&);

void
operator<< (::xercesc::DOMElement&, const SetLengthUnitsType&);

void
operator<< (::xercesc::DOMElement&, const SetMotionCoordinationType&);

void
operator<< (::xercesc::DOMElement&, const SetRobotParametersType&);

void
operator<< (::xercesc::DOMElement&, const SetRotAccelType&);

void
operator<< (::xercesc::DOMElement&, const SetRotSpeedType&);

void
operator<< (::xercesc::DOMElement&, const SetTorqueUnitsType&);

void
operator<< (::xercesc::DOMElement&, const SetTransAccelType&);

void
operator<< (::xercesc::DOMElement&, const SetTransSpeedType&);

void
operator<< (::xercesc::DOMElement&, const StopConditionEnumType&);

void
operator<< (::xercesc::DOMAttr&, const StopConditionEnumType&);

void
operator<< (::xml_schema::list_stream&,
            const StopConditionEnumType&);

void
operator<< (::xercesc::DOMElement&, const StopMotionType&);

void
operator<< (::xercesc::DOMElement&, const TransAccelType&);

void
operator<< (::xercesc::DOMElement&, const TransAccelAbsoluteType&);

void
operator<< (::xercesc::DOMElement&, const TransAccelRelativeType&);

void
operator<< (::xercesc::DOMElement&, const TransSpeedType&);

void
operator<< (::xercesc::DOMElement&, const TransSpeedAbsoluteType&);

void
operator<< (::xercesc::DOMElement&, const TransSpeedRelativeType&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CRCLCOMMANDS_HXX
