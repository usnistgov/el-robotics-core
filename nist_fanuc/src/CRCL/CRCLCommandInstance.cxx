// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CRCLCommandInstance.hxx"

// CRCLCommandInstanceType
// 

const CRCLCommandInstanceType::CRCLCommand_type& CRCLCommandInstanceType::
CRCLCommand () const
{
  return this->CRCLCommand_.get ();
}

CRCLCommandInstanceType::CRCLCommand_type& CRCLCommandInstanceType::
CRCLCommand ()
{
  return this->CRCLCommand_.get ();
}

void CRCLCommandInstanceType::
CRCLCommand (const CRCLCommand_type& x)
{
  this->CRCLCommand_.set (x);
}

void CRCLCommandInstanceType::
CRCLCommand (::std::auto_ptr< CRCLCommand_type > x)
{
  this->CRCLCommand_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// CRCLCommandInstanceType
//

CRCLCommandInstanceType::
CRCLCommandInstanceType (const CRCLCommand_type& CRCLCommand)
: ::DataThingType (),
  CRCLCommand_ (CRCLCommand, this)
{
}

CRCLCommandInstanceType::
CRCLCommandInstanceType (::std::auto_ptr< CRCLCommand_type > CRCLCommand)
: ::DataThingType (),
  CRCLCommand_ (CRCLCommand, this)
{
}

CRCLCommandInstanceType::
CRCLCommandInstanceType (const CRCLCommandInstanceType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::DataThingType (x, f, c),
  CRCLCommand_ (x.CRCLCommand_, f, this)
{
}

CRCLCommandInstanceType::
CRCLCommandInstanceType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::DataThingType (e, f | ::xml_schema::flags::base, c),
  CRCLCommand_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CRCLCommandInstanceType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::DataThingType::parse (p, f);

  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // CRCLCommand
    //
    {
      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "CRCLCommand",
          "",
          &::xsd::cxx::tree::factory_impl< CRCLCommand_type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!CRCLCommand_.present ())
        {
          ::std::auto_ptr< CRCLCommand_type > r (
            dynamic_cast< CRCLCommand_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->CRCLCommand_.set (r);
          continue;
        }
      }
    }

    break;
  }

  if (!CRCLCommand_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "CRCLCommand",
      "");
  }
}

CRCLCommandInstanceType* CRCLCommandInstanceType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CRCLCommandInstanceType (*this, f, c);
}

CRCLCommandInstanceType& CRCLCommandInstanceType::
operator= (const CRCLCommandInstanceType& x)
{
  if (this != &x)
  {
    static_cast< ::DataThingType& > (*this) = x;
    this->CRCLCommand_ = x.CRCLCommand_;
  }

  return *this;
}

CRCLCommandInstanceType::
~CRCLCommandInstanceType ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, CRCLCommandInstanceType >
_xsd_CRCLCommandInstanceType_type_factory_init (
  "CRCLCommandInstanceType",
  "");

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::CRCLCommandInstanceType > (
    ::CRCLCommandInstance (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLCommandInstanceType > (
    ::CRCLCommandInstance (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLCommandInstanceType > (
    ::CRCLCommandInstance (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CRCLCommandInstance (isrc, f, p);
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CRCLCommandInstance (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CRCLCommandInstance (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CRCLCommandInstance (isrc, f, p);
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CRCLCommandInstance (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CRCLCommandInstance (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::CRCLCommandInstanceType > (
    ::CRCLCommandInstance (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLCommandInstanceType > (
    ::CRCLCommandInstance (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLCommandInstanceType > (
    ::CRCLCommandInstance (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::CRCLCommandInstanceType > (
      ::CRCLCommandInstance (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
    ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
      "CRCLCommandInstance",
      "",
      &::xsd::cxx::tree::factory_impl< ::CRCLCommandInstanceType >,
      true, true, e, n, f, 0));

  if (tmp.get () != 0)
  {
    ::std::auto_ptr< ::CRCLCommandInstanceType > r (
      dynamic_cast< ::CRCLCommandInstanceType* > (tmp.get ()));

    if (r.get ())
      tmp.release ();
    else
      throw ::xsd::cxx::tree::not_derived< char > ();

    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "CRCLCommandInstance",
    "");
}

::std::auto_ptr< ::CRCLCommandInstanceType >
CRCLCommandInstance (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
    ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
      "CRCLCommandInstance",
      "",
      &::xsd::cxx::tree::factory_impl< ::CRCLCommandInstanceType >,
      true, true, e, n, f, 0));

  if (tmp.get () != 0)
  {

    ::std::auto_ptr< ::CRCLCommandInstanceType > r (
      dynamic_cast< ::CRCLCommandInstanceType* > (tmp.get ()));

    if (r.get ())
      tmp.release ();
    else
      throw ::xsd::cxx::tree::not_derived< char > ();

    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "CRCLCommandInstance",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
CRCLCommandInstance (::std::ostream& o,
                     const ::CRCLCommandInstanceType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLCommandInstance (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
CRCLCommandInstance (::std::ostream& o,
                     const ::CRCLCommandInstanceType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLCommandInstance (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLCommandInstance (::std::ostream& o,
                     const ::CRCLCommandInstanceType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLCommandInstance (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLCommandInstance (::xercesc::XMLFormatTarget& t,
                     const ::CRCLCommandInstanceType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLCommandInstance (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
CRCLCommandInstance (::xercesc::XMLFormatTarget& t,
                     const ::CRCLCommandInstanceType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLCommandInstance (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLCommandInstance (::xercesc::XMLFormatTarget& t,
                     const ::CRCLCommandInstanceType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLCommandInstance (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLCommandInstance (::xercesc::DOMDocument& d,
                     const ::CRCLCommandInstanceType& s,
                     ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (typeid (::CRCLCommandInstanceType) == typeid (s))
  {
    if (n.name () == "CRCLCommandInstance" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CRCLCommandInstance",
        "");
    }
  }
  else
  {
    ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
      "CRCLCommandInstance",
      "",
      e, n, s);
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
CRCLCommandInstance (const ::CRCLCommandInstanceType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

  if (typeid (::CRCLCommandInstanceType) == typeid (s))
  {
    d = ::xsd::cxx::xml::dom::serialize< char > (
      "CRCLCommandInstance",
      "",
      m, f);
  }
  else
  {
    d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
      "CRCLCommandInstance",
      "",
      m, s, f);
  }

  ::CRCLCommandInstance (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const CRCLCommandInstanceType& i)
{
  e << static_cast< const ::DataThingType& > (i);

  // CRCLCommand
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const CRCLCommandInstanceType::CRCLCommand_type& x (i.CRCLCommand ());
    if (typeid (CRCLCommandInstanceType::CRCLCommand_type) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CRCLCommand",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "CRCLCommand",
        "",
        false, true, e, x);
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CRCLCommandInstanceType >
_xsd_CRCLCommandInstanceType_type_serializer_init (
  "CRCLCommandInstanceType",
  "");


#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

