// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CRCLProgramInstance.hxx"

// CRCLProgramType
// 

const CRCLProgramType::InitCanon_type& CRCLProgramType::
InitCanon () const
{
  return this->InitCanon_.get ();
}

CRCLProgramType::InitCanon_type& CRCLProgramType::
InitCanon ()
{
  return this->InitCanon_.get ();
}

void CRCLProgramType::
InitCanon (const InitCanon_type& x)
{
  this->InitCanon_.set (x);
}

void CRCLProgramType::
InitCanon (::std::auto_ptr< InitCanon_type > x)
{
  this->InitCanon_.set (x);
}

const CRCLProgramType::MiddleCommand_sequence& CRCLProgramType::
MiddleCommand () const
{
  return this->MiddleCommand_;
}

CRCLProgramType::MiddleCommand_sequence& CRCLProgramType::
MiddleCommand ()
{
  return this->MiddleCommand_;
}

void CRCLProgramType::
MiddleCommand (const MiddleCommand_sequence& s)
{
  this->MiddleCommand_ = s;
}

const CRCLProgramType::EndCanon_type& CRCLProgramType::
EndCanon () const
{
  return this->EndCanon_.get ();
}

CRCLProgramType::EndCanon_type& CRCLProgramType::
EndCanon ()
{
  return this->EndCanon_.get ();
}

void CRCLProgramType::
EndCanon (const EndCanon_type& x)
{
  this->EndCanon_.set (x);
}

void CRCLProgramType::
EndCanon (::std::auto_ptr< EndCanon_type > x)
{
  this->EndCanon_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// CRCLProgramType
//

CRCLProgramType::
CRCLProgramType (const InitCanon_type& InitCanon,
                 const EndCanon_type& EndCanon)
: ::DataThingType (),
  InitCanon_ (InitCanon, this),
  MiddleCommand_ (this),
  EndCanon_ (EndCanon, this)
{
}

CRCLProgramType::
CRCLProgramType (::std::auto_ptr< InitCanon_type > InitCanon,
                 ::std::auto_ptr< EndCanon_type > EndCanon)
: ::DataThingType (),
  InitCanon_ (InitCanon, this),
  MiddleCommand_ (this),
  EndCanon_ (EndCanon, this)
{
}

CRCLProgramType::
CRCLProgramType (const CRCLProgramType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::DataThingType (x, f, c),
  InitCanon_ (x.InitCanon_, f, this),
  MiddleCommand_ (x.MiddleCommand_, f, this),
  EndCanon_ (x.EndCanon_, f, this)
{
}

CRCLProgramType::
CRCLProgramType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::DataThingType (e, f | ::xml_schema::flags::base, c),
  InitCanon_ (this),
  MiddleCommand_ (this),
  EndCanon_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CRCLProgramType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::DataThingType::parse (p, f);

  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // InitCanon
    //
    {
      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "InitCanon",
          "",
          &::xsd::cxx::tree::factory_impl< InitCanon_type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!InitCanon_.present ())
        {
          ::std::auto_ptr< InitCanon_type > r (
            dynamic_cast< InitCanon_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->InitCanon_.set (r);
          continue;
        }
      }
    }

    // MiddleCommand
    //
    {
      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "MiddleCommand",
          "",
          &::xsd::cxx::tree::factory_impl< MiddleCommand_type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< MiddleCommand_type > r (
          dynamic_cast< MiddleCommand_type* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->MiddleCommand_.push_back (r);
        continue;
      }
    }

    // EndCanon
    //
    {
      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "EndCanon",
          "",
          &::xsd::cxx::tree::factory_impl< EndCanon_type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!EndCanon_.present ())
        {
          ::std::auto_ptr< EndCanon_type > r (
            dynamic_cast< EndCanon_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->EndCanon_.set (r);
          continue;
        }
      }
    }

    break;
  }

  if (!InitCanon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "InitCanon",
      "");
  }

  if (!EndCanon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "EndCanon",
      "");
  }
}

CRCLProgramType* CRCLProgramType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CRCLProgramType (*this, f, c);
}

CRCLProgramType& CRCLProgramType::
operator= (const CRCLProgramType& x)
{
  if (this != &x)
  {
    static_cast< ::DataThingType& > (*this) = x;
    this->InitCanon_ = x.InitCanon_;
    this->MiddleCommand_ = x.MiddleCommand_;
    this->EndCanon_ = x.EndCanon_;
  }

  return *this;
}

CRCLProgramType::
~CRCLProgramType ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, CRCLProgramType >
_xsd_CRCLProgramType_type_factory_init (
  "CRCLProgramType",
  "");

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::CRCLProgramType > (
    ::CRCLProgram (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLProgramType > (
    ::CRCLProgram (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLProgramType > (
    ::CRCLProgram (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CRCLProgram (isrc, f, p);
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CRCLProgram (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::CRCLProgram (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CRCLProgram (isrc, f, p);
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CRCLProgram (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::CRCLProgram (isrc, h, f, p);
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::CRCLProgramType > (
    ::CRCLProgram (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLProgramType > (
    ::CRCLProgram (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::CRCLProgramType > (
    ::CRCLProgram (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::CRCLProgramType > (
      ::CRCLProgram (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
    ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
      "CRCLProgram",
      "",
      &::xsd::cxx::tree::factory_impl< ::CRCLProgramType >,
      true, true, e, n, f, 0));

  if (tmp.get () != 0)
  {
    ::std::auto_ptr< ::CRCLProgramType > r (
      dynamic_cast< ::CRCLProgramType* > (tmp.get ()));

    if (r.get ())
      tmp.release ();
    else
      throw ::xsd::cxx::tree::not_derived< char > ();

    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "CRCLProgram",
    "");
}

::std::auto_ptr< ::CRCLProgramType >
CRCLProgram (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
    ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
      "CRCLProgram",
      "",
      &::xsd::cxx::tree::factory_impl< ::CRCLProgramType >,
      true, true, e, n, f, 0));

  if (tmp.get () != 0)
  {

    ::std::auto_ptr< ::CRCLProgramType > r (
      dynamic_cast< ::CRCLProgramType* > (tmp.get ()));

    if (r.get ())
      tmp.release ();
    else
      throw ::xsd::cxx::tree::not_derived< char > ();

    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "CRCLProgram",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
CRCLProgram (::std::ostream& o,
             const ::CRCLProgramType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLProgram (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
CRCLProgram (::std::ostream& o,
             const ::CRCLProgramType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLProgram (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLProgram (::std::ostream& o,
             const ::CRCLProgramType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLProgram (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLProgram (::xercesc::XMLFormatTarget& t,
             const ::CRCLProgramType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLProgram (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
CRCLProgram (::xercesc::XMLFormatTarget& t,
             const ::CRCLProgramType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLProgram (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLProgram (::xercesc::XMLFormatTarget& t,
             const ::CRCLProgramType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::CRCLProgram (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
CRCLProgram (::xercesc::DOMDocument& d,
             const ::CRCLProgramType& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (typeid (::CRCLProgramType) == typeid (s))
  {
    if (n.name () == "CRCLProgram" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CRCLProgram",
        "");
    }
  }
  else
  {
    ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
      "CRCLProgram",
      "",
      e, n, s);
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
CRCLProgram (const ::CRCLProgramType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

  if (typeid (::CRCLProgramType) == typeid (s))
  {
    d = ::xsd::cxx::xml::dom::serialize< char > (
      "CRCLProgram",
      "",
      m, f);
  }
  else
  {
    d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
      "CRCLProgram",
      "",
      m, s, f);
  }

  ::CRCLProgram (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const CRCLProgramType& i)
{
  e << static_cast< const ::DataThingType& > (i);

  // InitCanon
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const CRCLProgramType::InitCanon_type& x (i.InitCanon ());
    if (typeid (CRCLProgramType::InitCanon_type) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "InitCanon",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "InitCanon",
        "",
        false, true, e, x);
  }

  // MiddleCommand
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (CRCLProgramType::MiddleCommand_const_iterator
         b (i.MiddleCommand ().begin ()), n (i.MiddleCommand ().end ());
         b != n; ++b)
    {
      if (typeid (CRCLProgramType::MiddleCommand_type) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "MiddleCommand",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "MiddleCommand",
          "",
          false, true, e, *b);
    }
  }

  // EndCanon
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const CRCLProgramType::EndCanon_type& x (i.EndCanon ());
    if (typeid (CRCLProgramType::EndCanon_type) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EndCanon",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "EndCanon",
        "",
        false, true, e, x);
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CRCLProgramType >
_xsd_CRCLProgramType_type_serializer_init (
  "CRCLProgramType",
  "");


#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

