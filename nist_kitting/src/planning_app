#!/usr/bin/python

import sys, getopt, ConfigParser, subprocess, shlex
import MySQLdb

INIFILE = ""
KITDESIGN = ""
DEBUG = False
DB_SERVER = ""
DB_USER = ""
DB_PASSWD = ""
DB_NAME = ""

def except_info():
    exc_type, exc_value = sys.exc_info()[:2]
    return str(exc_type.__name__) + ": " + str(exc_value)

class DB(object):

    def __init__(self):
        self.server = None
        self.user = None
        self.passwd = None
        self.db = None
        self.cursor = None

    def disconnect(self):
        try: self.db.close()
        except: pass
        self.init()
        
    def connect(self, server, user, passwd, db):
        try:
            if self.db != None: self.db.close()
            self.db = MySQLdb.connect(server, user, passwd, db)
            self.cursor = self.db.cursor()
        except:
            print "DB:", except_info()
            self.db = None
            self.cursor = None
            return False
        self.server = server
        self.user = user
        self.passwd = passwd
        return True

    def read(self, query):
        try:
            self.cursor.execute(query)
            return self.cursor.fetchall()
        except:
            print "DB:", except_info()
        return ()

    def update(self, request):
        try:
            self.cursor.execute(request)
            self.db.commit()
            return True
        except:
            self.db.rollback()
        return False

try:
    opts, args = getopt.getopt(sys.argv[1:], "i:k:d", ["inifile=", "kitdesign=", "dbserver=", "dbuser=", "dbpasswd=", "dbname="])
except getopt.GetoptError as err:
    print "planning_app: getopt:", str(err)
    sys.exit(1)

for o, a in opts:
    if o in ("-i", "--inifile"):
        INIFILE = a
    elif o in ("-k", "--kitdesign"):
        KITDESIGN = a
    elif o in ("-d"):
        DEBUG = True
# args with long form only go here
    elif o in ("--dbserver"):
        DB_SERVER = a
    elif o in ("--dbuser"):
        DB_USER = a
    elif o in ("--dbpasswd"):
        DB_PASSWD = a
    elif o in ("--dbname"):
        DB_NAME = a

if INIFILE == "":
    print "planning_app: getopt: no ini file provided"
    sys.exit(1)

if KITDESIGN == "":
    print "planning_app: getopt: no kit design provided"
    sys.exit(1)

if DEBUG:
    print "planning_app: ini file:", INIFILE
    print "planning_app: kit design:", KITDESIGN

defdict = {"app" : "",
           "plan" : "",
           "server" : "",
           "user" : "",
           "passwd" : "",
           "name" : ""}

try:
    with open(INIFILE, "rb") as f:
        config = ConfigParser.ConfigParser(defdict)
        config.read(INIFILE)
        OWL2PDDL = config.get("owl2pddl", "app")
        PLAN_FILE = config.get("planner", "plan")
        if DB_SERVER == "":
            DB_SERVER = config.get("mysql", "server")
        if DB_USER == "":
            DB_USER = config.get("mysql", "user")
        if DB_PASSWD == "":
            DB_PASSWD = config.get("mysql", "passwd")
        if DB_NAME == "":
            DB_NAME = config.get("mysql", "name")
except IOError as err:
    print "planning_app: open inifile:", str(err)
    sys.exit(1)
except (ConfigParser.NoSectionError, ConfigParser.NoOptionError) as err:
    print "planning_app: read inifile:", str(err)

if OWL2PDDL == "":
    print "planning_app: no OWL to PDDL application specified"
    sys.exit(1)

if PLAN_FILE == "":
    print "planning_app: no plan file specified"
    sys.exit(1)

if DB_SERVER == "": DB_SERVER = "aprs_dev"
if DB_USER == "" : DB_USER = "wills"
if DB_PASSWD == "" : DB_PASSWD = "ElsaIsdDb!"
if DB_NAME == "" : DB_NAME = "aprs-dev"
if DEBUG:
    print "planning_app: MySQL options are:", DB_SERVER, DB_USER, DB_PASSWD, DB_NAME

AprsDB = DB()

if not AprsDB.connect(DB_SERVER, DB_USER, DB_PASSWD, DB_NAME):
    print "pln_exec_app: can't connect to database"
    sys.exit(1)

def get_kit_design(name):
    global DEBUG, AprsDB
    if DEBUG: print "getting design of", name
    try:
        ret = AprsDB.read("select * from PartRefAndPose where hadByPartRefAndPose_KitDesign = " + "\"" + name + "\"")
        if len(ret) == 0: return False
        return True
    except: pass
    return False

if not get_kit_design(KITDESIGN):
    print "planning_app: can't find kit design", KITDESIGN
    sys.exit(1)

print "planning_app: found kit design", KITDESIGN

contents = """
(take-kittray robot_1 kit_tray_1 empty_kit_tray_supply tray_gripper stock_keeping_unit_kit_tray)
(look-for-slot-on-worksurface-kittray robot_1 worksurface-slot-for-kittray work_table_1 kit_tray_1 tray_gripper)
(place-kittray robot_1 kit_tray_1 work_table_1 worksurface-slot-for-kittray tray_gripper)
(create-kit kit_s2m1l1 kit_tray_1 work_table_1)
(look-for-endeffectorholderslot robot_1 tray_gripper tray_gripper_holder tray_gripper_holder_slot changing_station_1)
(detach-endeffector robot_1 tray_gripper tray_gripper_holder tray_gripper_holder_slot changing_station_1)
(look-for-endeffector-in-endeffectorholder robot_1 part_gripper part_gripper_holder part_gripper_holder_slot changing_station_1)
(attach-endeffector robot_1 part_gripper part_gripper_holder changing_station_1 part_gripper_holder_slot)
(look-for-part robot_1 part_vex36_4 stock_keeping_unit_part_vex36 kit_s2m1l1 part_gripper)
(set-grasp robot_1 part_vex36_4 stock_keeping_unit_part_vex36 part_gripper)
(take-part robot_1 part_vex36_4 stock_keeping_unit_part_vex36 part_vex36_tray part_gripper kit_s2m1l1)
(look-for-slot-in-kit robot_1 part_vex36_4 stock_keeping_unit_part_vex36 kit_s2m1l1 kit_s2m1l1_slot_vex36_2 part_gripper)
; (place-part robot_1 part_vex36_4 stock_keeping_unit_part_vex36 kit_s2m1l1 kit_s2m1l1_slot_vex36_2 part_gripper)
(place-part robot_1 small_gear_1 small_gear kit_gearbox_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(look-for-part robot_1 part_vex60_1 stock_keeping_unit_part_vex60 kit_s2m1l1 part_gripper)
(look-for-endeffectorholderslot robot_1 part_gripper part_gripper_holder part_gripper_holder_slot changing_station_1)
(set-grasp robot_1 part_vex60_1 stock_keeping_unit_part_vex60 part_gripper)
(take-part robot_1 part_vex60_1 stock_keeping_unit_part_vex60 part_vex60_tray part_gripper kit_s2m1l1)
(look-for-slot-in-kit robot_1 part_vex60_1 stock_keeping_unit_part_vex60 kit_s2m1l1 kit_s2m1l1_slot_vex60_1 part_gripper)
; (place-part robot_1 part_vex60_1 stock_keeping_unit_part_vex60 kit_s2m1l1 kit_s2m1l1_slot_vex60_1 part_gripper)
(place-part robot_1 medium_gear_1 medium_gear kit_gearbox_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(look-for-part robot_1 part_vex84_1 stock_keeping_unit_part_vex84 kit_s2m1l1 part_gripper)
(set-grasp robot_1 part_vex84_1 stock_keeping_unit_part_vex84 part_gripper)
(take-part robot_1 part_vex84_1 stock_keeping_unit_part_vex84 part_vex84_tray part_gripper kit_s2m1l1)
(look-for-slot-in-kit robot_1 part_vex84_1 stock_keeping_unit_part_vex84 kit_s2m1l1 kit_s2m1l1_slot_vex84_1 part_gripper)
; (place-part robot_1 part_vex84_1 stock_keeping_unit_part_vex84 kit_s2m1l1 kit_s2m1l1_slot_vex84_1 part_gripper)
; (place-part robot_1 large_gear_1 large_gear kit_gearbox_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(place-part robot_1 top_cover_1 top_cover gearbox_parts_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(look-for-part robot_1 part_vex36_1 stock_keeping_unit_part_vex36 kit_s2m1l1 part_gripper)
(set-grasp robot_1 part_vex36_1 stock_keeping_unit_part_vex36 part_gripper)
(take-part robot_1 part_vex36_1 stock_keeping_unit_part_vex36 part_vex36_tray part_gripper kit_s2m1l1)
(look-for-slot-in-kit robot_1 part_vex36_1 stock_keeping_unit_part_vex36 kit_s2m1l1 kit_s2m1l1_slot_vex36_1 part_gripper)
; (place-part robot_1 part_vex36_1 stock_keeping_unit_part_vex36 kit_s2m1l1 kit_s2m1l1_slot_vex36_1 part_gripper)
(place-part robot_1 small_gear_1 small_gear kit_gearbox_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(detach-endeffector robot_1 part_gripper part_gripper_holder part_gripper_holder_slot changing_station_1)
(look-for-endeffector-in-endeffectorholder robot_1 tray_gripper tray_gripper_holder tray_gripper_holder_slot changing_station_1)
(attach-endeffector robot_1 tray_gripper tray_gripper_holder changing_station_1 part_gripper_holder_slot)
(take-kit robot_1 kit_s2m1l1 kit_tray_1 work_table_1 stock_keeping_unit_kit_tray tray_gripper)
(look-for-slot-in-lbwk robot_1 lbwk_slot_0 finished_kit_receiver kit_s2m1l1 tray_gripper)
; (place-kit robot_1 kit_s2m1l1 tray_gripper lbwk_slot_0 finished_kit_receiver)
; (place-part robot_1 large_gear_1 large_gear gearbox_parts_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(place-part robot_1 bottom_cover_1 bottom_cover gearbox_parts_tray kit_s2m1l1_slot_vex36_2 part_gripper)
(place-part robot_1 medium_gear_1 medium_gear kit_gearbox_tray kit_s2m1l1_slot_vex36_2 part_gripper)
"""

if DEBUG:
    print "planning_app: java -jar", OWL2PDDL, "-i", INIFILE, "-k", KITDESIGN

def fake_it():
    try:
        with open(PLAN_FILE, "w") as f:
            for line in contents:
                f.write(line)
    except IOError as err:
        print "planning_app: open plan file:", str(err)
        sys.exit(1)

def do_it():
    try:
        cmd = "java -jar " + OWL2PDDL + " -i " + INIFILE + " -k " + KITDESIGN + " -d -p"
        toks = shlex.split(subprocess.check_output(shlex.split(cmd)))
        print toks
    except:
        print "planning_app: error on ", cmd, " : ", except_info()
        print "planning_app: faking it"
        fake_it()

do_it()

sys.exit(0)

