#!/usr/bin/python

import sys, time, getopt, socket, time, threading, StringIO, xml.etree.ElementTree as ET, ConfigParser
from crcl import *

xmldec = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
uri = "http://www.w3.org/2001/XMLSchema-instance"
xsi = "{" + uri + "}"
dict = {"xmlns:xsi" : uri}

INIFILE = ""
NAME = "robot_prim"
PORT = ""
PERIOD = 0.5
DEBUG = False

# the global RCS header variables for the currently executing command
CommandID = 0
StatusID = 0
CommandState = "Ready"

# the global pose
Pose = PoseOnlyLocationType()

# --- Status writer ---

def writer(conn, period):
    global DEBUG, CommandID, StatusID, CommandState, Pose

    # loop with a delay while a client is connected
    while True:

        cs = CRCLStatusType(CommandStatusType(CommandID, StatusID, CommandState), Pose)
        tree = cs.tree()

        # stringify it
        output = StringIO.StringIO()
        output.write(xmldec)
        tree.write(output)
        outstr = output.getvalue()
        output.close()
        if DEBUG: print outstr

        # write it to the client
        try:
            conn.send(outstr)
            time.sleep(period)
        except:
            # we detect a client disconnect via a send() error
            break

    # send failed, client disconnected
    if DEBUG: print NAME, ": writer done"

# --- Message handlers ---

def handleMoveThroughToType(child):
    global DEBUG, CommandID, StatusID, CommandState, Pose
    if DEBUG: print "handleMoveThroughToType"
    
    CommandID = child.findtext("CommandID")
    print CommandID
    print child.findtext("NumPositions")
    print child.findtext("MoveStraight")
    for i in child.findall("Waypoint"):
        try:
            ii = i.find("Point")
            point = PointType(float(ii.findtext("X")), float(ii.findtext("Y")), float(ii.findtext("Z")))
            ii = i.find("XAxis")
            xaxis = VectorType(float(ii.findtext("I")), float(ii.findtext("J")), float(ii.findtext("K")))
            ii = i.find("ZAxis")
            zaxis = VectorType(float(ii.findtext("I")), float(ii.findtext("J")), float(ii.findtext("K")))
            Pose.Point = point
            Pose.XAxis = xaxis
            Pose.ZAxis = zaxis
            print Pose
            CommandState = CommandStateType.DONE
        except:
            CommandState = CommandStateType.ERROR

def handleMoveToType(child):
    global DEBUG, CommandID, StatusID, CommandState, Pose
    if DEBUG: print "handleMoveToType"
    
    CommandID = child.findtext("CommandID")
    print CommandID
    print child.findtext("MoveStraight")
    try:
        i = child.find("EndPosition")
        ii = i.find("Point")
        point = PointType(float(ii.findtext("X")), float(ii.findtext("Y")), float(ii.findtext("Z")))
        ii = i.find("XAxis")
        xaxis = VectorType(float(ii.findtext("I")), float(ii.findtext("J")), float(ii.findtext("K")))
        ii = i.find("ZAxis")
        zaxis = VectorType(float(ii.findtext("I")), float(ii.findtext("J")), float(ii.findtext("K")))
        Pose.Point = point
        Pose.XAxis = xaxis
        Pose.ZAxis = zaxis
        print Pose
        CommandState = CommandStateType.DONE
    except:
        CommandState = CommandStateType.ERROR

def handleOpenToolChangerType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleOpenToolChangerType"
    CommandID = child.findtext("CommandID")
    CommandState = CommandStateType.DONE
    print CommandID, "open"

def handleCloseToolChangerType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleCloseToolChangerType"
    CommandID = child.findtext("CommandID")
    CommandState = CommandStateType.DONE
    name = child.findtext("Name")
    print CommandID, "close", name

def handleSetEndEffectorParametersType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleSetEndEffectorParametersType"
    CommandID = child.findtext("CommandID")
    CommandState = CommandStateType.DONE
    print CommandID, "params:"
    for i in child.findall("ParameterSetting"):
        print i.findtext("ParameterName"), "=", i.findtext("ParameterValue")

def handleSetEndEffectorType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleSetEndEffectorType"
    CommandID = child.findtext("CommandID")
    CommandState = CommandStateType.DONE
    setting = child.findtext("Setting")
    print CommandID, "set", setting

# -- Command reader ---

def reader(conn):

    # message size to read; make this > max XML message length
    size = 1024

    # loop forever while a client is connected, blocking on its messages
    while True:
        try:
            data = conn.recv(size)
        except:
            break
        if not data: break

        try:
            tree = ET.parse(StringIO.StringIO(data))
            root = tree.getroot()
        except:
            print NAME, ": error parsing data :", str(data)
        for child in root:
            if child.tag == "CRCLCommand":
                cmd = child.attrib.get(xsi+"type", None)
                if cmd == "MoveThroughToType":
                    handleMoveThroughToType(child)
                elif cmd == "MoveToType":
                    handleMoveToType(child)
                elif cmd == "OpenToolChangerType":
                    handleOpenToolChangerType(child)
                elif cmd == "CloseToolChangerType":
                    handleCloseToolChangerType(child)
                elif cmd == "SetEndEffectorParametersType":
                    handleSetEndEffectorParametersType(child)
                elif cmd == "SetEndEffectorType":
                    handleSetEndEffectorType(child)
                else:
                    # unknown command
                    print NAME, ": unknown command :", cmd
            else:
                # unknown tag
                print NAME, ": unknown tag :", child.tag

    # recv failed, client disconnected
    if DEBUG: print NAME, ": reader done"
    conn.close()

# --- Main ---

try:
    opts, args = getopt.getopt(sys.argv[1:], "i:n:p:t:d", ["inifile=", "name=", "port=", "period="])
except getopt.GetoptError, err:
    print NAME, ":", str(err)
    sys.exit(1)

for o, a in opts:
    if o in ("-i", "--infile"):
        INIFILE = a
    elif o in ("-n", "--name"):
        NAME = a
    elif o in ("-p", "--port"):
        PORT = a
    elif o in ("-t", "--period"):
        PERIOD = a
    elif o in ("-d"):
        DEBUG = True

if INIFILE != "":
    try:
        with open(INIFILE, "rb") as f:
            config = ConfigParser.ConfigParser()
            config.read(INIFILE)
            if PORT == "":
                PORT = config.get(NAME, "port")
            if PERIOD == "":
                PERIOD = config.get(NAME, "period")
    except IOError as err:
        print NAME, ": open inifile :", str(err)
        sys.exit(1)
    except (ConfigParser.NoSectionError, ConfigParser.NoOptionError) as err:
        print NAME, ": read inifile :", str(err)
        sys.exit(1)

if PORT == "":
    print NAME, ": no port provided"
    sys.exit(1)

if PERIOD == "":
    PERIOD = 1
    print NAME, ": using default period", PERIOD

BACKLOG = 1
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(("", int(PORT)))
s.listen(BACKLOG)

while True:
    if DEBUG: print NAME, ": accepting connections on", str(PORT)
    try: conn, addr = s.accept()
    except: break
    if DEBUG: print NAME, ": connected by", addr
    r = threading.Thread(target=reader, args=(conn,))
    r.daemon = True
    r.start()
    t = threading.Thread(target=writer, args=(conn,float(PERIOD)))
    t.daemon = True
    t.start()

print NAME, ": done"

sys.exit(0)
