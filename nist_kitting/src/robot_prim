#!/usr/bin/python

import sys, time, getopt, socket, time, threading, StringIO, xml.etree.ElementTree as ET, ConfigParser
from crcl import *

xmldec = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
uri = "http://www.w3.org/2001/XMLSchema-instance"
xsi = "{" + uri + "}"
dict = {"xmlns:xsi" : uri}

INIFILE = ""
PORT = ""
PERIOD = 1
DEBUG = False

# the global RCS header variables for the currently executing command
CommandID = 0
StatusID = 0
CommandState = "Ready"

# --- Status writer ---

def writer(conn, period):
    global DEBUG, CommandID, StatusID, CommandState

    # loop with a delay while a client is connected
    while True:

        # build a status message
        root = ET.Element("CRCLStatus", attrib=dict)
        cs = ET.SubElement(root, "CommandStatus")
        ET.SubElement(cs, "CommandID").text = str(CommandID)
        ET.SubElement(cs, "StatusID").text = str(StatusID)
        ET.SubElement(cs, "CommandState").text = CommandState
        tree = ET.ElementTree(root)

        # stringify it
        output = StringIO.StringIO()
        output.write(xmldec)
        tree.write(output)
        outstr = output.getvalue()
        output.close()

        # write it to the client
        try:
            conn.send(outstr)
            time.sleep(period)
        except:
            # we detect a client disconnect via a send() error
            break

    # send failed, client disconnected
    if DEBUG: print "robot_prim: writer done"

# --- Message handlers ---

def handleMoveThroughToType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleMoveThroughToType"
    
    CommandID = child.findtext("CommandID")
    CommandState = "Done"
    print child.findtext("NumPositions")
    print child.findtext("MoveStraight")
    for i in child.findall("Waypoint"):
        ii = i.find("Point")
        print ii.findtext("X"), ii.findtext("Y"), ii.findtext("Z")
        ii = i.find("XAxis")
        print ii.findtext("I"), ii.findtext("J"), ii.findtext("K")
        ii = i.find("ZAxis")
        print ii.findtext("I"), ii.findtext("J"), ii.findtext("K")

def handleOpenToolChangerType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleOpenToolChangerType"
    time.sleep(2)
    CommandID = child.findtext("CommandID")
    CommandState = "Done"

def handleCloseToolChangerType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleCloseToolChangerType"
    CommandID = child.findtext("CommandID")
    CommandState = "Done"

def handleSetEndEffectorParametersType(child):
    global DEBUG, CommandID, StatusID, CommandState
    if DEBUG: print "handleSetEndEffectorParametersType"
    CommandID = child.findtext("CommandID")
    CommandState = "Done"
    print child.findtext("CommandID")
    for i in child.findall("ParameterSetting"):
        print i.findtext("ParameterName"), "=", i.findtext("ParameterValue")

# -- Command reader ---

def reader(conn):

    # message size to read; make this > max XML message length
    size = 1024

    # loop forever while a client is connected, blocking on its messages
    while True:
        try:
            data = conn.recv(size)
        except:
            break
        if not data: break

        try:
            tree = ET.parse(StringIO.StringIO(data))
            root = tree.getroot()
        except:
            print "robot_prim: error parsing data:", str(data)
        for child in root:
            if child.tag == "CRCLCommand":
                cmd = child.attrib.get(xsi+"type", None)
                if cmd == "MoveThroughToType":
                    handleMoveThroughToType(child)
                elif cmd == "OpenToolChangerType":
                    handleOpenToolChangerType(child)
                elif cmd == "CloseToolChangerType":
                    handleCloseToolChangerType(child)
                elif cmd == "SetEndEffectorParametersType":
                    handleSetEndEffectorParametersType(child)
                else:
                    # unknown command
                    print "robot_prim: unknown command:", cmd
            else:
                # unknown tag
                print "robot_prim: unknown tag:", child.tag

    # recv failed, client disconnected
    if DEBUG: print "robot_prim: reader done"
    conn.close()

# --- Main ---

try:
    opts, args = getopt.getopt(sys.argv[1:], "i:p:t:d", ["inifile=", "port=", "period="])
except getopt.GetoptError, err:
    print "robot_prim:", str(err)
    sys.exit(1)

for o, a in opts:
    if o in ("-i", "--infiile"):
        INIFILE = a
    elif o in ("-p", "--port"):
        PORT = a
    elif o in ("-t", "--period"):
        PERIOD = a
    elif o in ("-d"):
        DEBUG = True

if INIFILE != "":
    try:
        with open(INIFILE, "rb") as f:
            config = ConfigParser.ConfigParser()
            config.read(INIFILE)
            if PORT == "":
                PORT = config.get("robot_prim", "port")
            if PERIOD == "":
                PERIOD = config.get("robot_prim", "period")
    except IOError as err:
        print "robot_prim: open inifile:", str(err)
        sys.exit(1)
    except (ConfigParser.NoSectionError, ConfigParser.NoOptionError) as err:
        print "robot_prim: read inifile:", str(err)
        sys.exit(1)

if PORT == "":
    print "robot_prim: no port provided"
    sys.exit(1)

if PERIOD == "":
    PERIOD = 1
    print "robot_prim: using default period", PERIOD

BACKLOG = 1
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(("", int(PORT)))
s.listen(BACKLOG)

while True:
    if DEBUG: print "robot_prim: accepting connections on", str(PORT)
    try: conn, addr = s.accept()
    except: break
    if DEBUG: print "robot_prim: connected by", addr
    r = threading.Thread(target=reader, args=(conn,))
    r.start()
    t = threading.Thread(target=writer, args=(conn,float(PERIOD)))
    t.start()

print "robot_prim: done"

sys.exit(0)
