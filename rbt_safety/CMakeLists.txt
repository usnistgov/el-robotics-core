cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE Debug)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})
rosbuild_add_executable(obst_det src/obst_det.cpp)
rosbuild_add_executable(obst_det_laser src/obst_det_laser.cpp)
rosbuild_add_executable(obst_det_sim src/obst_det_sim.cpp)
find_package(X11) 
find_package (Threads)
if (X11_FOUND) 
include_directories(${X11_INCLUDE_DIRS}) 
target_link_libraries (obst_det ${X11_LIBRARIES}) 
target_link_libraries (obst_det_laser ${X11_LIBRARIES}) 
target_link_libraries (obst_det_sim ${X11_LIBRARIES}) 
endif (X11_FOUND) 
target_link_libraries (obst_det ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries (obst_det_laser ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries (obst_det_sim ${X11_LIBRARIES}) 

