
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1615] =
    {   0,
      168,  168,    0,    0,    5,    5,    6,    6,  171,  169,
      168,  168,  169,  169,  166,  169,  169,  169,    2,    3,
        2,    5,  170,    6,    7,    6,    8,  168,    0,    0,
        0,    0,    0,    0,   11,   19,   25,    0,    0,   37,
       41,   43,    0,    0,    0,    0,    0,    0,    0,    0,
      105,  107,  111,   10,    0,    0,    0,    0,    5,    6,
        7,    6,    0,  167,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,   17,   21,   23,    0,    0,
        0,   39,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    1,    0,    0,    0,
       18,    0,    0,    0,   24,    0,    0,    0,    0,   36,
        0,    0,   40,    0,   42,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  104,    0,    0,  106,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   14,    0,   16,    0,   20,    0,   22,    0,    0,

        0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   31,    0,    0,    0,
        0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   91,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  103,  109,    0,    0,    0,    0,    0,
        0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
       52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
        0,   92,    0,    0,    0,    0,    0,    0,   29,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,   71,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
        0,  108,    0,    0,   45,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
        0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
        0,   56,    0,    0,    0,    0,    0,    0,    0,   70,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   51,    0,    0,   61,    0,
        0,    0,    0,   73,    0,    0,    0,   83,    0,    0,

        0,    0,  101,    0,    9,    0,    0,    0,    0,    0,
        0,    0,    0,   44,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       87,    0,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   50,    0,    0,    0,   60,    0,
        0,    0,    0,    0,   72,    0,    0,    0,    0,   82,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
        0,    0,   63,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,   94,   27,    0,   47,   49,    0,    0,    0,
        0,   69,   75,    0,   81,    0,    0,    0,   13,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,    0,    0,   46,    0,   48,
        0,    0,    0,    0,    0,   68,    0,   74,    0,    0,
       80,    0,    0,    0,    0,   55,    0,    0,    0,    0,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       54,    0,    0,    0,    0,    0,   84,    0,    0,   35,
        0,   65,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  138,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   34,    0,    0,   64,    0,   66,    0,    0,    0,
        0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
        0,    0,    0,    0,  123,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  133,    0,    0,  136,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  130,    0,    0,    0,    0,    0,
        0,    0,  141,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  160,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      124,  125,    0,    0,    0,    0,    0,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  159,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  134,    0,    0,    0,    0,    0,
        0,    0,    0,  148,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  162,  163,    0,    0,    0,    0,   33,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  121,    0,    0,  127,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  146,    0,  149,    0,    0,
        0,    0,    0,  157,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  135,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  158,    0,    0,    0,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  112,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
        0,    0,    0,    0,    0,  147,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   79,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  144,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  128,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  126,    0,    0,    0,  142,  143,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       12,  113,    0,    0,    0,    0,  119,    0,    0,    0,

        0,    0,    0,    0,    0,  153,    0,    0,    0,    0,
        0,   58,    0,    0,    0,    0,    0,    0,  137,    0,
        0,  145,    0,    0,  152,  154,    0,    0,  164,    0,
        0,  116,    0,    0,  122,    0,    0,    0,    0,  155,
        0,    0,    0,    0,    0,  139,    0,  150,  151,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  161,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  118,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,    0,    0,
        0,  140,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,  165,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
        1,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1622] =
    {   0,
        0,    5,    7,    9, 2000, 1999,   22,   25, 2013, 2016,
       28,   31,    0,   97, 2016, 1995, 1954,    0, 2016, 2016,
     2003,    0, 2016,    0,   47,   55, 2016,   61, 2004, 1946,
     2001,   36, 1999,  139, 2016,   27,   49, 1957,   11, 1955,
     2016, 1951, 1944,   11,   24,   26,   25,   23,   26, 1957,
     1981, 2016, 1980, 2016, 1952, 1942, 1944, 1978,    0,    0,
       76,   86, 1942, 2016, 1986,    0,  101,  143, 1944,   36,
      146,  105,  181, 1933,   50,   76,  133,   34,   48,  105,
     1946,  197,  200,  203, 2016, 2016, 2016, 2016, 1927, 1926,
     1940, 2016, 1923, 1939, 1928, 1927, 1929, 1929, 1919, 1935,

      127,  138, 1929, 1932, 1916, 1927, 1912, 1921,   96, 1905,
     1904, 1912,   40, 1955, 2016, 1954, 2016,  206,  209,  225,
     2016,  228,  232,  235, 2016, 1905, 1904, 1918,  244, 2016,
      251,  254, 2016,  260, 2016, 1901, 1917, 1906, 1905, 1907,
     1907, 1897, 1913,  135,  167, 1907, 1910, 1894, 1905, 1890,
     1899,  109,  263, 2016, 1883,  270, 2016,  279, 2016, 1882,
     1902, 1899, 1923,  187, 1901, 1896, 1898, 1894, 1893, 1877,
     1882, 1881, 1885, 1889, 1876, 1901, 1875, 1868, 1872, 1867,
     1872, 2016,  189, 1876, 1875, 1879,   45, 1863,  212, 1861,
      282, 2016,  286, 2016,  289, 2016,  298, 2016, 1877, 1874,

     1898,  305, 2016,  273, 1876, 1871, 1873, 1869, 1868, 1852,
     1857, 1856, 1860, 1864, 1851, 1876, 1850, 1843, 1847, 1842,
     1847,  309,  208, 1851, 1850, 1840, 1873, 1850, 1854, 1836,
     1844, 1832, 2016, 1846, 1847, 1835, 1859,  298, 1827, 1826,
     1840, 1839, 1841, 1822, 1836, 2016, 2016, 1833, 1838, 1837,
     1818, 1817, 1826, 1829, 1862, 1817, 1806, 1812,  325, 1823,
     1827, 1809, 1817, 1805,  328, 1819, 1820, 1808, 1832,  316,
     1800, 1799, 1813, 1812, 1814, 1795, 1809,  344,  354, 1806,
      360, 2016, 1811, 1810, 1791, 1790, 1799, 1801, 1800, 1792,
     1803, 1789, 1793, 1783, 1780, 1779, 1797, 1776,  250, 1784,

     1791, 1779, 1788, 2016, 1783, 1788, 1772, 1779, 1799, 1773,
     1797, 1772, 1782, 2016, 2016, 1769, 1764, 1757, 1791, 1763,
     1769,  363, 2016, 1771, 1770, 1762, 1773, 1759, 1763,  366,
     2016, 1753, 1750, 1749, 1767, 1746,  270, 1754, 1761, 1749,
     1758,  370, 1753, 1758, 1742, 1749, 1769, 1743,  382, 2016,
      386, 2016, 1767, 1742, 1752,  389,  392, 1737, 2016, 1747,
     1746, 1725, 1742, 1733, 1757, 2016, 1745, 1732, 1724, 1723,
     1723, 1736, 2016, 1725, 1721, 1723, 1732, 1716, 1730, 1733,
     1730, 1731, 1726, 1718, 1722, 1709, 1708, 1725, 1720, 1708,
      398, 1718, 1717, 1696, 1713, 1704, 1728,  408, 1716, 1703,

     1695, 1694, 1694, 1707,  414, 1696, 1692,  417, 2016, 1694,
     1703, 1687, 1701, 1704, 1701, 1702, 1697, 1689,  420, 2016,
      424, 2016, 1680, 1696, 2016, 1709, 1706, 1682, 1689, 1674,
     1688, 1684, 1686, 1687, 1676, 1668, 1668, 1672, 1666, 1659,
     1680, 1669, 1676, 1667, 2016, 1674,  436, 1669, 1668, 1663,
      440, 1655,  443, 2016, 1671,  446, 1684, 1681, 1657, 1664,
      451, 2016, 1649, 1663, 1659, 1661, 1662, 1651,  455, 2016,
     1643, 1643, 1647, 1641, 1634, 1655, 1644, 1651, 1642,  462,
     1649, 1644, 1632, 1650, 1638, 2016, 1656, 1639, 2016, 1632,
     1670, 1627, 1639, 2016, 1634, 1649, 1622, 2016, 1620, 1634,

     1649, 1632, 2016,  467, 2016, 1621,  471, 1630,  474,  478,
     1625, 1613,  489, 2016, 1631, 1619,  492, 1637, 1620,  495,
     1613, 1651, 1608, 1620,  498, 1615, 1630, 1603,  501, 1601,
     1615, 1630, 1613,  517, 2016,  520, 1602, 1601, 1602, 1613,
     1593, 1597, 1593, 1596, 1600, 1594, 1592, 1586, 1590, 1615,
     2016, 1582, 2016, 1588,  523,  526, 1582,  538,  526, 1585,
     1584, 1585, 1596,  565, 2016, 1576, 1580,  568, 2016, 1576,
     1579, 1583, 1577,  571, 2016, 1575, 1569, 1573,  574, 2016,
     1598,  577, 1565,  593,  596, 2016, 1571, 1566, 1578, 1568,
     1576, 1566, 2016, 1575, 1562, 1557, 1562, 1574, 1556, 1572,

     1559,  599,  602, 1563, 1554,  561,  218, 1551,  271, 1551,
     1566, 1548, 1559,  276,  292,  301,  318,  565,  349,  350,
      491, 1550, 1562, 1554, 1547, 1542, 1554, 1544, 1552, 1542,
      628, 1551, 1538, 1533, 1538, 1550, 1532, 1548,  631, 2016,
     1535,  634, 2016, 2016,  328, 2016, 2016, 1531, 1553, 1551,
     1524, 2016, 2016, 1529, 2016, 1529, 1539,  637, 2016, 1520,
     1538, 1518, 1533, 1527, 1515, 1520, 1518, 1527,   89, 1509,
     1509, 1517, 1523, 1551, 1507, 1522, 1510, 1519, 1515, 1501,
     1515,  367, 1501, 1497, 1498, 1501, 1495, 1502, 1511, 1498,
     1498, 1499, 1496, 1487, 1492, 1488, 1496,  640,  350,  652,

      656, 1488, 1510,  659, 2016, 1508, 1481,  662,  668, 1486,
      678, 1486, 1496, 1482, 1495, 1476, 1474, 1484, 1483, 1487,
     1485, 1484, 1468, 1484, 1477, 1491, 1464, 1482, 1481, 1469,
     1479, 1470, 1477, 1483, 1475, 1455, 1467,    6,   61,  100,
      101,  153,  148,  494,  160,  150,  195,  181,  189,  211,
      219,  401,  235,  237,  235,  256,  268,  292,  293,  292,
      342,  350,  684, 2016,  355,  385,  687, 2016,  690, 2016,
      370,  370,  384,  399,  694, 2016,  706, 2016,  414,  710,
     2016,  414,  419,  430,  430, 2016,  444,  433,  449,  464,
     2016,  449,  452,  465,  456,  448,  482,  490,  477,  506,

      492,  527,  538,  518,  532,  541,  527,  529,  579,  530,
      549,  546,  554,  559,  553,  576,  568,  567,  594,  610,
      619,  611,  615,  624,  611,  612,  619,  645,  671,  621,
      647,  652,  654,  659,  658,  660,  660,  715,  676,  665,
      664,  680,  726,  664,  679,  683,  676,  686,  678,  675,
     2016,  723,  702,  682,  681,  685,  691,  676,  701,  698,
      703,  697,  690,  713,  714,  704,  701,  693,  687,  708,
      720,  699,  711,  696,  702,  743,  715,  716,  721,  698,
      709,  711,  725,  707,  710,  720,  754,  713,  726,  724,
      733,  741,  711,  732,  718,  727,  764,  737,  737,  784,

     2016,  732,  742,  734,  731,  791, 2016,  794,  751, 2016,
      753, 2016, 2016,  755,  794,  758,  785,  758,  759,  786,
      793,  757,  786,  761,  794,  770,  751,  752,  760,  764,
      800,  765,  791,  758,  779,  791,  785,  782,  785,  826,
      786,  779,  776,  790,  782,  783,  802,  777,  776,  796,
      824,  825,  782,  785,  779,  789,  788,  813,  814,  806,
      805,  852,  810,  856,  859,  817,  863, 2016,  807,  826,
      849,  863,  823,  831,  816,  872,  816,  824,  821,  825,
      863,  833,  849,  830,  882,  830,  831,  858,  835,  833,
      846,  852,  838,  892,  831,  845,  895,  839, 2016,  884,

      849,  857,  862,  839,  871,  848,  873,  863,  849,  867,
      868,  878,  854,  859,  871,  872,  853,  854,  860,  863,
      923, 2016,  884,  927, 2016,  930, 2016,  913,  904,  876,
      890,  873,  893,  880,  885, 2016,  893,  899,  896,  891,
      892,  888,  884,  906, 2016,  906,  907,  895,  889,  933,
      895,  954,  900,  914, 2016,  904,  927, 2016,  913,  920,
      899,  962,  906,  940,  903,  928,  914,  906,  945,  924,
      914,  915,  918,  943,  933,  976,  936,  925,  926,  935,
      956,  928,  942,  947,  945,  928,  928,  939,  948,  933,
      952,  976,  937,  946,  945,  966,  945,  982, 1000, 1001,

      985,  950,  949,  967, 2016,  949, 1007,  966,  947,  958,
      954,  985, 2016,  967,  962,  962,  954,  975,  965,  967,
      968,  975,  976,  985,  971,  963, 1026, 2016, 1014,  986,
      987,  978,  993,  991,  974,  984, 1019,  990,  977, 1000,
     1008,  987, 1026,  999,  998, 1002,  989,  984, 1005, 1005,
     2016, 2016,  995, 1008,  999, 1003, 1022, 2016, 1054, 1002,
     1005, 1011, 1003, 1007, 1020, 1019, 1031, 1063, 1022, 1025,
     1015, 1015, 1016, 1007, 1028, 1018, 2016, 1032, 1073, 1074,
     1024, 1026, 1061, 1032, 1037, 1038, 1043, 1080, 1059, 1022,
     1071, 1034, 1044, 1038, 1051, 1033, 1038, 1092, 1050, 1036,

     1095, 1038, 1066, 1036, 2016, 1057, 1081, 1049, 1061, 1052,
     1066, 1105, 1044, 2016, 1107, 1070, 1095, 1059, 1060, 1081,
     1113, 1072, 1058, 2016, 2016, 1097, 1075, 1076, 1081, 2016,
     1061, 1064, 1062, 1071, 1071, 1087, 1076, 1085, 1086, 1078,
     1092, 1089, 2016, 1090, 1095, 2016, 1081, 1073, 1083, 1137,
     1083, 1088, 1098, 1120, 1085, 2016, 1090, 2016, 1087, 1107,
     1132, 1129, 1087, 2016, 1150, 1106, 1098, 1158, 1098, 1101,
     1113, 1114, 1154, 1122, 1121, 1108, 1112, 1126, 1110, 1151,
     1119, 1171, 1132, 1124, 1143, 1122, 1134, 2016, 1125, 1159,
     1124, 1129, 1130, 1120, 1137, 1142, 1139, 1130, 1149, 1133,

     1136, 2016, 1138, 1139, 1196, 2016, 1149, 1150, 1159, 1146,
     1197, 1162, 1201, 1160, 1165, 1147, 1159, 1145, 1151, 2016,
     1152, 1179, 1149, 1170, 1213, 1156, 1160, 1174, 1186, 1187,
     1166, 1168, 1221, 1170, 1181, 1168, 1173, 1184, 1176, 1170,
     1191, 1178, 1174, 1181, 1181, 1177, 2016, 1204, 1181, 1185,
     1198, 1186, 1209, 1189, 1180, 1190, 1244, 2016, 1192, 1194,
     1206, 1186, 1187, 1208, 1200, 2016, 1201, 1222, 1212, 1197,
     1256, 1238, 1205, 1202, 1209, 1215, 2016, 1207, 1217, 1202,
     1219, 1211, 1250, 1213, 1207, 1215, 1218, 1230, 2016, 1242,
     1216, 1262, 1223, 1224, 1278, 1248, 1259, 1219, 1251, 1230,

     2016, 1229, 1254, 1241, 1295, 1236, 1245, 1242, 1242, 1240,
     1266, 1237, 1257, 1247, 1270, 1260, 1303, 1242, 1252, 1267,
     1266, 1267, 2016, 1248, 1260, 1261, 1251, 1261, 1253, 1285,
     1265, 1256, 1267, 1324, 2016, 1272, 1321, 1274, 1284, 1275,
     1266, 1276, 1274, 1289, 1270, 1333, 2016, 1281, 1305, 1280,
     1338, 1339, 1287, 1310, 1311, 1290, 1302, 1292, 1284, 1289,
     1295, 1298, 2016, 1344, 1355, 1354, 1304, 1303, 1302, 1302,
     1359, 1307, 2016, 1319, 1300, 1317, 2016, 2016, 1322, 1304,
     1305, 1326, 1369, 1328, 1318, 1319, 1331, 1378, 1373, 1382,
     2016, 2016, 1367, 1340, 1341, 1338, 2016, 1343, 1386, 1334,

     1336, 1390, 1338, 1340, 1394, 2016, 1395, 1354, 1366, 1398,
     1403, 2016, 1398, 1351, 1404, 1349, 1354, 1407, 2016, 1366,
     1358, 2016, 1368, 1369, 2016, 2016, 1412, 1351, 2016, 1410,
     1364, 2016, 1361, 1367, 2016, 1419, 1401, 1421, 1422, 2016,
     1370, 1421, 1376, 1380, 1396, 2016, 1373, 2016, 2016, 1387,
     1395, 1389, 1380, 1371, 1382, 1435, 1411, 1399, 1387, 1386,
     1382, 2016, 1417, 1391, 1412, 1402, 1392, 1416, 1430, 1386,
     1449, 1419, 1411, 1391, 1400, 2016, 1392, 1410, 1403, 1415,
     1405, 1417, 1405, 1461, 1420, 1413, 1422, 2016, 1465, 1428,
     1411, 2016, 1467, 1413, 1424, 1425, 1421, 1421, 1418, 1424,

     1419, 1446, 1440, 1417, 1429, 1428, 1442, 1441, 1442, 1485,
     1486, 2016, 2016, 2016, 1492, 1496, 1500, 1504, 1508, 1512,
     1515
    } ;

static yyconst flex_int16_t yy_def[1622] =
    {   0,
     1615, 1615, 1616, 1616, 1617, 1617, 1618, 1618, 1614, 1614,
     1614, 1614, 1619, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1620, 1614, 1621, 1614, 1621, 1614, 1614, 1614, 1614,
     1619,   14, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1620, 1621,
     1614, 1621, 1614, 1614, 1614,   34, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,

     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614,    0, 1614, 1614, 1614, 1614, 1614, 1614,
     1614
    } ;

static yyconst flex_int16_t yy_nxt[2085] =
    {   0,
     1614,   11,   12,   11, 1614,   13,   11,   12,   11,   20,
       13,   20, 1614,   21,   14,   21,   15,   16, 1614,   14,
     1614,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1614,   27,   85,   86,   27,
     1614,  187,   29, 1614, 1614,   29,  187,   17,   61,   61,
       61,  808,   17, 1614,   95,   56,   61,   62,   62,   87,
       88,   57,   28,   28,   28,   90,   18,   91,   97,   99,
      105,   18,  103,  107,   96,   29,  108,   61,   61,   61,
      100,  146,  104,  101,   98,  106,  102,   61,   62,   62,
      127,  147,  128,  138,   30,  148,  188,   30,   32,   32,

       32,   33,  118,  118,  118,   34,  132,  132,  132,  254,
      149,  119,  120,  139,   35,   36,   37,  121,   38,   39,
      140,  133,  809,   40,   41,   42,   43,   30,   44,   45,
       46,   47,   48,   49,  732,   50,  141,   51,   52,   53,
       66,   66,   66,  810,  122,  122,  122,  129,  129,  129,
      182,  733,  150,  123,  124,  151,  183,   67,   68,  125,
       69,   70,  130,  222,  811,   71,   72,   73,   74,  223,
       75,   76,   77,   78,   79,   80,  142,   81,  172,   82,
       83,   84,  134,  134,  134,  174,  212,  143,  173,  812,
      144,  813,  816,  145,  131,  175,  213,  135,  153,  153,

      153,  156,  156,  156,  158,  158,  158,  118,  118,  118,
      191,  191,  191,  154,  214,  155,  157,  817,  229,  159,
      249,  160,  121,  230,  215,  192,  193,  193,  193,  122,
      122,  122,  136,  195,  195,  195,  197,  197,  197,  283,
      250,  194,  818,  819,  125,  129,  129,  129,  196,  231,
      820,  198,  202,  202,  202,  132,  132,  132,  821,  284,
      130,  134,  134,  134,  153,  153,  153,  203,  256,  666,
      133,  156,  156,  156,  257,  667,  135,  822,  825,  154,
      158,  158,  158,  191,  191,  191,  157,  193,  193,  193,
      195,  195,  195,  370,  826,  159,  827,  371,  192,  197,

      197,  197,  194,  828,  261,  196,  202,  202,  202,  262,
      281,  281,  281,  402,  198,  829,  298,  403,  669,  299,
      300,  203,  670,  675,  301,  282,  322,  322,  322,  330,
      330,  330,  302,  676,  336,  263,  303,  337,  338,  830,
      831,  323,  339,  677,  331,  349,  349,  349,  679,  678,
      340,  324,  832,  714,  341,  351,  351,  351,  680,  715,
      350,  281,  281,  281,  322,  322,  322,  330,  330,  330,
      352,  408,  408,  408,  681,  765,  282,  833,  682,  323,
      834,  766,  331,  349,  349,  349,  409,  351,  351,  351,
      419,  419,  419,  421,  421,  421,  688,  690,  350,  453,

      453,  453,  352,  746,  835,  420,  689,  691,  422,  461,
      461,  461,  836,  747,  454,  469,  469,  469,  408,  408,
      408,  419,  419,  419,  462,  421,  421,  421,  837,  823,
      470,  838,  839,  409,  824,  840,  420,  504,  504,  504,
      422,  509,  509,  509,  453,  453,  453,  513,  513,  513,
      841,  505,  461,  461,  461,  510,  469,  469,  469,  454,
      842,  843,  514,  534,  534,  534,  844,  462,  504,  504,
      504,  470,  555,  555,  555,  509,  509,  509,  535,  558,
      558,  558,  505,  559,  845,  846,  556,  847,  848,  510,
      513,  513,  513,  564,  564,  564,  568,  568,  568,  574,

      574,  574,  579,  579,  579,  514,  849,  850,  565,  851,
      852,  569,  853,  854,  575,  855,  814,  580,  534,  534,
      534,  585,  585,  585,  555,  555,  555,  603,  603,  603,
      815,  604,  856,  535,  692,  857,  586,  858,  556,  558,
      558,  558,  693,  559,  606,  607,  608,  609,  610,  611,
      612,  694,  613,  859,  860,  614,  615,  616,  617,  618,
      619,  620,  621,  622,  623,  624,  564,  564,  564,  568,
      568,  568,  574,  574,  574,  579,  579,  579,  639,  639,
      639,  565,  861,  862,  569,  863,  864,  575,  865,  866,
      580,  867,  870,  640,  642,  642,  642,  585,  585,  585,

      658,  658,  658,  603,  603,  603,  662,  604,  683,  643,
      871,  868,  586,  872,  659,  869,  873,  663,  874,  684,
      875,  664,  685,  665,  876,  686,  877,  878,  687,  704,
      704,  704,  639,  639,  639,  642,  642,  642,  658,  658,
      658,  763,  763,  763,  705,  879,  880,  640,  881,  883,
      643,  882,  659,  767,  767,  767,  764,  769,  769,  769,
      704,  704,  704,  775,  775,  775,  884,  885,  768,  777,
      777,  777,  770,  886,  887,  705,  888,  889,  776,  780,
      780,  780,  892,  893,  778,  763,  763,  763,  767,  767,
      767,  769,  769,  769,  781,  775,  775,  775,  894,  890,

      764,  895,  896,  768,  891,  897,  770,  777,  777,  777,
      776,  780,  780,  780,  898,  899,  900,  900,  900,  902,
      903,  904,  778,  905,  908,  909,  781,  906,  906,  906,
      910,  901,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  907,  921,  922,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  933,  934,  935,  936,  937,
      938,  939,  940,  941,  942,  943,  944,  945,  946,  947,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  961,  962,  900,  900,  900,  963,  964,
      965,  966,  906,  906,  906,  967,  967,  967,  969,  970,

      901,  971,  972,  973,  974,  976,  977,  907,  978,  975,
      968,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,
      998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
     1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1021, 1021, 1023, 1024, 1024, 1024,
     1026, 1026, 1026, 1028,  967,  967,  967, 1029, 1022, 1030,
     1031, 1032, 1025, 1033, 1034, 1027, 1035, 1036, 1037,  968,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1050, 1051, 1052, 1049, 1053, 1054, 1055, 1056, 1057,

     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068,
     1069, 1070, 1071, 1072, 1073, 1067, 1074, 1075, 1076, 1077,
     1078, 1079, 1080, 1081, 1021, 1021, 1021, 1082, 1024, 1024,
     1024, 1026, 1026, 1026, 1083, 1084, 1085, 1086, 1087, 1022,
     1088, 1089, 1090, 1025, 1091, 1092, 1027, 1093, 1094, 1095,
     1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126,
     1127, 1128, 1129, 1130, 1131, 1125, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,

     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
     1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
     1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
     1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,

     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
     1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1296, 1297,
     1298, 1299, 1293, 1300, 1301, 1302, 1294, 1303, 1304, 1305,
     1305, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1317, 1318, 1306, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1305, 1305, 1305,

     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1306, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1422, 1423, 1424, 1425, 1428, 1429, 1430, 1431,
     1432, 1426, 1433, 1436, 1437, 1427, 1434, 1434, 1434, 1438,

     1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
     1449, 1435, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
     1458, 1459, 1460, 1461, 1462, 1434, 1434, 1434, 1463, 1464,
     1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
     1435, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
     1484, 1485, 1486, 1487, 1488, 1489, 1490, 1490, 1490, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1491, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
     1511, 1511, 1513, 1490, 1490, 1490, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1512, 1522, 1523, 1491, 1524, 1525,

     1526, 1527, 1528, 1529, 1511, 1511, 1511, 1530, 1531, 1532,
     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1512,
     1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
     1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
     1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
     1612, 1613,   10,   10,   10,   10,   19,   19,   19,   19,

       22,   22,   22,   22,   24,   24,   24,   24,   31,   31,
      807,   31,   59,   59,   59,   60,  806,   60,  805,  804,
      803,  802,  801,  800,  799,  798,  797,  796,  795,  794,
      793,  792,  791,  790,  789,  788,  787,  786,  785,  784,
      783,  782,  779,  774,  773,  772,  771,  762,  761,  760,
      759,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  745,  744,  743,  742,  741,  740,  739,  738,
      737,  736,  735,  734,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      713,  712,  711,  710,  709,  708,  707,  706,  703,  702,

      701,  700,  699,  698,  697,  696,  695,  674,  673,  672,
      671,  668,  661,  660,  657,  656,  655,  654,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  641,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  605,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      584,  583,  582,  581,  578,  577,  576,  573,  572,  571,
      570,  567,  566,  563,  562,  561,  560,  557,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  533,  532,  531,

      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  512,  511,  508,  507,
      506,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  468,  467,  466,  465,  464,  463,
      460,  459,  458,  457,  456,  455,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  418,  417,  416,  415,

      414,  413,  412,  411,  410,  407,  406,  405,  404,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  348,  347,  346,  345,
      344,  343,  342,  335,  334,  333,  332,  329,  328,  327,
      326,  325,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,

      287,  286,  285,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      260,  259,  258,  257,  255,  253,  252,  251,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  228,  227,  226,  225,  224,
      221,  220,  219,  218,  217,  216,  211,  210,  209,  208,
      207,  206,  205,  204,  201,  200,  199,  190,  189,  186,
      185,  184,  181,  180,  179,  178,  177,  176,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  152,
      137,  126,  117,  116,  115,  114,  113,  112,  111,  110,

      109,   94,   93,   92,   89,   65,   64,   63,   33,   58,
       55,   54, 1614,   23,   23,    9, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614
    } ;

static yyconst flex_int16_t yy_chk[2085] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,   36,   36,    8,
       32,  113,   11,    0,   32,   12,  187,    1,   25,   25,
       25,  738,    2,   32,   44,   18,   26,   26,   26,   37,
       37,   18,   28,   28,   28,   39,    1,   39,   45,   46,
       48,    2,   47,   49,   44,   28,   49,   61,   61,   61,
       46,   78,   47,   46,   45,   48,   46,   62,   62,   62,
       70,   78,   70,   75,   11,   79,  113,   12,   14,   14,

       14,   14,   67,   67,   67,   14,   72,   72,   72,  187,
       79,   67,   67,   75,   14,   14,   14,   67,   14,   14,
       76,   72,  739,   14,   14,   14,   14,   28,   14,   14,
       14,   14,   14,   14,  669,   14,   76,   14,   14,   14,
       34,   34,   34,  740,   68,   68,   68,   71,   71,   71,
      109,  669,   80,   68,   68,   80,  109,   34,   34,   68,
       34,   34,   71,  152,  741,   34,   34,   34,   34,  152,
       34,   34,   34,   34,   34,   34,   77,   34,  101,   34,
       34,   34,   73,   73,   73,  102,  144,   77,  101,  742,
       77,  743,  745,   77,   71,  102,  144,   73,   82,   82,

       82,   83,   83,   83,   84,   84,   84,  118,  118,  118,
      119,  119,  119,   82,  145,   82,   83,  746,  164,   84,
      183,   84,  118,  164,  145,  119,  120,  120,  120,  122,
      122,  122,   73,  123,  123,  123,  124,  124,  124,  223,
      183,  120,  747,  748,  122,  129,  129,  129,  123,  164,
      749,  124,  131,  131,  131,  132,  132,  132,  750,  223,
      129,  134,  134,  134,  153,  153,  153,  131,  189,  607,
      132,  156,  156,  156,  189,  607,  134,  751,  753,  153,
      158,  158,  158,  191,  191,  191,  156,  193,  193,  193,
      195,  195,  195,  299,  754,  158,  755,  299,  191,  197,

      197,  197,  193,  756,  204,  195,  202,  202,  202,  204,
      222,  222,  222,  337,  197,  757,  238,  337,  609,  238,
      238,  202,  609,  614,  238,  222,  259,  259,  259,  265,
      265,  265,  238,  614,  270,  204,  238,  270,  270,  758,
      759,  259,  270,  615,  265,  278,  278,  278,  616,  615,
      270,  259,  760,  645,  270,  279,  279,  279,  616,  645,
      278,  281,  281,  281,  322,  322,  322,  330,  330,  330,
      279,  342,  342,  342,  617,  699,  281,  761,  617,  322,
      761,  699,  330,  349,  349,  349,  342,  351,  351,  351,
      356,  356,  356,  357,  357,  357,  619,  620,  349,  391,

      391,  391,  351,  682,  762,  356,  619,  620,  357,  398,
      398,  398,  765,  682,  391,  405,  405,  405,  408,  408,
      408,  419,  419,  419,  398,  421,  421,  421,  766,  752,
      405,  771,  772,  408,  752,  773,  419,  447,  447,  447,
      421,  451,  451,  451,  453,  453,  453,  456,  456,  456,
      774,  447,  461,  461,  461,  451,  469,  469,  469,  453,
      779,  782,  456,  480,  480,  480,  783,  461,  504,  504,
      504,  469,  507,  507,  507,  509,  509,  509,  480,  510,
      510,  510,  504,  510,  784,  785,  507,  787,  788,  509,
      513,  513,  513,  517,  517,  517,  520,  520,  520,  525,

      525,  525,  529,  529,  529,  513,  789,  790,  517,  792,
      793,  520,  794,  795,  525,  796,  744,  529,  534,  534,
      534,  536,  536,  536,  555,  555,  555,  556,  556,  556,
      744,  556,  797,  534,  621,  798,  536,  799,  555,  558,
      558,  558,  621,  558,  559,  559,  559,  559,  559,  559,
      559,  621,  559,  800,  801,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  564,  564,  564,  568,
      568,  568,  574,  574,  574,  579,  579,  579,  582,  582,
      582,  564,  802,  803,  568,  804,  805,  574,  806,  807,
      579,  808,  810,  582,  584,  584,  584,  585,  585,  585,

      602,  602,  602,  603,  603,  603,  606,  603,  618,  584,
      811,  809,  585,  812,  602,  809,  813,  606,  814,  618,
      815,  606,  618,  606,  816,  618,  817,  818,  618,  631,
      631,  631,  639,  639,  639,  642,  642,  642,  658,  658,
      658,  698,  698,  698,  631,  819,  820,  639,  821,  822,
      642,  821,  658,  700,  700,  700,  698,  701,  701,  701,
      704,  704,  704,  708,  708,  708,  823,  824,  700,  709,
      709,  709,  701,  825,  826,  704,  827,  828,  708,  711,
      711,  711,  830,  831,  709,  763,  763,  763,  767,  767,
      767,  769,  769,  769,  711,  775,  775,  775,  832,  829,

      763,  833,  834,  767,  829,  835,  769,  777,  777,  777,
      775,  780,  780,  780,  836,  837,  838,  838,  838,  839,
      840,  841,  777,  842,  844,  845,  780,  843,  843,  843,
      846,  838,  847,  848,  849,  850,  852,  853,  854,  855,
      856,  857,  843,  858,  859,  860,  861,  862,  863,  864,
      865,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  878,  879,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  899,  900,  900,  900,  902,  903,
      904,  905,  906,  906,  906,  908,  908,  908,  909,  911,

      900,  914,  915,  916,  917,  918,  919,  906,  920,  917,
      908,  921,  921,  922,  923,  924,  925,  926,  927,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  960,  961,  962,  962,  962,  963,  964,  964,  964,
      965,  965,  965,  966,  967,  967,  967,  969,  962,  970,
      971,  972,  964,  973,  974,  965,  975,  976,  977,  967,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  988,  992,  993,  994,  995,  996,

      997,  998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
     1008, 1009, 1010, 1011, 1012, 1006, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1021, 1021, 1023, 1024, 1024,
     1024, 1026, 1026, 1026, 1028, 1029, 1030, 1031, 1032, 1021,
     1033, 1034, 1035, 1024, 1037, 1038, 1026, 1039, 1040, 1041,
     1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1073, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,

     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
     1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1153, 1154, 1155, 1156, 1157, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
     1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,

     1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1259,
     1260, 1261, 1254, 1262, 1263, 1265, 1254, 1266, 1267, 1268,
     1268, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
     1277, 1278, 1279, 1280, 1268, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
     1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1305, 1305,

     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1305, 1319, 1321, 1322, 1323, 1324, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
     1359, 1360, 1361, 1362, 1363, 1364, 1365, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391,
     1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1402,
     1403, 1397, 1404, 1406, 1407, 1397, 1405, 1405, 1405, 1408,

     1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1419, 1405, 1420, 1421, 1422, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1434, 1434, 1436, 1437,
     1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1448,
     1434, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
     1458, 1459, 1460, 1461, 1462, 1464, 1465, 1465, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1474, 1475, 1476, 1479,
     1465, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1488, 1488, 1489, 1490, 1490, 1490, 1493, 1494, 1495, 1496,
     1498, 1499, 1500, 1501, 1488, 1502, 1503, 1490, 1504, 1505,

     1507, 1508, 1509, 1510, 1511, 1511, 1511, 1513, 1514, 1515,
     1516, 1517, 1518, 1520, 1521, 1523, 1524, 1527, 1528, 1511,
     1530, 1531, 1533, 1534, 1536, 1537, 1538, 1539, 1541, 1542,
     1543, 1544, 1545, 1547, 1550, 1551, 1552, 1553, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1561, 1563, 1564, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1577,
     1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
     1589, 1590, 1591, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
     1610, 1611, 1615, 1615, 1615, 1615, 1616, 1616, 1616, 1616,

     1617, 1617, 1617, 1617, 1618, 1618, 1618, 1618, 1619, 1619,
      737, 1619, 1620, 1620, 1620, 1621,  736, 1621,  735,  734,
      733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      723,  722,  721,  720,  719,  718,  717,  716,  715,  714,
      713,  712,  710,  707,  706,  703,  702,  697,  696,  695,
      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  657,  656,  654,  651,  650,  649,  648,
      641,  638,  637,  636,  635,  634,  633,  632,  630,  629,

      628,  627,  626,  625,  624,  623,  622,  613,  612,  611,
      610,  608,  605,  604,  601,  600,  599,  598,  597,  596,
      595,  594,  592,  591,  590,  589,  588,  587,  583,  581,
      578,  577,  576,  573,  572,  571,  570,  567,  566,  563,
      562,  561,  560,  557,  554,  552,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      533,  532,  531,  530,  528,  527,  526,  524,  523,  522,
      521,  519,  518,  516,  515,  512,  511,  508,  506,  502,
      501,  500,  499,  497,  496,  495,  493,  492,  491,  490,
      488,  487,  485,  484,  483,  482,  481,  479,  478,  477,

      476,  475,  474,  473,  472,  471,  468,  467,  466,  465,
      464,  463,  460,  459,  458,  457,  455,  452,  450,  449,
      448,  446,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  424,  423,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  407,  406,  404,  403,  402,  401,  400,  399,
      397,  396,  395,  394,  393,  392,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  372,  371,  370,  369,  368,  367,  365,
      364,  363,  362,  361,  360,  358,  355,  354,  353,  348,

      347,  346,  345,  344,  343,  341,  340,  339,  338,  336,
      335,  334,  333,  332,  329,  328,  327,  326,  325,  324,
      321,  320,  319,  318,  317,  316,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  303,  302,  301,  300,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  280,  277,  276,  275,  274,
      273,  272,  271,  269,  268,  267,  266,  264,  263,  262,
      261,  260,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  245,  244,  243,  242,  241,  240,  239,
      237,  236,  235,  234,  232,  231,  230,  229,  228,  227,

      226,  225,  224,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      201,  200,  199,  190,  188,  186,  185,  184,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  163,  162,  161,  160,  155,
      151,  150,  149,  148,  147,  146,  143,  142,  141,  140,
      139,  138,  137,  136,  128,  127,  126,  116,  114,  112,
      111,  110,  108,  107,  106,  105,  104,  103,  100,   99,
       98,   97,   96,   95,   94,   93,   91,   90,   89,   81,
       74,   69,   65,   63,   58,   57,   56,   55,   53,   51,

       50,   43,   42,   40,   38,   33,   31,   30,   29,   21,
       17,   16,    9,    6,    5, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#ifdef OWL
#include "owlKittingPlanClasses.hh"
#else
#include "kittingPlanClasses.hh" // for classes referenced in kittingPlanYACC.hh
#endif
#include "kittingPlanYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1615 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2016 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return A1END;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return A1START;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return A2END;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return A2START;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return AEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return ASTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return B1END;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return B1START;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return B2END;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return B2START;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return BEND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return BSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return ELSEIFEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return ELSEIFSTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return ELSEEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return ELSESTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERNAMEEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERNAMESTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMEEND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMESTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return IFEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return IFSTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return KITNAMEEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return KITNAMESTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYNAMEEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYNAMESTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGPLANEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGPLANSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return LOCATIONEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return LOCATIONSTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return NUMBEROFSTEPSEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return NUMBEROFSTEPSSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return PARTNAMEEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return PARTNAMESTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return PLANAUTHOREND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return PLANAUTHORSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return PLANDATEANDTIMEEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return PLANDATEANDTIMESTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return PLANDESCRIPTIONEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return PLANDESCRIPTIONSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return PLANELEMENTEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return PLANELEMENTSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return PLANIDEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return PLANIDSTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return PLANROOTEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return PLANROOTSTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return PLANVERSIONEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return PLANVERSIONSTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return PREDECESSOREND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return PREDECESSORSTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return PROPERTYEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return PROPERTYSTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMEEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMESTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTNAMEEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTNAMESTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return SEQUENCENUMBEREND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return SEQUENCENUMBERSTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return STEPEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return STEPSTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return TESTEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return TESTSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return THINGNAMEEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return THINGNAMESTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return VALEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return VALSTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return VARNAMEEND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return VARNAMESTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return VARIABLEEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return VARIABLESTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ ECH; return ACTIONBASETYPEDECL; }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ ECH; return ACTIONGROUPBASETYPEDECL; }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ ECH; return ANDTYPEDECL; }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ ECH; return ARITHMETICCOMPARISONBOOLEANEXPRESSIONTYPEDECL; }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ ECH; return ATTACHENDEFFECTORTYPEDECL; }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ ECH; return BINARYARITHMETICEXPRESSIONTYPEDECL; }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ ECH; return BINARYBOOLEANEXPRESSIONTYPEDECL; }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ ECH; return BOOLEANCONSTANTTYPEDECL; }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ ECH; return CREATEKITTYPEDECL; }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ ECH; return DECIMALTYPEDECL; }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ ECH; return DETACHENDEFFECTORTYPEDECL; }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ ECH; return DIVTYPEDECL; }
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ ECH; return EQUALTYPEDECL; }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ ECH; return FALSETYPEDECL; }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ ECH; return GREATEROREQUALTYPEDECL; }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ ECH; return GREATERTYPEDECL; }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ ECH; return IFACTIONGROUPTYPEDECL; }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ ECH; return LESSOREQUALTYPEDECL; }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ ECH; return LESSTYPEDECL; }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ ECH; return LOCATEPARTTYPEDECL; }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ ECH; return MINUSTYPEDECL; }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ ECH; return MODTYPEDECL; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ ECH; return NEGATETYPEDECL; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ ECH; return NOTEQUALTYPEDECL; }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ ECH; return NOTTYPEDECL; }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ ECH; return ONEOFACTIONGROUPTYPEDECL; }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ ECH; return ORTYPEDECL; }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ ECH; return ORDEREDACTIONGROUPTYPEDECL; }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ ECH; return PARTIALLYORDEREDACTIONGROUPTYPEDECL; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ ECH; return PLUSTYPEDECL; }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONINTYPEDECL; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONONTYPEDECL; }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONTYPEDECL; }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ ECH; return POSEONLYLOCATIONTYPEDECL; }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ ECH; return PROPVALTYPEDECL; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ ECH; return PUTKITTRAYTYPEDECL; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ ECH; return PUTKITTYPEDECL; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ ECH; return PUTPARTTYPEDECL; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONINTYPEDECL; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONONTYPEDECL; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONTYPEDECL; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ ECH; return ROBOTACTIONBASETYPEDECL; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ ECH; return SENSORACTIONBASETYPEDECL; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ ECH; return SOMEOFACTIONGROUPTYPEDECL; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ ECH; return TAKEKITTRAYTYPEDECL; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{ ECH; return TAKEKITTYPEDECL; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ ECH; return TAKEPARTTYPEDECL; }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ ECH; return TIMESTYPEDECL; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{ ECH; return TRUETYPEDECL; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{ ECH; return UNORDEREDACTIONGROUPTYPEDECL; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ ECH; return VARSETTYPEDECL; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{ ECH; return VARVALTYPEDECL; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{ ECH; return WHILEACTIONGROUPTYPEDECL; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 166:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yytext[first] != '"'; first++);
                            first++;
                            for (n = first; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 169:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 170:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1615 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1615 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1614);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

