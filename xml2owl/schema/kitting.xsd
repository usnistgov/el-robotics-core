<?xml version="1.0" encoding="UTF-8"?>

<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="urn:kitting"
  targetNamespace="urn:kitting"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="2013Jan10C">

  <xs:element name="KittingWorkstation"
    type="KittingWorkstationType">
    <xs:annotation>
      <xs:documentation>Root element</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:annotation>
    <xs:documentation>
      This is an XML schema for kitting classes. It has the same semantic
      content as the December 20, 2012 version of the kitting.xsd file
      except that
      1. InternalShapeType was added, derived from ShapeDesignType.

      2. Two optional elements were added to SolidObjectType
         - InternalShape of InternalShapeType
         - ExternalShape of ExternalShapeType

      3. BoxyObjectType was removed from the model.

      4. BoxyShapeType is now derived from InternalShapeType rather than
         from ShapeDesignType.

      5. A HeldObject element of SolidObjectType was added to
         EndEffectorType.

      6. A Base element (the physical base of the changing station) was
         added to the EndEffectorChangingStationType.

      7. A GraspPose element was added to ShapeDesignType.

      8. Documentation was changed or added in several places.

      One effect of the changes described above is that there are now
      four ways to specify the shape of a SolidObjectType:
        - by an internal shape element
        - by an external shape element
        - by having a stock keeping unit name element (some derived types
          of SolidObjectType have that)
        - by being entirely composed of objects that have shape and are
          the values of elements of the object.
    </xs:documentation>
    <xs:documentation>
      This file has the same semantic content as the 2013Jan10 version of
      kittingClasses.owl. In OWL, all objects are declared at the top
      level; there is no hierarchy. In files conforming to an XML schema,
      all class instances must occur in a hierarchy descending from a root
      object. Some SolidObjectTypes, such as a robot, are elements of the
      KittingWorkstationType. Those SolidObjectTypes that are not elements
      of the KittingWorkstationType are attached (directly or through a
      chain of connections) to an element of the KittingWorkstationType.
      One of the elements is named Object and is a place for attaching
      those SolidObjectTypes that are not otherwise attached.
    </xs:documentation>
    <xs:documentation>
      There are two complexTypes, DataThingType and SolidObjectType,
      from which all other complexTypes are derived.
    </xs:documentation>
    <xs:documentation>
      One of the purposes of this schema is to support an application
      that writes kitting instance files. Hence, the things defined
      here have been designed with the intention of enabling that
      support.
    </xs:documentation>
  </xs:annotation>

  <xs:simpleType name="AngleUnitType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="degree"/>
      <xs:enumeration value="radian"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="BoxVolumeType">
    <xs:annotation>
      <xs:documentation>
        A BoxVolumeType has a Name element inherited from DataThingType. It
        also has MaximumPoint and MinimumPoint elements. These are
        diagonally opposite corner points of a box shaped volume whose
        edges are aligned with the coordinate system in which the
        BoxVolumeType is located. The MinimumPoint has the minimum values
        of X, Y, and Z. The MaximumPoint has the maximum values of X, Y,
        and Z.
       </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="MaximumPoint"
            type="PointType"/>
          <xs:element name="MinimumPoint"
            type="PointType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BoxyShapeType">
    <xs:annotation>
      <xs:documentation>
        A BoxyShapeType is an InternalShapeType that is box shaped. It has
        a Name, Description, and GraspPose elements inherited from
        InternalShapeType. It also has Length, Width, Height, and HasTop
        elements. The length is larger of the two dimensions that are not
        the height. The width is smaller of the two dimensions that are not
        the height. The coordinate system of a BoxyShapeType (i.e. the
        thing that is located and oriented by a pose) has its origin in the
        middle of the bottom, its Z-axis parallel to the height sides, and
        its X-axis parallel to the length sides. If HasTop is true, the top
        of the box (i.e. the side through which the +Z axis passes) exists
        and is closed. If HasTop is false, the box has no top.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="InternalShapeType">
        <xs:sequence>
          <xs:element name="Length"
            type="PositiveDecimalType"/>
          <xs:element name="Width"
            type="PositiveDecimalType"/>
          <xs:element name="Height"
            type="PositiveDecimalType"/>
          <xs:element name="HasTop"
            type="xs:boolean"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataThingType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A DataThing includes all complex data types such as Vector,
        PhysicalLocation, etc. A DataThing has a Name to make it easy
        to reference when generating OWL. Names are of type xs:ID so that
        all names must be unique. Names also must not be the same as Ids.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Name"
        type="xs:ID"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="EndEffectorType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        An EndEffectorType is a SolidObjectType. It is an end effector for
        a robot. It has Name, PrimaryLocation, SecondaryLocation,
        InternalShape, and ExternalShape elements inherited from
        SolidObjectType. An EndEffectorType also has Description, Weight,
        MaximumLoadWeight, and HeldObject elements. The optional HeldObject
        element is for the object being held by the end effector, if the
        end effector is holding an object. Every EndEffectorType is either
        a GripperEffectorType or a VacuumEffectorType. Every
        EndEffectorType in a KittingWorkstation is either attached to the
        end of a robot arm or sitting in an EndEffectorHolderType at an
        EndEffectorChangingStationType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="Description"
            type="xs:string"/>
          <xs:element name="Weight"
            type="PositiveDecimalType"/>
          <xs:element name="MaximumLoadWeight"
            type="PositiveDecimalType"/>
          <xs:element name="HeldObject"
            type="SolidObjectType"
            minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="EndEffectorChangingStationType">
    <xs:annotation>
      <xs:documentation>
        An EndEffectorChangingStationType is a SolidObjectType. It has
        Name, PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also has
        a Base element and one to many EndEffectorHolders elements. It is a
        place where end effectors are stored and where the robot can change
        end effectors. The coordinate system of an
        EndEffectorChangingStationType is in the same place as the
        coordinate system of its Base. The shape of an
        EndEffectorChangingStationType may also be found from the shapes of
        the Base and the EndEffectorHolders and their relative positions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="Base"
            type="MechanicalComponentType"/>
          <xs:element name="EndEffectorHolders"
            type="EndEffectorHolderType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="EndEffectorHolderType">
    <xs:annotation>
      <xs:documentation>
        An EndEffectorHolderType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also
        has zero or one EndEffectorType element. An EndEffectorHolderType
        is part of an EndEffectorChangingStationType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="EndEffector"
            type="EndEffectorType"
            minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExternalShapeType">
    <xs:annotation>
      <xs:documentation>
        An ExternalShapeType is a ShapeDesignType whose shape is defined in
        an external file. It has Name, Description, and GraspPose elements
        inherited from ShapeDesignType. It also has ModelTypeName,
        ModelFileName, and ModelName elements. ModelTypeName is the name of
        the type of model (for example, 'STEP Advanced Brep' or 'USARSim').
        ModelFileName is the name of the file containing the model and may
        include a path (for example 'partFiles/STEP/ANC101.stp'). The model
        file may contain more than one shape model. The ModelName is
        optional and is the name of a model within the model file. The
        ModelName is necessary if the model file contains more than one
        model.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ShapeDesignType">
        <xs:sequence>
          <xs:element name="ModelTypeName"
            type="xs:string"/>
          <xs:element name="ModelFileName"
            type="xs:string"/>
          <xs:element name="ModelName"
            type="xs:string"
            minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GripperEffectorType">
    <xs:annotation>
      <xs:documentation>
        A GripperEffectorType is an EndEffectorType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, ExternalShape,
        Description, Weight, and MaximumLoadWeight elements inherited from
        EndEffectorType. A GripperEffectorType holds an object by gripping
        it with fingers or claws or by suction.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EndEffectorType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InternalShapeType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        An InternalShapeType is an abstract type derived from
        ShapeDesignType from which more specific types of shape are
        derived. It has Name, Description, and GraspPose elements inherited
        from ShapeDesignType. Instances of InternalShapeType in a data file
        conforming to this schema contain information about the appearance
        of the shape without referring to another file.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ShapeDesignType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KitType">
    <xs:annotation>
      <xs:documentation>
        A KitType is a SolidObjectType. It has Name, PrimaryLocation,
        SecondaryLocation, InternalShape, and ExternalShape elements
        inherited from SolidObjectType. A KitType also has DesignName,
        Tray, and Finished elements and zero to many Part elements.
        Finished is a boolean indicator of whether the Kit is finished. The
        Part element may occur several times (once for each part in the
        kit). The locating point of the Tray in the kit should be (0,0,0),
        and its X and Z axes should be (1,0,0) and (0,0,1), respectively.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="DesignName"
            type="xs:IDREF"/>
          <xs:element name="Tray"
            type="KitTrayType"/>
          <xs:element name="Part"
            type="PartType"
            minOccurs="0"
            maxOccurs="unbounded"/>
          <xs:element name="Finished"
            type="xs:boolean"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KitDesignType">
    <xs:annotation>
      <xs:documentation>
        A KitDesignType is a DataThingType. A KitDesignType has a Name
        element inherited from DataThingType. It also has a KitTraySkuName
        element and one to many PartRefAndPose elements. The KitTraySkuName
        identifies a type of kit tray. The Pose in a PartRefAndPose is the
        location of the part relative to the coordinate system of the
        ShapeDesign of the tray.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="KitTraySkuName"
            type="xs:IDREF"/>
          <xs:element name="PartRefAndPose"
            type="PartRefAndPoseType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KittingWorkstationType">
    <xs:annotation>
      <xs:documentation>
        A KittingWorkstationType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also has
        AngleUnit, LengthUnit, WeightUnit, ChangingStation, one to many
        Object, one to many OtherObstacle, Robot, one to many KitDesign,
        one to many Sku, and WorkTable elements. All angle, length, and
        weight values related to the workstation use the units implicitly.
      </xs:documentation>
      <xs:documentation>
        Containers of various sorts enter and leave the workstation. The
        robot builds kits of parts by executing kitting plans as directed
        by a kitting plan execution system. The location of each instance
        of KittingWorkstation should be given relative to itself in order
        to end the chain of relative locations.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="AngleUnit"
            type="AngleUnitType"/>
          <xs:element name="ChangingStation"
            type="EndEffectorChangingStationType"/>
          <xs:element name="KitDesign"
            type="KitDesignType"
            maxOccurs="unbounded"/>
          <xs:element name="LengthUnit"
            type="LengthUnitType"/>
          <xs:element name="Object"
            type="SolidObjectType"
            maxOccurs="unbounded"/>
          <xs:element name="OtherObstacle"
            type="BoxVolumeType"
            minOccurs="0"
            maxOccurs="unbounded"/>
          <xs:element name="Robot"
            type="RobotType"/>
          <xs:element name="Sku"
            type="StockKeepingUnitType"
            maxOccurs="unbounded"/>
          <xs:element name="WeightUnit"
            type="WeightUnitType"/>
          <xs:element name="WorkTable"
            type="WorkTableType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KitTrayType">
    <xs:annotation>
      <xs:documentation>
        A KitTrayType is a SolidObjectType. It has Name, PrimaryLocation,
        SecondaryLocation, InternalShape, and ExternalShape elements
        inherited from SolidObjectType. It also has SkuName (the name of
        its SKU) and SerialNumber elements. The shape of the SKU should be
        a BoxyShape. A KitTrayType is designed to hold PartTypes with
        various SKUs in known positions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="SkuName"
            type="xs:IDREF"/>
          <xs:element name="SerialNumber"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LargeBoxWithEmptyKitTraysType">
    <xs:annotation>
      <xs:documentation>
	A LargeBoxWithEmptyKitTraysType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also has
        LargeContainer and zero to many KitTrays elements. The location
        point of the LargeContainer should be (0,0,0), its Z axis should be
        (0,0,1), and its X axis should be (1,0,0). The PrimaryLocation of a
        KitTray in a LargeBoxWithEmptyKitTrays should be given by a
        PoseLocationIn or RelativeLocationInType that is relative to the
        LargeContainer. The KitTrayTypes in a LargeBoxWithEmptyKitTraysType
        are intended to all be of the same SKU, although there is currently
        no formal requirement for that.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="LargeContainer"
            type="LargeContainerType"/>
          <xs:element name="KitTrays"
            type="KitTrayType"
            minOccurs="0"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LargeBoxWithKitsType">
    <xs:annotation>
      <xs:documentation>
	A LargeBoxWithKitsType is a SolidObjectType. It has Name,
	PrimaryLocation, SecondaryLocation, InternalShape, and
	ExternalShape elements inherited from SolidObjectType. It also has
	LargeContainer, zero to many Kit, KitDesignName, and Capacity
	elements. The coordinate system of a LargeBoxWithKits is in the
	same place as the coordinate system of its LargeContainer. The
	PrimaryLocation of the LargeContainer should be relative to the
	LargeBoxWithKitsType. The KitDesignName is an identifier for a
	KitDesignType. The PrimaryLocation of a Kit in a LargeBoxWithKits
	should be given by a PoseLocationIn or RelativeLocationInType that
	is relative to the LargeContainer. The Capacity is an
	xs:positiveInteger giving the maximum number of kits of the given
	design that can be held in the box. The KitTypes in a
	LargeBoxWithKitsType are intended to all be of the given design,
	but there is currently no formal constraint requiring that.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="LargeContainer"
            type="LargeContainerType"/>
          <xs:element name="Kit"
            type="KitType"
            minOccurs="0"
            maxOccurs="unbounded"/>
          <xs:element name="KitDesignName"
            type="xs:IDREF"/>
          <xs:element name="Capacity"
            type="xs:positiveInteger"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LargeContainerType">
    <xs:annotation>
      <xs:documentation>
        A LargeContainerType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also has
        SkuName and SerialNumber elements. The SkuName is the name of its
        SKU. The shape of the SKU should be a BoxyShape. A
        LargeContainerType can hold one or more instances of a single type
        of tray or bin. The single type may be (1) KitTrayType (2)
        PartsBinType (3) PartsTrayType (4) KitInstanceType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="SkuName"
            type="xs:IDREF"/>
          <xs:element name="SerialNumber"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="LengthUnitType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="meter"/>
      <xs:enumeration value="millimeter"/>
      <xs:enumeration value="inch"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="MechanicalComponentType">
    <xs:annotation>
      <xs:documentation>
        A MechanicalComponentType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. A
        MechanicalComponentType is a component of kitting workstation
        device such as a robot or an end effector changing station.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PartType">
    <xs:annotation>
      <xs:documentation>
        A PartType is a SolidObjectType. It has Name, PrimaryLocation,
        SecondaryLocation, InternalShape, and ExternalShape elements
        inherited from SolidObjectType. It also has SerialNumber and
        SkuName elements. The SkuName is the name of a StockKeepingUnit.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="SkuName"
            type="xs:IDREF"/>
          <xs:element name="SerialNumber"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PartRefAndPoseType">
    <xs:annotation>
      <xs:documentation>
	A PartRefAndPoseType is a DataThingType. It has a Name inherited
        from DataThingType. A PartRefAndPoseType also has SkuName, Point,
        ZAxis, and XAxis elements. The SkuName identifies a type of part.
        The Point specifies the location of the origin of the part in the
        coordinate system of the tray of the KitDesignType to which the
        PartRefAndPoseType belongs. The ZAxis and XAxis specify the
        orientation of the part relative to that coordinate system.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="SkuName"
            type="xs:IDREF"/>
          <xs:element name="Point"
            type="PointType"/>
          <xs:element name="XAxis"
            type="VectorType"/>
          <xs:element name="ZAxis"
            type="VectorType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PartsBinType">
    <xs:annotation>
      <xs:documentation>
        A PartsBinType is a SolidObjectType. It has Name, PrimaryLocation,
        SecondaryLocation, InternalShape, and ExternalShape elements
        inherited from SolidObjectType. It also has SkuName, SerialNumber,
        PartSkuName and PartQuantity elements. The SkuName is the name of
        the SKU for the PartsBinType. The shape of the SKU identified by
        the SkuName should be a BoxyShape. A PartsBinType holds a number of
        PartTypes (PartQuantity) with the same SKU name (PartSkuName) in
        unknown random positions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="SkuName"
            type="xs:IDREF"/>
          <xs:element name="SerialNumber"
            type="xs:NMTOKEN"/>
          <xs:element name="PartSkuName"
            type="xs:IDREF"/>
          <xs:element name="PartQuantity"
            type="xs:nonNegativeInteger"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PartsTrayType">
    <xs:annotation>
      <xs:documentation>
        A PartsTrayType is a SolidObjectType used to hold Parts. It has
        Name, PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also has
        SkuName and SerialNumber elements. The SkuName is the name of the
        SKU of the PartsTrayType, not the name of the SKU of a type of part
        the tray can hold. The shape of the SKU identified by the SkuName
        should be a BoxyShape.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="SkuName"
            type="xs:IDREF"/>
          <xs:element name="SerialNumber"
            type="xs:NMTOKEN"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PartsTrayWithPartsType">
    <xs:annotation>
      <xs:documentation>
        A PartsTrayWithPartsType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also has
        a PartsTray and zero to many Part elements. The coordinate system
        of a PartsTrayWithParts is in the same place as the coordinate
        system of its PartsTray. To implement this, the PartsTray should
        have the PartsTrayWithPartsType as the RefObject of its location,
        the location point of the PartsTray should be (0,0,0), its Z axis
        should be (0,0,1), and its X axis should be (1,0,0). The
        PrimaryLocation of a Part in a PartsTrayWithPartsType should be
        given by a PoseLocationInType that is relative to the PartsTray.
        The PartTypes in a PartsTrayWithPartsType are intended to all be of
        the same SKU, although there is currently no formal requirement for
        that.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="PartsTray"
            type="PartsTrayType"/>
          <xs:element name="Part"
            type="PartType"
            minOccurs="0"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PhysicalLocationType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A PhysicalLocationType is a DataThingType. A PhysicalLocationType
        says where a SolidObjectType is. A PhysicalLocationType has a Name
        inherited from DataThingType. It also has a RefObject element that
        is a SolidObjectType. A PhysicalLocationType is either a
        RelativeLocationType or a PoseLocationType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="RefObject"
            type="xs:IDREF"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PointType">
    <xs:annotation>
      <xs:documentation>
        A PointType is a DataThingType. A PointType has a Name element
        inherited from DataThingType. A PointType also has X, Y, and Z
        elements that are the Cartesian coordinates of the Point.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="X"
            type="xs:decimal"/>
          <xs:element name="Y"
            type="xs:decimal"/>
          <xs:element name="Z"
            type="xs:decimal"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseLocationType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A PoseLocationType is a PhysicalLocationType. A PoseLocationType
        has Name and RefObject elements inherited from
        PhysicalLocationType. A PoseLocationType also also has a Point
        element of PointType and XAxis and ZAxis elements of VectorType.
        The Point locates the origin of a coordinate system, and the XAxis
        and ZAxis give the orientation of the coordinate system. The data
        for the Point, the ZAxis and the XAxis are expressed relative to
        the coordinate system of the reference object. A PoseLocationType
        must be a PoseOnlyLocationType, a PoseLocationInType, or a
        PoseLocationOnType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PhysicalLocationType">
        <xs:sequence>
          <xs:element name="Point"
            type="PointType"/>
          <xs:element name="XAxis"
            type="VectorType"/>
          <xs:element name="ZAxis"
            type="VectorType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseLocationInType">
    <xs:annotation>
      <xs:documentation>
        A PoseLocationInType is a PoseLocationType. It has Point, ZAxis (a
        Vector for the Z axis), XAxis (a Vector for the X axis) and
        RefObject (a reference object) elements inherited from
        PoseLocationType. The data for the Point, the ZAxis and the XAxis
        are expressed relative to the coordinate system of the reference
        object. A PoseLocationInType indicates that the Object is inside
        the location-parent. The notion of 'inside' is vague and might be
        made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PoseLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseLocationOnType">
    <xs:annotation>
      <xs:documentation>
        A PoseLocationOnType is a PoseLocationType. It has Point, ZAxis (a
        Vector for the Z axis), XAxis (a Vector for the X axis) and
        RefObject (a reference object) elements inherited from
        PoseLocationType. The data for the Point, the ZAxis and the XAxis
        are expressed relative to the coordinate system of the reference
        object. A PoseLocationOnType indicates that the Object is on top of
        the location-parent. The notion of 'on top of' is vague and might
        be made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PoseLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PoseOnlyLocationType">
    <xs:annotation>
      <xs:documentation>
        A PoseOnlyLocationType is a PoseLocationType. It has Point, ZAxis
        (a Vector for the Z axis), XAxis (a Vector for the X axis) and
        RefObject (a reference object) elements inherited from
        PoseLocationType. The data for the Point, the ZAxis and the XAxis
        are expressed relative to the coordinate system of the reference
        object. An object located by a PoseOnlyLocationType may or may not
        be inside or on top of the reference object of the
        PoseOnlyLocationType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PoseLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="PositiveDecimalType">
    <xs:restriction base="xs:decimal">
      <xs:minExclusive value="0"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="RelativeLocationType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A RelativeLocationType is a PhysicalLocationType. It has a
        RefObject element inherited from PhysicalLocationType that
        identifies a reference object. It also has a Description element
        that is a string. A RelativeLocationType indicates that the
        SolidObjectType that has the RelativeLocationType is on or in the
        RefObject. A RelativeLocationType is a RelativeLocationInType or a
        RelativeLocationOnType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PhysicalLocationType">
        <xs:sequence>
          <xs:element name="Description"
            type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RelativeLocationInType">
    <xs:annotation>
      <xs:documentation>
        A RelativeLocationInType is a RelativeLocationType. It has
        reference object (RefObject) and description (Description) elements
        inherited from RelativeLocationType. A RelativeLocationInType
        indicates that the SolidObjectType that has the
        RelativeLocationType is in the RefObject. The notion of 'in' is
        vague and might be made more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RelativeLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RelativeLocationOnType">
    <xs:annotation>
      <xs:documentation>
        A RelativeLocationOnType is a RelativeLocationType. It has
        RefObject and Description elements inherited from
        RelativeLocationType. A RelativeLocationOnType indicates that the
        SolidObjectType that has the RelativeLocationType is on top of the
        RefObject. The notion of 'on top of' is vague and might be made
        more precise.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="RelativeLocationType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RobotType">
    <xs:annotation>
      <xs:documentation>
        A RobotType is a SolidObjectType. It has Name, PrimaryLocation,
        SecondaryLocation, InternalShape, and ExternalShape elements
        inherited from SolidObjectType. It also has Description,
        EndEffector, MaximumLoadWeight, and WorkVolume elements.
      </xs:documentation>
      <xs:documentation>
        The Robot ontology given here might be expanded greatly to include,
        for example, its kinematic description, the values of joint angles,
        arm lengths of variable length arms, gripper actuation (open,
        closed, etc.), ranges, velocities, and accelerations of each joint,
        etc.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="Description"
            type="xs:string"/>
          <xs:element name="EndEffector"
            type="EndEffectorType"
            minOccurs="0"/>
          <xs:element name="MaximumLoadWeight"
            type="PositiveDecimalType"/>
          <xs:element name="WorkVolume"
            type="BoxVolumeType"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ShapeDesignType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A ShapeDesignType is an abstract type that is a DataThingType. A
        ShapeDesignType has a Name element inherited from DataThingType. It
        also has a Description element that is a string and an optional
        GraspPose element that is a PoseLocationType. Each ShapeDesignType
        has a coordinate system that is expected to be specified explicitly
        or implicitly. A shape defined using coordinate values has an
        implicit coordinate system. The GraspPose is relative to the
        coordinate system of the ShapeDesignType. The Point in the pose is
        the point at which a gripper should make contact with the shape.
        The ZAxis of the pose may be used to indicate a direction for
        aligning the ZAxis of the gripper (parallel or antiparallel) and is
        usually normal to the the object having the shape and pointing away
        from the object.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="Description"
            type="xs:string"/>
          <xs:element name="GraspPose"
            type="PoseLocationType"
            minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SolidObjectType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A SolidObjectType has (1) a Name, (2) a PrimaryLocation that is a
        PhysicalLocationType, (3) zero to many SecondaryLocations, also
        PhysicalLocationType, (4) an optional InternalShape, and (5) an
        optional ExternalShape. The secondary locations are required to be
        logically and mathematically consistent with the value of the
        PrimaryLocation so that all locations of a SolidObjectType describe
        (or are consistent with) a single place in space. Names are of type
        xs:ID so that all names must be unique. No SolidObjectType except
        the Workstation may be located with respect to itself, and all
        chains of primary location must end at the Workstation. The shapes
        are not required to represent the same shape, but they should not
        be inconsistent. If a solid object consists of components it may
        also get its shape from the shape of the components and their
        relative positions.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Name"
        type="xs:ID"/>
      <xs:element name="PrimaryLocation"
        type="PhysicalLocationType"/>
      <xs:element name="SecondaryLocation"
        type="PhysicalLocationType"
        minOccurs="0"
        maxOccurs="unbounded"/>
      <xs:element name="InternalShape"
        type="InternalShapeType"
        minOccurs="0"/>
      <xs:element name="ExternalShape"
        type="ExternalShapeType"
        minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="StockKeepingUnitType">
    <xs:annotation>
      <xs:documentation>
        A StockKeepingUnitType is a DataThingType. A StockKeepingUnitType
        is a description of a type of object. A StockKeepinUnitType has a
        Name element inherited from DataThingType. A StockKeepingUnitType
        also has Description, Shape (a ShapeDesignType), and Weight
        elements, and zero to many EndEffectorName elements (the names of
        one or more instances of EndEffectorType that can handle it).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="Description"
            type="xs:string"/>
          <xs:element name="Shape"
            type="ShapeDesignType"/>
          <xs:element name="Weight"
            type="PositiveDecimalType"/>
          <xs:element name="EndEffectorName"
            type="xs:IDREF"
            minOccurs="0"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VacuumEffectorType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        A VacuumEffectorType is an EndEffectorType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, ExternalShape,
        Description, Weight, and MaximumLoadWeight elements inherited from
        EndEffectorType. It also has CupDiameter and Length elements. A
        VacuumEffectorType holds an object by putting a cup against the
        object and applying a vacuum. A VacuumEffectorType is either a
        VacuumEffectorSingleCupType or a VacuumEffectorMultiCupType.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EndEffectorType">
        <xs:sequence>
          <xs:element name="CupDiameter"
            type="PositiveDecimalType"/>
          <xs:element name="Length"
            type="PositiveDecimalType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VacuumEffectorMultiCupType">
    <xs:annotation>
      <xs:documentation>
        A VacuumEffectorMultiCupType is a VacuumEffectorType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, ExternalShape,
        Description, Weight, MaximumLoadWeight, CupDiameter, and Length
        elements inherited from VacuumEffectorType. A
        VacuumEffectorMultiCup also has ArrayNumber (number of cups -- at
        least 2) and ArrayRadius elements. The cups are arranged in a
        circular array spaced evenly apart. The center of the wide end of
        one cup is on the X-axis of the coordinate system of the
        VacuumEffectorMultiCupType. The center of the circular array is at
        the origin of the coordinate system. The axis of the array circle
        is the Z axis of the coordinate system, and the length of the
        VacuumEffectorType is measured along that axis. The wide ends of
        the cups lie on the XY plane of the coordinate system.
      </xs:documentation>
      <xs:documentation>
        Note that a square array can be represented easily as circular array.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VacuumEffectorType">
        <xs:sequence>
          <xs:element name="ArrayNumber"
            type="xs:positiveInteger"/>
          <xs:element name="ArrayRadius"
            type="PositiveDecimalType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VacuumEffectorSingleCupType">
    <xs:annotation>
      <xs:documentation>
        A VacuumEffectorSingleCupType is a VacuumEffectorType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, ExternalShape,
        Description, Weight, MaximumLoadWeight, CupDiameter, and Length
        elements inherited from VacuumEffectorType. A
        VacuumEffectorSingleCupType has one cup. The center of the wide end
        of the cup (which is a circle) is at the origin of the coordinate
        system of the VacuumEffectorSingleCupType. The Z axis of the
        coordinate system is the axis of that circle, and the length of the
        VacuumEffectorType is measured along that axis.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VacuumEffectorType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VectorType">
    <xs:annotation>
      <xs:documentation>
        A VectorType is a DataThingType. A Vector has a Name element
        inherited from DataThingType. It also has I, J, and K elements
        which represent the usual I, J, and K components of a 3D vector.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataThingType">
        <xs:sequence>
          <xs:element name="I"
            type="xs:decimal"/>
          <xs:element name="J"
            type="xs:decimal"/>
          <xs:element name="K"
            type="xs:decimal"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="WeightUnitType">
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="kilogram"/>
      <xs:enumeration value="gram"/>
      <xs:enumeration value="milligram"/>
      <xs:enumeration value="ounce"/>
      <xs:enumeration value="pound"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="WorkTableType">
    <xs:annotation>
      <xs:documentation>
        A WorkTableType is a SolidObjectType. It has Name,
        PrimaryLocation, SecondaryLocation, InternalShape, and
        ExternalShape elements inherited from SolidObjectType. It also
        has zero to many SolidObject elements, which are SolidObjectTypes
        located with respect to the WorkTableType. The reference object of
        each SolidObject element should be the WorkTable. Typically, those
        objects will be on top of the WorkTable. Typically, the shape of a
        WorkTableType will be a BoxyShape, so that the table has Length,
        Width, and Height.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SolidObjectType">
        <xs:sequence>
          <xs:element name="SolidObject"
            type="SolidObjectType"
            minOccurs="0"
            maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

</xs:schema>
