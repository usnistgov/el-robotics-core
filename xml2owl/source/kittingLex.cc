
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 193
#define YY_END_OF_BUFFER 194
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1816] =
    {   0,
      191,  191,    0,    0,    5,    5,    6,    6,  194,  192,
      191,  191,  192,  192,  189,  192,  192,  192,    2,    3,
        2,    5,  193,    6,    7,    6,    8,  191,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,   53,   57,   59,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  149,  151,  155,   10,    0,
        0,    0,    0,    5,    6,    7,    6,    0,  190,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   52,    0,    0,   56,
        0,   58,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  148,    0,    0,
      150,    0,  154,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   21,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   91,    0,    0,    0,  109,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   68,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      130,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  113,    0,    0,    0,  121,    0,    0,  127,
        0,    0,    0,    0,  143,    0,  147,  153,    0,    0,
        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       90,    0,    0,    0,    0,  108,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  132,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   47,   49,    0,    0,    0,    0,    0,    0,
       77,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  141,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
      120,    0,    0,    0,  126,    0,    0,    0,    0,    0,

      142,    0,    0,  146,    0,  152,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  129,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   46,    0,   48,
        0,    0,    0,    0,    0,    0,    0,   76,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  140,    0,    0,    0,    0,    0,   23,    0,
        0,    0,    0,   33,    0,    0,   43,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   99,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   66,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  128,    0,    0,    0,    0,

       15,    0,    0,    0,    0,    0,    0,    0,    0,   45,
        0,    0,   63,    0,    0,    0,    0,    0,    0,    0,
        0,   87,    0,    0,    0,    0,    0,    0,  111,    0,
        0,    0,    0,    0,    0,  137,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
        0,    0,    0,    0,   32,    0,    0,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   31,    0,    0,   51,    0,

        0,    0,    0,    0,   75,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  139,  145,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   44,    0,    0,    0,   62,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,    0,    0,    0,
        0,    0,    0,    0,  110,    0,    0,    0,    0,    0,
        0,    0,  136,    0,    0,   17,   19,    0,   27,   29,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
        0,    0,  135,    0,   13,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   30,
        0,    0,    0,   50,    0,    0,    0,    0,    0,    0,
       74,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  138,    0,
      144,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   81,   83,    0,    0,    0,    0,  101,    0,    0,
        0,    0,    0,  125,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   16,    0,   18,    0,    0,   26,    0,
       28,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  106,    0,    0,    0,    0,    0,    0,  134,    0,
        0,    0,   41,   55,   61,    0,    0,    0,    0,   85,
       89,    0,   97,    0,    0,    0,  119,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   80,    0,

       82,    0,    0,    0,    0,    0,  100,    0,    0,    0,
        0,    0,    0,  124,    0,    0,    0,   65,    0,   73,
        0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,    0,   54,    0,   60,    0,    0,    0,
        0,    0,   84,    0,   88,    0,    0,   96,    0,    0,
        0,    0,  118,    0,   25,    0,   37,    0,    0,    0,
        0,    0,  117,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   64,    0,    0,   72,    0,    0,    0,  104,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   24,    0,    0,   36,
        0,    0,    0,    0,    0,    0,  116,    0,   35,    0,
       79,    0,    0,    0,  123,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  166,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   71,    0,  103,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  172,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   34,    0,    0,   78,    0,    0,
        0,    0,  122,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  163,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  183,    0,    0,    0,   70,
        0,    0,  102,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  165,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  174,    0,    0,    0,    0,    0,    0,    0,
      187,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,    0,    0,    0,    0,    0,  160,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  114,    0,    0,    0,    0,    0,
        0,  161,    0,  164,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      170,    0,    0,  176,  177,    0,    0,    0,    0,    0,
        0,  186,    0,    0,    0,   12,    0,    0,    0,  162,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,    0,  157,    0,    0,    0,    0,  169,
        0,    0,  179,    0,    0,  182,    0,    0,    0,    0,
      159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  167,    0,    0,  175,  180,  181,    0,    0,    0,
        0,    0,  171,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  184,    0,
        0,    0,    0,  185,    0,    0,    0,    0,    0,  168,

        0,  158,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  188,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,    1,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,   61,   62,   63,   64,   65,   66,   67,
       68,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1823] =
    {   0,
        0,    5,    7,    9, 2336, 2335,   22,   25, 2349, 2352,
       28,   31,    0,   97, 2352, 2331, 2289,    0, 2352, 2352,
     2339,    0, 2352,    0,   48,   56, 2352,   75, 2340, 2282,
     2337,   56, 2335,  141, 2352,    5, 2296,   19,   20,   17,
     2287, 2278,   31, 2280, 2352, 2284,   36,   44, 2291,    7,
       46,   33,   97, 2282,   55, 2315, 2352, 2314, 2352, 2285,
     2275, 2277, 2312,    0,    0,   84,  107, 2275, 2352, 2320,
        0,   35, 2281,  135,   83,   90, 2272, 2263,  102,  186,
      189,  192,  105,  152, 2278,  152,  141,  155,  167, 2269,
      159,  229,  225,  232, 2270, 2259, 2257, 2258, 2272, 2256,

     2253, 2269, 2265, 2249, 2253, 2265, 2247,  102, 2245, 2244,
     2245, 2247, 2237, 2245, 2254, 2244, 2246, 2246, 2246, 2236,
      148, 2243, 2245, 2248,  160, 2248, 2228, 2232, 2234, 2232,
     2235, 2239, 2225, 2218, 2217, 2224,   36, 2268, 2352, 2267,
     2352, 2229, 2218, 2216, 2217, 2231, 2215, 2212, 2228, 2224,
     2208, 2212, 2224, 2206,  164,  235, 2352, 2204,  251, 2352,
      254, 2352, 2203, 2204, 2206, 2196, 2204, 2213, 2203, 2205,
     2205, 2205, 2195,  188, 2202, 2204, 2207,  200, 2207, 2187,
     2191, 2193, 2191, 2194, 2198, 2184,  260, 2352, 2177,  263,
     2352,  270, 2352, 2176, 2186, 2196, 2191, 2194, 2180, 2215,

      177, 2179, 2212, 2185, 2180, 2170, 2193, 2179, 2181, 2179,
      221, 2176, 2175, 2172, 2171, 2174, 2173, 2172, 2171, 2170,
     2155, 2159, 2163, 2158, 2181, 2154, 2153, 2158, 2150, 2177,
     2145, 2154, 2157, 2154, 2141, 2148, 2149, 2148, 2152,  111,
     2137,  212, 2135, 2141, 2151, 2146, 2149, 2135, 2170,  229,
     2134, 2167, 2140, 2135, 2125, 2148, 2134, 2136, 2134,  286,
     2131, 2130, 2127, 2126, 2129, 2128, 2127, 2126, 2125, 2110,
     2114, 2118, 2113, 2136, 2109, 2108, 2113, 2105,  289, 2101,
     2110, 2113, 2110, 2097, 2104, 2105, 2104, 2107, 2087, 2352,
     2107, 2102, 2099, 2090, 2099, 2100, 2098, 2086, 2084, 2085,

     2085, 2091, 2109, 2080, 2091, 2078, 2085, 2088, 2073, 2078,
     2077, 2077, 2352, 2085, 2073, 2069,  263, 2066, 2065, 2082,
     2080, 2062, 2066, 2078, 2073, 2076, 2352, 2072, 2057, 2066,
     2065, 2076, 2053, 2052, 2060, 2063, 2097, 2051, 2041, 2059,
     2039,  309, 2059, 2054, 2051, 2042, 2051, 2052, 2050, 2038,
     2036, 2037, 2037, 2043, 2061, 2032,  312, 2352, 2043, 2030,
     2037, 2040, 2025, 2030, 2029, 2029,  315, 2037, 2025, 2021,
      331, 2018, 2017, 2034, 2032, 2014, 2018, 2030, 2025,  334,
     2352, 2028,  337, 2024, 2009, 2018, 2017, 2028, 2005, 2004,
     2026,    9, 2011, 2010, 2017, 2008, 2002, 1996, 2008, 1999,

     2004, 2021, 1994, 1990, 2006, 1993, 1988, 2004, 1990, 2026,
     1994, 1981, 1980,  272, 1980, 1979, 2008, 1995, 1975, 1989,
     1982, 1998, 2352, 1982, 1973, 1979, 2352, 1984, 1975, 2352,
     1973, 1996, 1965, 1964, 2352, 1967, 2352, 2352, 1967, 1963,
     1956, 1990, 1961, 1981,   12,  340, 2352, 1966, 1965, 1972,
     1963, 1957, 1951, 1963, 1954, 1959, 1976, 1949, 1945, 1961,
     1948, 1943, 1959, 1945, 1981, 1949, 1936, 1935,  321,  358,
     2352, 1935, 1934, 1963,  367, 2352, 1950, 1930, 1944, 1937,
     1953,  370, 1937, 1928, 1934,  374, 1939, 1930,  377, 1928,
      386, 2352, 1951, 1920, 1919,  393, 1922,  396,  402, 1922,

     1915, 1933, 1914, 1918, 1918, 1914, 1941, 1923, 1922, 1925,
     1920, 1909, 2352, 2352, 1913, 1921, 1912, 1896, 1912, 1903,
     1922, 1903, 1902, 1905, 1912, 1888, 2352, 1910, 1908, 1896,
     1907, 1901, 1886, 1888, 1889, 1879, 1897, 1900, 1912, 1894,
     1896, 1896, 1901, 1883, 1887, 1875, 1874, 1890, 1885, 1875,
     1868, 1886, 1867, 1871, 1871, 1867, 1894, 1876, 1875, 1878,
     1873, 1862,  405,  412, 1866, 1874, 1865, 1849, 1865, 1856,
      421, 1857, 1856, 1859, 1866, 1842,  424, 1864, 1862, 1850,
     1861, 1855, 1840, 1842,  428, 2352, 1843, 1833, 1851,  431,
     2352, 1854, 1866,  440, 2352, 1848, 1850, 1850,  447,  450,

     2352, 1838,  459, 2352,  466, 2352, 1840, 1835, 1843, 1822,
     1838, 1839, 1824, 1841, 1824, 1837, 1827, 1834, 1819, 1831,
     1823, 1827, 1840, 1835, 1817, 1816,  249, 1839, 1816, 1814,
     1810, 1806, 1806, 1818, 1808, 1846, 1832, 1818, 1804, 1831,
     1813, 1798, 1794, 2352, 1803, 1799, 1797, 1789,  469, 1794,
        2,   55,  475,   84,  102,  133,  157,  189,  211,  206,
      233,  220,  238,  230,  246,  235,  478, 2352,  485, 2352,
      252,  246,  254,  490,  266,  251,  494, 2352,  262,  293,
      288,  272,  273,  271,  497, 2352,  283,  285,  301,  294,
      336,  324,  313,  306,  335,  335,  322,  321,  501,  332,

      335,  506, 2352,  343,  338,  348,  366,  364, 2352,  381,
      357,  368,  379, 2352,  374,  402, 2352,  391,  399,  410,
      397,  401,  399,  396,  412,  407,  415,  416,  435,  441,
      457,  459,  450, 2352,  452,  458,  472,  451,  483,  462,
      459,  456,  468,  477,  468,  476,  473,  529, 2352,  475,
      533,  489,  537,  540,  484,  502,  497,  552,  514,  489,
      504,  501,  557,  499,  526,  562,  518,  521,  533,  513,
      573, 2352,  517,  514,  515,  527,  522,  523,  524,  535,
      536,  537,  534,  525,  589,  526,  536,  550,  528,  560,
      539,  536,  532,  544,  600, 2352,  556,  547,  555,  552,

     2352,  561,  547,  549,  564,  555,  566,  557,  566, 2352,
      556,  568,  589,  558,  562,  579,  562,  581,  574,  575,
      597, 2352,  598,  572,  587,  580,  586,  578, 2352,  573,
      590,  606,  609,  594,  594, 2352,  579,  594,  586,  643,
      646,  589,  651,  640,  675,  607,  594,  680, 2352,  599,
      615,  609,  623,  683, 2352,  614,  623,  686, 2352,  691,
      628,  644,  702,  634,  638,  656,  639,  662,  656,  657,
      679,  710,  683,  657,  672,  718, 2352,  665,  675,  667,
      726,  662,  679,  699,  702,  687,  689,  735,  677,  692,
      681,  682,  700,  685,  689, 2352,  687,  704, 2352,  705,

      706,  721,  699,  702, 2352,  708,  699,  700,  714,  715,
      703,  715,  700,  730,  716,  721,  722,  723,  710,  721,
      708, 2352, 2352,  770,  773,  726,  720,  722,  714,  725,
      723,  721,  729,  735,  744,  741,  746,  744,  749,  736,
      794, 2352,  738,  738,  756,  741,  746,  804,  748,  765,
      810, 2352,  813,  773,  820, 2352,  774,  788,  770,  773,
      829,  780,  771,  776,  790,  836, 2352,  791,  783,  795,
      780,  810,  796,  845, 2352,  805,  806,  807,  795,  806,
      793,  855, 2352,  861,  864, 2352, 2352,  797, 2352, 2352,
      843,  801,  810,  814,  828,  812,  818,  836,  816,  817,

      825,  826,  847,  829,  818,  828, 2352,  830,  826,  833,
      844,  831, 2352,  891, 2352,  833,  852,  831,  843,  852,
      838,  849,  846,  841,  842,  845,  861,  848,  848,  855,
      866,  866,  853,  913,  916,  858,  920,  923,  932, 2352,
      939,  868,  942, 2352,  869,  874,  887,  876,  881,  949,
     2352,  906,  885,  887,  897,  898,  920,  902,  892,  902,
      960,  909,  905,  912,  923,  911,  971,  976, 2352,  979,
     2352,  923,  925,  940,  937,  938,  940,  933,  928,  943,
      945, 2352, 2352,  946,  948,  935,  950, 2352,  938,  953,
      949,  954,  959, 2352,  942,  959,  939,  955,  986,  961,

      951,  967,  964,  976,  964,  964,  954,  969,  974,  961,
      957,  967, 1021, 2352, 1024, 2352,  976, 1028, 2352, 1031,
     2352, 1040, 2352,  977,  992,  991,  997,  998,  992,  987,
     1002, 1003, 1051, 1056, 1007, 1012,  999, 1014, 1062, 1005,
     1067, 2352, 1024, 1021, 1026, 1031, 1078, 1083, 2352, 1018,
     1022, 1026, 2352, 2352, 2352, 1039, 1044, 1029, 1038, 2352,
     2352, 1047, 2352, 1044, 1049, 1037, 2352, 1034, 1038, 1050,
     1064, 1044, 1053, 1043, 1045, 1048, 1046, 1047, 1056, 1061,
     1066, 1074, 1083, 1051, 1054, 1054, 1081, 1061, 1065, 1065,
     1121, 1124, 1127, 1083, 1088, 1073, 1082, 1143, 2352, 1146,

     2352, 1149, 1152, 1092, 1155, 1171, 2352, 1090, 1095, 1083,
     1174, 1080, 1177, 2352, 1103, 1114, 1115, 2352, 1102, 2352,
     1116, 1110, 1138, 1110, 1124, 1130, 1170, 1148, 1134, 1139,
     1139, 1132, 1143, 1155, 1137, 1151, 1137, 1140, 1179, 1143,
     1134, 1183, 1145, 1147, 1153, 1169, 1151, 1164, 1152, 1163,
     1163, 1211, 2352, 1214, 2352, 1220, 2352, 1223, 1156, 1230,
     1169, 1239, 2352, 1242, 2352, 1171, 1246, 2352, 1249, 1169,
     1177, 1258, 2352, 1183, 2352, 1189, 2352, 1186, 1202, 1207,
     1212, 1210, 2352, 1205, 1256, 1220, 1223, 1208, 1221, 1226,
     1211, 1205, 1229, 1208, 1228, 1227, 1220, 1221, 1229, 1223,

     1231, 1224, 1239, 1231, 1223, 1221, 1267, 1245, 1290, 1246,
     1294, 1297, 2352, 1249, 1301, 2352, 1254, 1260, 1313, 2352,
     1264, 1262, 1317, 1253, 1252, 1263, 1260, 1279, 1268, 1304,
     1269, 1319, 1277, 1271, 1279, 1286, 1279, 1313, 1277, 1282,
     1301, 1334, 1300, 1275, 1285, 1297, 1296, 1288, 1302, 1303,
     1281, 1301, 1291, 1302, 1297, 1352, 2352, 1296, 1356, 2352,
     1302, 1299, 1318, 1307, 1343, 1364, 2352, 1312, 2352, 1313,
     2352, 1311, 1325, 1326, 2352, 1310, 1328, 1329, 1332, 1317,
     1345, 1333, 1335, 1348, 1318, 2352, 1328, 1347, 1326, 1345,
     1385, 1354, 1325, 1331, 1365, 1366, 1348, 1348, 1350, 1398,

     1345, 1402, 1346, 1359, 1360, 1408, 2352, 1365, 2352, 1349,
     1350, 1360, 1380, 1375, 1362, 1370, 1373, 1418, 1374, 1367,
     1367, 1376, 1385, 1375, 2352, 1364, 1395, 1381, 1376, 1378,
     1432, 1390, 1402, 1439, 2352, 1442, 1445, 2352, 1402, 1449,
     1389, 1461, 2352, 1433, 1404, 1392, 1415, 1393, 1411, 1407,
     1424, 1421, 2352, 1426, 1423, 1418, 1411, 1422, 1455, 1417,
     1411, 1427, 1422, 1435, 1436, 2352, 1437, 1417, 1484, 2352,
     1467, 1488, 2352, 1440, 1445, 1450, 1488, 1467, 1438, 1462,
     1481, 1440, 1456, 1444, 1500, 1446, 1457, 1452, 1452, 1463,
     1453, 1451, 1457, 1471, 1472, 1455, 1460, 1472, 1477, 1458,

     1461, 1459, 1467, 1478, 1476, 1477, 1471, 1463, 1483, 1470,
     1485, 2352, 1472, 1513, 1488, 1481, 1533, 1491, 1489, 1516,
     1481, 1482, 1487, 1498, 1483, 1487, 1498, 1499, 1540, 1508,
     1550, 1512, 1513, 1503, 1500, 1523, 1503, 1525, 1519, 1508,
     1513, 1506, 1508, 2352, 1563, 1536, 1513, 1514, 1505, 1521,
     1522, 1515, 1571, 1525, 1526, 1535, 1522, 1574, 1538, 2352,
     1524, 1527, 1538, 1538, 1520, 1528, 1522, 1528, 1532, 1530,
     1556, 1536, 2352, 1551, 1559, 1560, 1539, 1541, 1542, 1571,
     2352, 1558, 1545, 1542, 1548, 1548, 1547, 1562, 1561, 1564,
     1608, 1555, 1578, 1557, 1565, 1556, 1558, 1553, 1564, 1562,

     1556, 1557, 1577, 1569, 1570, 1565, 1577, 1563, 1569, 1575,
     1581, 2352, 1574, 1583, 1599, 1585, 1578, 2352, 1591, 1573,
     1593, 1584, 1576, 1607, 1586, 1598, 1585, 1589, 1590, 1645,
     1614, 1626, 1598, 1597, 1596, 1604, 1658, 1599, 1612, 1606,
     1598, 1609, 1630, 1663, 1610, 1665, 1614, 1644, 1606, 1627,
     1619, 1616, 1630, 1631, 2352, 1613, 1624, 1625, 1616, 1622,
     1635, 1638, 1629, 1687, 2352, 1634, 1684, 1636, 1635, 1645,
     1629, 2352, 1649, 2352, 1661, 1647, 1641, 1696, 1640, 1667,
     1700, 1701, 1648, 1671, 1672, 1651, 1659, 1657, 1708, 1657,
     2352, 1704, 1715, 1671, 1684, 1662, 1717, 1656, 1662, 1677,

     2352, 1689, 1660, 2352, 2352, 1680, 1662, 1664, 1684, 1713,
     1686, 2352, 1734, 1729, 1738, 2352, 1737, 1681, 1696, 2352,
     1686, 1709, 1742, 1681, 1690, 1746, 1693, 1695, 1750, 1693,
     1737, 1757, 2352, 1752, 2352, 1718, 1758, 1716, 1705, 2352,
     1707, 1719, 2352, 1720, 1721, 2352, 1711, 1708, 1762, 1712,
     2352, 1770, 1732, 1729, 1773, 1774, 1775, 1744, 1723, 1775,
     1732, 2352, 1718, 1781, 2352, 2352, 2352, 1720, 1751, 1748,
     1732, 1730, 2352, 1733, 1726, 1764, 1738, 1759, 1749, 1739,
     1770, 1763, 1734, 1797, 1755, 1768, 1738, 1747, 2352, 1802,
     1762, 1750, 1762, 2352, 1760, 1764, 1808, 1766, 1810, 2352,

     1760, 2352, 1773, 1812, 1767, 1763, 1760, 1760, 1779, 1767,
     1779, 1778, 1822, 2352, 2352, 1828, 1832, 1836, 1840, 1844,
     1848, 1851
    } ;

static yyconst flex_int16_t yy_def[1823] =
    {   0,
     1816, 1816, 1817, 1817, 1818, 1818, 1819, 1819, 1815, 1815,
     1815, 1815, 1820, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1821, 1815, 1822, 1815, 1822, 1815, 1815, 1815, 1815,
     1820,   14, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1821, 1822, 1815, 1822, 1815, 1815, 1815,
       34, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815,    0, 1815, 1815, 1815, 1815, 1815,
     1815, 1815
    } ;

static yyconst flex_int16_t yy_nxt[2421] =
    {   0,
     1815,   11,   12,   11, 1815,   13,   11,   12,   11,   20,
       13,   20, 1815,   21,   14,   21,   15,   16, 1815,   14,
     1815,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1815,   27,  240, 1815,   27,
      501, 1815,   29,  551,  502,   29, 1815,  552,   17,   66,
       66,   66,  117,   17,  751, 1815,   61,   66,   67,   67,
     1815,   62,   95,   98, 1815,   96,   18,  118,  101,  119,
       99,   18,  102, 1815,  103,  107,   28,   28,   28,  108,
      111,  123,  100,  104,  112,   66,   66,   66,  113,   29,
      120,  124,  142,  241,   30,  143,  114,   30,   32,   32,

       32,   33,  115,  131,  121,   34,  122,  132,   66,   67,
       67,  752,  240,  133,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,  148,   52,   53,   54,  149,  755,   55,   56,   57,
       58,   30,   71,   71,   71,  125,  154,  150,  126,  164,
      155,  127,  128,  165,  208,  129,  151,  209,  756,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,  336,   88,   89,   90,  145,
      757,   91,   92,   93,   94,  173,  146,  156,  156,  156,
      159,  159,  159,  161,  161,  161,  166,  170,  147,  174,

      222,  175,  157,  176,  167,  160,  227,  184,  162,  223,
      168,  185,  171,  177,  172,  178,  257,  186,  179,  258,
      228,  180,  181,  294,  758,  182,  190,  190,  190,  295,
      187,  187,  187,  192,  192,  192,  156,  156,  156,  759,
      271,  191,  305,  158,  163,  188,  276,  189,  193,  272,
      194,  157,  159,  159,  159,  161,  161,  161,  306,  760,
      277,  187,  187,  187,  190,  190,  190,  160,  761,  338,
      162,  192,  192,  192,  339,  346,  188,  762,  726,  191,
      763,  347,  727,  307,  764,  765,  193,  357,  357,  357,
      380,  380,  380,  766,  418,  524,  767,  419,  420,  421,

      768,  769,  358,  525,  770,  381,  774,  359,  775,  526,
      446,  446,  446,  357,  357,  357,  470,  470,  470,  776,
      382,  779,  777,  360,  422,  447,  778,  780,  358,  781,
      782,  471,  475,  475,  475,  380,  380,  380,  491,  491,
      491,  446,  446,  446,  574,  783,  784,  476,  361,  785,
      381,  786,  575,  492,  787,  788,  447,  789,  576,  470,
      470,  470,  477,  790,  791,  478,  479,  480,  475,  475,
      475,  585,  585,  585,  471,  590,  590,  590,  594,  594,
      594,  792,  793,  476,  794,  797,  586,  491,  491,  491,
      591,  798,  481,  595,  600,  600,  600,  603,  603,  603,

      799,  800,  492,  605,  605,  605,  667,  667,  667,  601,
      801,  802,  604,  669,  669,  669,  803,  804,  606,  805,
      806,  668,  677,  677,  677,  685,  685,  685,  670,  585,
      585,  585,  590,  590,  590,  807,  808,  678,  809,  810,
      686,  594,  594,  594,  586,  811,  812,  591,  702,  702,
      702,  600,  600,  600,  813,  814,  595,  815,  816,  679,
      603,  603,  603,  703,  817,  818,  601,  605,  605,  605,
      748,  748,  748,  819,  820,  604,  753,  753,  753,  667,
      667,  667,  606,  821,  749,  704,  669,  669,  669,  822,
      754,  771,  771,  771,  668,  677,  677,  677,  685,  685,

      685,  670,  795,  795,  795,  823,  772,  702,  702,  702,
      678,  824,  825,  686,  826,  827,  828,  796,  829,  830,
      831,  832,  703,  833,  834,  835,  773,  836,  837,  838,
      748,  748,  748,  839,  840,  840,  840,  842,  753,  753,
      753,  843,  843,  843,  749,  844,  845,  846,  841,  847,
      850,  851,  754,  848,  848,  848,  852,  853,  854,  854,
      854,  856,  857,  858,  858,  858,  860,  861,  849,  862,
      863,  864,  865,  855,  771,  771,  771,  866,  859,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  878,  772,
      876,  876,  876,  879,  880,  881,  882,  883,  884,  885,

      886,  795,  795,  795,  887,  877,  888,  889,  890,  891,
      892,  893,  894,  895,  896,  897,  796,  898,  899,  900,
      901,  902,  903,  904,  905,  906,  907,  908,  909,  910,
      911,  912,  913,  914,  915,  916,  917,  918,  919,  920,
      921,  922,  923,  924,  840,  840,  840,  925,  925,  925,
      927,  926,  843,  843,  843,  943,  844,  944,  841,  928,
      929,  945,  930,  946,  931,  932,  933,  947,  934,  935,
      936,  948,  949,  937,  950,  938,  941,  941,  941,  939,
      940,  848,  848,  848,  854,  854,  854,  858,  858,  858,
      953,  942,  951,  951,  951,  954,  849,  958,  959,  855,

      960,  961,  859,  955,  955,  955,  962,  952,  963,  964,
      965,  966,  966,  966,  968,  969,  970,  971,  956,  876,
      876,  876,  972,  973,  976,  977,  967,  974,  974,  974,
      978,  979,  980,  957,  877,  981,  982,  982,  982,  984,
      985,  986,  975,  987,  988,  989,  990,  991,  992,  993,
      994,  983,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1014, 1014,  925,  925,  925, 1016,  926, 1017,
     1018, 1019, 1020, 1022, 1023, 1015, 1024, 1025, 1026, 1027,
     1028, 1021, 1030, 1032, 1033,  941,  941,  941, 1034, 1035,

     1036, 1037, 1031, 1038, 1029, 1039, 1039, 1039, 1041, 1042,
      942,  951,  951,  951, 1043, 1043, 1043, 1045, 1046, 1047,
     1040,  955,  955,  955, 1048, 1049,  952, 1052, 1053, 1044,
     1050, 1050, 1050, 1054, 1055, 1056,  956,  966,  966,  966,
     1057, 1058, 1059, 1060, 1061, 1051,  974,  974,  974, 1062,
     1063, 1064,  967, 1065, 1066, 1067,  982,  982,  982, 1072,
     1075,  975, 1068, 1068, 1068, 1070, 1070, 1070, 1073, 1076,
     1077,  983, 1078, 1079, 1074, 1080, 1081, 1069, 1082, 1083,
     1071, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1014, 1014, 1014, 1095, 1096, 1097, 1098, 1099,

     1100, 1101, 1102, 1103, 1104, 1105, 1015, 1106, 1107, 1108,
     1109, 1110, 1111, 1112, 1113, 1113, 1113, 1115, 1115, 1115,
     1117, 1118, 1118, 1118, 1120, 1120, 1120, 1126, 1127, 1114,
     1128, 1129, 1116, 1039, 1039, 1039, 1119, 1130, 1131, 1121,
     1122, 1122, 1122, 1043, 1043, 1043, 1132, 1133, 1040, 1134,
     1050, 1050, 1050, 1135, 1136, 1123, 1137, 1138, 1044, 1139,
     1140, 1141, 1141, 1141, 1124, 1051, 1143, 1144, 1145, 1146,
     1125, 1147, 1148, 1148, 1148, 1150, 1142, 1068, 1068, 1068,
     1070, 1070, 1070, 1151, 1152, 1153, 1154, 1149, 1155, 1156,
     1157, 1158, 1069, 1159, 1160, 1071, 1161, 1162, 1163, 1164,

     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1113, 1113, 1113, 1115, 1115, 1115, 1188, 1118,
     1118, 1118, 1120, 1120, 1120, 1189, 1190, 1114, 1179, 1191,
     1116, 1122, 1122, 1122, 1119, 1192, 1193, 1121, 1194, 1195,
     1196, 1197, 1198, 1198, 1198, 1202, 1123, 1200, 1200, 1200,
     1203, 1204, 1205, 1206, 1206, 1206, 1208, 1199, 1141, 1141,
     1141, 1209, 1201, 1210, 1211, 1212, 1215, 1216, 1207, 1213,
     1213, 1213, 1217, 1142, 1148, 1148, 1148, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1214, 1225, 1226, 1227, 1228, 1149,

     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1239,
     1240, 1241, 1243, 1245, 1237, 1244, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1252, 1252, 1254, 1254, 1254, 1256, 1256,
     1256, 1258, 1259, 1260, 1261, 1242, 1266, 1253, 1269, 1270,
     1255, 1271, 1274, 1257, 1198, 1198, 1198, 1200, 1200, 1200,
     1262, 1262, 1262, 1264, 1264, 1264, 1267, 1267, 1267, 1199,
     1275, 1276, 1201, 1277, 1278, 1263, 1279, 1280, 1265, 1281,
     1282, 1268, 1206, 1206, 1206, 1272, 1272, 1272, 1213, 1213,
     1213, 1283, 1284, 1285, 1286, 1287, 1288, 1207, 1289, 1290,
     1273, 1291, 1292, 1214, 1293, 1294, 1295, 1296, 1297, 1298,

     1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1252, 1252, 1252, 1254, 1254, 1254, 1314, 1317,
     1302, 1256, 1256, 1256, 1312, 1312, 1312, 1253, 1318, 1322,
     1255, 1315, 1315, 1315, 1323, 1324, 1257, 1325, 1326, 1313,
     1262, 1262, 1262, 1264, 1264, 1264, 1316, 1267, 1267, 1267,
     1319, 1319, 1319, 1327, 1328, 1263, 1329, 1330, 1265, 1272,
     1272, 1272, 1268, 1331, 1332, 1320, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1273, 1341, 1342, 1343, 1344, 1345,
     1321, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
     1355, 1356, 1356, 1356, 1358, 1359, 1359, 1359, 1312, 1312,

     1312, 1361, 1315, 1315, 1315, 1362, 1357, 1363, 1364, 1365,
     1360, 1368, 1369, 1313, 1319, 1319, 1319, 1316, 1366, 1366,
     1366, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1320,
     1378, 1379, 1380, 1367, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1398, 1399, 1356, 1356, 1356, 1400, 1359, 1359, 1359,
     1401, 1402, 1403, 1404, 1405, 1366, 1366, 1366, 1357, 1406,
     1407, 1408, 1360, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
     1367, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,

     1434, 1434, 1436, 1437, 1437, 1437, 1439, 1440, 1441, 1442,
     1442, 1442, 1444, 1445, 1435, 1446, 1447, 1448, 1438, 1449,
     1450, 1451, 1452, 1453, 1443, 1454, 1455, 1456, 1457, 1458,
     1459, 1460, 1461, 1463, 1464, 1462, 1465, 1466, 1467, 1468,
     1434, 1434, 1434, 1469, 1469, 1469, 1437, 1437, 1437, 1471,
     1472, 1472, 1472, 1474, 1475, 1435, 1476, 1477, 1470, 1478,
     1479, 1438, 1442, 1442, 1442, 1473, 1480, 1481, 1482, 1483,
     1484, 1485, 1486, 1487, 1488, 1489, 1490, 1443, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1469, 1469, 1469, 1498, 1472,
     1472, 1472, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1509,

     1470, 1506, 1510, 1511, 1473, 1512, 1507, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1508, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1542, 1543, 1544, 1545,
     1546, 1541, 1547, 1550, 1551, 1552, 1553, 1554, 1548, 1555,
     1556, 1557, 1558, 1549, 1559, 1560, 1561, 1562, 1563, 1564,
     1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
     1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
     1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
     1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,

     1605, 1606, 1609, 1610, 1611, 1612, 1613, 1607, 1608, 1614,
     1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
     1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
     1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
     1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
     1655, 1656, 1657, 1660, 1661, 1662, 1663, 1666, 1658, 1664,
     1664, 1664, 1667, 1659, 1668, 1669, 1670, 1671, 1672, 1673,
     1674, 1675, 1676, 1677, 1665, 1678, 1679, 1680, 1681, 1682,
     1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1664, 1664,
     1664, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,

     1700, 1701, 1702, 1665, 1703, 1704, 1705, 1706, 1707, 1708,
     1709, 1710, 1711, 1712, 1713, 1714, 1715, 1715, 1715, 1717,
     1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
     1716, 1728, 1729, 1730, 1731, 1732, 1732, 1732, 1734, 1715,
     1715, 1715, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
     1733, 1743, 1744, 1716, 1745, 1746, 1747, 1748, 1732, 1732,
     1732, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
     1758, 1759, 1760, 1733, 1761, 1762, 1763, 1764, 1765, 1766,
     1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
     1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,

     1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
     1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
     1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,   10,   10,
       10,   10,   19,   19,   19,   19,   22,   22,   22,   22,
       24,   24,   24,   24,   31,   31,  750,   31,   64,   64,
       64,   65,  747,   65,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  701,  700,  699,  698,  697,  696,

      695,  694,  693,  692,  691,  690,  689,  688,  687,  684,
      683,  682,  681,  680,  676,  675,  674,  673,  672,  671,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      602,  599,  598,  597,  596,  593,  592,  589,  588,  587,
      584,  583,  582,  581,  580,  579,  578,  577,  573,  572,

      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  528,  527,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  500,  499,  498,  497,  496,  495,
      494,  493,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  474,  473,  472,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,

      453,  452,  451,  450,  449,  448,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  345,  344,  343,  342,  341,  340,  339,  337,  335,

      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  275,  274,  273,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  226,  225,  224,  221,  220,  219,  218,

      217,  216,  215,  214,  213,  212,  211,  210,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  183,  169,  153,  152,  144,  141,  140,  139,  138,
      137,  136,  135,  134,  130,  116,  110,  109,  106,  105,
       97,   70,   69,   68,   33,   63,   60,   59, 1815,   23,
       23,    9, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815
    } ;

static yyconst flex_int16_t yy_chk[2421] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,  137,    0,    8,
      392,    0,   11,  445,  392,   12,    0,  445,    1,   25,
       25,   25,   50,    2,  651,    0,   18,   26,   26,   26,
       32,   18,   36,   38,   32,   36,    1,   50,   39,   50,
       38,    2,   39,   32,   40,   43,   28,   28,   28,   43,
       47,   52,   38,   40,   47,   66,   66,   66,   48,   28,
       51,   52,   72,  137,   11,   72,   48,   12,   14,   14,

       14,   14,   48,   55,   51,   14,   51,   55,   67,   67,
       67,  652,  240,   55,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   75,   14,   14,   14,   75,  654,   14,   14,   14,
       14,   28,   34,   34,   34,   53,   79,   76,   53,   83,
       79,   53,   53,   83,  108,   53,   76,  108,  655,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  240,   34,   34,   34,   74,
      656,   34,   34,   34,   34,   87,   74,   80,   80,   80,
       81,   81,   81,   82,   82,   82,   84,   86,   74,   87,

      121,   87,   80,   88,   84,   81,  125,   91,   82,  121,
       84,   91,   86,   88,   86,   89,  155,   91,   89,  155,
      125,   89,   89,  201,  657,   89,   93,   93,   93,  201,
       92,   92,   92,   94,   94,   94,  156,  156,  156,  658,
      174,   93,  211,   80,   82,   92,  178,   92,   94,  174,
       94,  156,  159,  159,  159,  161,  161,  161,  211,  659,
      178,  187,  187,  187,  190,  190,  190,  159,  660,  242,
      161,  192,  192,  192,  242,  250,  187,  661,  627,  190,
      662,  250,  627,  211,  663,  664,  192,  260,  260,  260,
      279,  279,  279,  665,  317,  414,  666,  317,  317,  317,

      671,  672,  260,  414,  673,  279,  675,  260,  676,  414,
      342,  342,  342,  357,  357,  357,  367,  367,  367,  679,
      279,  681,  680,  260,  317,  342,  680,  682,  357,  683,
      684,  367,  371,  371,  371,  380,  380,  380,  383,  383,
      383,  446,  446,  446,  469,  687,  688,  371,  260,  689,
      380,  690,  469,  383,  691,  692,  446,  693,  469,  470,
      470,  470,  371,  694,  695,  371,  371,  371,  475,  475,
      475,  482,  482,  482,  470,  486,  486,  486,  489,  489,
      489,  696,  697,  475,  698,  700,  482,  491,  491,  491,
      486,  701,  371,  489,  496,  496,  496,  498,  498,  498,

      704,  705,  491,  499,  499,  499,  563,  563,  563,  496,
      706,  707,  498,  564,  564,  564,  708,  710,  499,  711,
      712,  563,  571,  571,  571,  577,  577,  577,  564,  585,
      585,  585,  590,  590,  590,  713,  715,  571,  716,  718,
      577,  594,  594,  594,  585,  719,  720,  590,  599,  599,
      599,  600,  600,  600,  721,  722,  594,  723,  724,  571,
      603,  603,  603,  599,  725,  726,  600,  605,  605,  605,
      649,  649,  649,  727,  728,  603,  653,  653,  653,  667,
      667,  667,  605,  729,  649,  599,  669,  669,  669,  730,
      653,  674,  674,  674,  667,  677,  677,  677,  685,  685,

      685,  669,  699,  699,  699,  731,  674,  702,  702,  702,
      677,  732,  733,  685,  735,  736,  737,  699,  738,  739,
      740,  741,  702,  742,  743,  744,  674,  745,  746,  747,
      748,  748,  748,  750,  751,  751,  751,  752,  753,  753,
      753,  754,  754,  754,  748,  754,  755,  756,  751,  757,
      759,  760,  753,  758,  758,  758,  761,  762,  763,  763,
      763,  764,  765,  766,  766,  766,  767,  768,  758,  769,
      770,  773,  774,  763,  771,  771,  771,  775,  766,  776,
      777,  778,  779,  780,  781,  782,  783,  784,  786,  771,
      785,  785,  785,  787,  788,  789,  790,  791,  792,  793,

      794,  795,  795,  795,  797,  785,  798,  799,  800,  802,
      803,  804,  805,  806,  807,  808,  795,  809,  811,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  821,  823,
      824,  825,  826,  827,  828,  830,  831,  832,  833,  834,
      835,  837,  838,  839,  840,  840,  840,  841,  841,  841,
      842,  841,  843,  843,  843,  846,  843,  847,  840,  844,
      844,  850,  844,  851,  844,  844,  844,  852,  844,  844,
      844,  853,  856,  844,  857,  844,  845,  845,  845,  844,
      844,  848,  848,  848,  854,  854,  854,  858,  858,  858,
      861,  845,  860,  860,  860,  862,  848,  864,  865,  854,

      866,  867,  858,  863,  863,  863,  868,  860,  869,  870,
      871,  872,  872,  872,  873,  874,  875,  878,  863,  876,
      876,  876,  879,  880,  882,  883,  872,  881,  881,  881,
      884,  885,  886,  863,  876,  887,  888,  888,  888,  889,
      890,  891,  881,  892,  893,  894,  895,  897,  898,  900,
      901,  888,  902,  903,  904,  906,  907,  908,  909,  910,
      911,  912,  913,  914,  915,  916,  917,  918,  919,  920,
      921,  924,  924,  924,  925,  925,  925,  926,  925,  927,
      928,  929,  930,  931,  932,  924,  933,  934,  935,  936,
      937,  930,  938,  939,  940,  941,  941,  941,  943,  944,

      945,  946,  938,  947,  937,  948,  948,  948,  949,  950,
      941,  951,  951,  951,  953,  953,  953,  954,  957,  958,
      948,  955,  955,  955,  959,  960,  951,  962,  963,  953,
      961,  961,  961,  964,  965,  968,  955,  966,  966,  966,
      969,  970,  971,  972,  973,  961,  974,  974,  974,  976,
      977,  978,  966,  979,  980,  981,  982,  982,  982,  988,
      992,  974,  984,  984,  984,  985,  985,  985,  991,  993,
      994,  982,  995,  996,  991,  997,  998,  984,  999, 1000,
      985, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010,
     1011, 1012, 1014, 1014, 1014, 1016, 1017, 1018, 1019, 1020,

     1021, 1022, 1023, 1024, 1025, 1026, 1014, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1034, 1034, 1035, 1035, 1035,
     1036, 1037, 1037, 1037, 1038, 1038, 1038, 1042, 1045, 1034,
     1046, 1047, 1035, 1039, 1039, 1039, 1037, 1048, 1049, 1038,
     1041, 1041, 1041, 1043, 1043, 1043, 1052, 1053, 1039, 1054,
     1050, 1050, 1050, 1055, 1056, 1041, 1057, 1058, 1043, 1059,
     1060, 1061, 1061, 1061, 1041, 1050, 1062, 1063, 1064, 1065,
     1041, 1066, 1067, 1067, 1067, 1072, 1061, 1068, 1068, 1068,
     1070, 1070, 1070, 1073, 1074, 1075, 1076, 1067, 1077, 1078,
     1079, 1080, 1068, 1081, 1084, 1070, 1085, 1086, 1087, 1089,

     1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1111, 1112, 1113, 1113, 1113, 1115, 1115, 1115, 1117, 1118,
     1118, 1118, 1120, 1120, 1120, 1124, 1125, 1113, 1104, 1126,
     1115, 1122, 1122, 1122, 1118, 1127, 1128, 1120, 1129, 1130,
     1131, 1132, 1133, 1133, 1133, 1135, 1122, 1134, 1134, 1134,
     1136, 1137, 1138, 1139, 1139, 1139, 1140, 1133, 1141, 1141,
     1141, 1143, 1134, 1144, 1145, 1146, 1150, 1151, 1139, 1147,
     1147, 1147, 1152, 1141, 1148, 1148, 1148, 1156, 1157, 1158,
     1159, 1162, 1164, 1165, 1147, 1166, 1168, 1169, 1170, 1148,

     1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1178, 1183, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1191, 1191, 1192, 1192, 1192, 1193, 1193,
     1193, 1194, 1195, 1196, 1197, 1182, 1204, 1191, 1208, 1209,
     1192, 1210, 1212, 1193, 1198, 1198, 1198, 1200, 1200, 1200,
     1202, 1202, 1202, 1203, 1203, 1203, 1205, 1205, 1205, 1198,
     1215, 1216, 1200, 1217, 1219, 1202, 1221, 1222, 1203, 1223,
     1224, 1205, 1206, 1206, 1206, 1211, 1211, 1211, 1213, 1213,
     1213, 1225, 1226, 1227, 1228, 1229, 1230, 1206, 1231, 1232,
     1211, 1233, 1234, 1213, 1235, 1236, 1237, 1238, 1239, 1239,

     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1252, 1252, 1254, 1254, 1254, 1259, 1261,
     1242, 1256, 1256, 1256, 1258, 1258, 1258, 1252, 1266, 1270,
     1254, 1260, 1260, 1260, 1271, 1274, 1256, 1276, 1278, 1258,
     1262, 1262, 1262, 1264, 1264, 1264, 1260, 1267, 1267, 1267,
     1269, 1269, 1269, 1279, 1280, 1262, 1281, 1282, 1264, 1272,
     1272, 1272, 1267, 1284, 1285, 1269, 1286, 1287, 1288, 1289,
     1290, 1291, 1292, 1293, 1272, 1294, 1295, 1296, 1297, 1298,
     1269, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1309, 1309, 1310, 1311, 1311, 1311, 1312, 1312,

     1312, 1314, 1315, 1315, 1315, 1317, 1309, 1318, 1321, 1322,
     1311, 1324, 1325, 1312, 1319, 1319, 1319, 1315, 1323, 1323,
     1323, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1319,
     1334, 1335, 1336, 1323, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1356, 1356, 1358, 1359, 1359, 1359,
     1361, 1362, 1363, 1364, 1365, 1366, 1366, 1366, 1356, 1368,
     1370, 1372, 1359, 1373, 1374, 1376, 1377, 1378, 1379, 1380,
     1366, 1381, 1382, 1383, 1384, 1385, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,

     1400, 1400, 1401, 1402, 1402, 1402, 1403, 1404, 1405, 1406,
     1406, 1406, 1408, 1410, 1400, 1411, 1412, 1413, 1402, 1414,
     1415, 1416, 1417, 1418, 1406, 1419, 1420, 1421, 1422, 1423,
     1424, 1426, 1427, 1428, 1429, 1427, 1430, 1431, 1432, 1433,
     1434, 1434, 1434, 1436, 1436, 1436, 1437, 1437, 1437, 1439,
     1440, 1440, 1440, 1441, 1444, 1434, 1445, 1446, 1436, 1447,
     1448, 1437, 1442, 1442, 1442, 1440, 1449, 1450, 1451, 1452,
     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1442, 1461, 1462,
     1463, 1464, 1465, 1467, 1468, 1469, 1469, 1469, 1471, 1472,
     1472, 1472, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1482,

     1469, 1481, 1483, 1484, 1472, 1485, 1481, 1486, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1481, 1497,
     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
     1508, 1509, 1510, 1511, 1513, 1514, 1515, 1516, 1517, 1518,
     1519, 1514, 1520, 1521, 1522, 1523, 1524, 1525, 1520, 1526,
     1527, 1528, 1529, 1520, 1530, 1531, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1545, 1546,
     1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
     1568, 1569, 1570, 1571, 1572, 1574, 1575, 1576, 1577, 1578,

     1579, 1580, 1582, 1583, 1584, 1585, 1586, 1580, 1580, 1587,
     1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
     1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
     1608, 1609, 1610, 1611, 1613, 1614, 1615, 1616, 1617, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
     1630, 1631, 1632, 1633, 1634, 1635, 1636, 1638, 1632, 1637,
     1637, 1637, 1639, 1632, 1640, 1641, 1642, 1643, 1644, 1645,
     1646, 1647, 1648, 1649, 1637, 1650, 1651, 1652, 1653, 1654,
     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1664,
     1664, 1666, 1667, 1668, 1669, 1670, 1671, 1673, 1675, 1676,

     1677, 1678, 1679, 1664, 1680, 1681, 1682, 1683, 1684, 1685,
     1686, 1687, 1688, 1689, 1690, 1692, 1693, 1693, 1693, 1694,
     1695, 1696, 1697, 1698, 1699, 1700, 1702, 1703, 1706, 1707,
     1693, 1708, 1709, 1710, 1711, 1713, 1713, 1713, 1714, 1715,
     1715, 1715, 1717, 1718, 1719, 1721, 1722, 1723, 1724, 1725,
     1713, 1726, 1727, 1715, 1728, 1729, 1730, 1731, 1732, 1732,
     1732, 1734, 1736, 1737, 1738, 1739, 1741, 1742, 1744, 1745,
     1747, 1748, 1749, 1732, 1750, 1752, 1753, 1754, 1755, 1756,
     1757, 1758, 1759, 1760, 1761, 1763, 1764, 1768, 1769, 1770,
     1771, 1772, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,

     1782, 1783, 1784, 1785, 1786, 1787, 1788, 1790, 1791, 1792,
     1793, 1795, 1796, 1797, 1798, 1799, 1801, 1803, 1804, 1805,
     1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1816, 1816,
     1816, 1816, 1817, 1817, 1817, 1817, 1818, 1818, 1818, 1818,
     1819, 1819, 1819, 1819, 1820, 1820,  650, 1820, 1821, 1821,
     1821, 1822,  648, 1822,  647,  646,  645,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  602,  598,  597,  596,  593,  592,  589,

      588,  587,  584,  583,  582,  581,  580,  579,  578,  576,
      575,  574,  573,  572,  570,  569,  568,  567,  566,  565,
      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      497,  495,  494,  493,  490,  488,  487,  485,  484,  483,
      481,  480,  479,  478,  477,  474,  473,  472,  468,  467,

      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  444,
      443,  442,  441,  440,  439,  436,  434,  433,  432,  431,
      429,  428,  426,  425,  424,  422,  421,  420,  419,  418,
      417,  416,  415,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  391,  390,  389,  388,  387,  386,
      385,  384,  382,  379,  378,  377,  376,  375,  374,  373,
      372,  370,  369,  368,  366,  365,  364,  363,  362,  361,
      360,  359,  356,  355,  354,  353,  352,  351,  350,  349,

      348,  347,  346,  345,  344,  343,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  316,
      315,  314,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  249,  248,  247,  246,  245,  244,  243,  241,  239,

      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  200,  199,  198,  197,
      196,  195,  194,  189,  186,  185,  184,  183,  182,  181,
      180,  179,  177,  176,  175,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  158,  154,  153,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      140,  138,  136,  135,  134,  133,  132,  131,  130,  129,
      128,  127,  126,  124,  123,  122,  120,  119,  118,  117,

      116,  115,  114,  113,  112,  111,  110,  109,  107,  106,
      105,  104,  103,  102,  101,  100,   99,   98,   97,   96,
       95,   90,   85,   78,   77,   73,   70,   68,   63,   62,
       61,   60,   58,   56,   54,   49,   46,   44,   42,   41,
       37,   33,   31,   30,   29,   21,   17,   16,    9,    6,
        5, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,

     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "kittingClasses.hh" // for classes referenced in kittingYACC.hh
#include "kittingYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1816 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2352 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBEREND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBERSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSSTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return BASEEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return BASESTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONEND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETEREND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETERSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMEEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMESTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return DIAMETEREND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return DIAMETERSTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDEREND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMEEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMESTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTOREND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORSTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return EXTERNALSHAPEEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return EXTERNALSHAPESTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDSTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return GRASPPOSEEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return GRASPPOSESTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return HASTOPEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return HASTOPSTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return HELDOBJECTEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return HELDOBJECTSTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return INTERNALSHAPEEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return INTERNALSHAPESTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMEEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMESTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMEEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMESTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return KITEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return KITSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONSTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINEREND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINERSTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITSTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTSTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTSTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTSTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return MODELFILENAMEEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return MODELFILENAMESTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return MODELNAMEEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return MODELNAMESTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return MODELTYPENAMEEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return MODELTYPENAMESTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return ORIENTATIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLEEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLESTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return PARTNAMEEND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return PARTNAMESTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYSTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSENAMEEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSENAMESTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSEEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSESTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMEEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMESTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return PARTEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONEND;}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ECH; return POSITIONSTANDARDDEVIATIONSTART;}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONEND;}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONSTART;}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMEEND;}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTNAMESTART;}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTEND;}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTSTART;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONEND;}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONSTART;}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBEREND;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBERSTART;}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ECH; return SHAPEEND;}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ECH; return SHAPESTART;}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMEEND;}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMESTART;}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ECH; return SKUEND;}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ECH; return SKUSTART;}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ECH; return SLOTEND;}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ECH; return SLOTSTART;}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTEND;}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTSTART;}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTAMPEND;}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ECH; return TIMESTAMPSTART;}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITEND;}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITSTART;}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTEND;}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTSTART;}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHEND;}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHSTART;}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMEEND;}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMESTART;}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ ECH; return BOXYSHAPETYPEDECL; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{ ECH; return CYLINDRICALSHAPETYPEDECL; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORCHANGINGSTATIONTYPEDECL; }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORHOLDERTYPEDECL; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORTYPEDECL; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{ ECH; return EXTERNALSHAPETYPEDECL; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ ECH; return GRIPPEREFFECTORTYPEDECL; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{ ECH; return HUMANTYPEDECL; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
{ ECH; return INTERNALSHAPETYPEDECL; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{ ECH; return KITTRAYTYPEDECL; }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{ ECH; return KITTYPEDECL; }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
{ ECH; return KITTINGWORKSTATIONTYPEDECL; }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHEMPTYKITTRAYSTYPEDECL; }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHKITSTYPEDECL; }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{ ECH; return LARGECONTAINERTYPEDECL; }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
{ ECH; return MECHANICALCOMPONENTTYPEDECL; }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
{ ECH; return PARTTYPEDECL; }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSBINTYPEDECL; }
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYTYPEDECL; }
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYWITHPARTSTYPEDECL; }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONINTYPEDECL; }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONONTYPEDECL; }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONTYPEDECL; }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
{ ECH; return POSEONLYLOCATIONTYPEDECL; }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONINTYPEDECL; }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONONTYPEDECL; }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONTYPEDECL; }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
{ ECH; return ROBOTTYPEDECL; }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORMULTICUPTYPEDECL; }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORSINGLECUPTYPEDECL; }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORTYPEDECL; }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
{ ECH; return WORKTABLETYPEDECL; }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 189:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yytext[first] != '"'; first++);
                            first++;
                            for (n = first; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 192:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 193:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1816 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1816 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1815);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

