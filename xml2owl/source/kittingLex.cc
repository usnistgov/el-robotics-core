
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1438] =
    {   0,
      162,  162,    0,    0,    5,    5,    6,    6,  165,  163,
      162,  162,  163,  163,  160,  163,  163,  163,    2,    3,
        2,    5,  164,    6,    7,    6,    8,  162,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,   43,   45,   47,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,  125,  129,   10,    0,    0,    0,
        0,    5,    6,    7,    6,    0,  161,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       42,    0,   44,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  122,    0,    0,
      124,    0,  128,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   57,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   73,    0,    0,   85,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  109,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  104,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   89,    0,    0,   95,    0,    0,
      101,    0,    0,    0,  115,    0,    0,  121,  127,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   72,    0,    0,    0,   84,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  108,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   39,   41,    0,    0,    0,    0,   65,    0,    0,
       75,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  113,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
        0,    0,   94,    0,    0,    0,  100,    0,    0,    0,

        0,  114,    0,    0,    0,  120,    0,  126,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  103,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   38,    0,   40,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,   74,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  112,    0,    0,    0,    0,    0,    0,   21,
        0,    0,    0,    0,    0,   37,    0,    0,   55,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    9,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,    0,    0,    0,    0,
       15,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       87,    0,   93,    0,    0,    0,    0,  117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       20,    0,    0,    0,    0,    0,    0,   36,    0,    0,
        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,    0,    0,    0,
        0,    0,   63,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  111,  119,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,    0,    0,
       50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   86,    0,    0,   92,    0,    0,

        0,    0,    0,  116,    0,   17,   19,    0,   25,   27,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   83,    0,    0,    0,  107,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  110,    0,
      118,    0,    0,    0,    0,    0,    0,    0,    0,   69,
       71,    0,   79,    0,    0,    0,   99,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   16,    0,   18,    0,    0,   24,    0,   26,
        0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   82,    0,    0,    0,    0,
      106,    0,    0,    0,   49,    0,    0,    0,    0,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   68,    0,   70,
        0,    0,   78,    0,    0,    0,    0,   98,    0,    0,
        0,   53,    0,   61,    0,   81,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   48,    0,    0,    0,    0,    0,   76,    0,    0,
        0,   23,    0,   33,    0,    0,   91,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   52,    0,    0,   60,    0,    0,   80,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
        0,   32,    0,    0,    0,   90,    0,    0,    0,   67,

       97,    0,    0,    0,    0,    0,    0,    0,    0,  137,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   31,   59,    0,  158,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
      142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   66,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      153,    0,    0,    0,   30,    0,   58,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  136,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  143,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  131,    0,    0,    0,
        0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
        0,    0,    0,  157,    0,  130,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  134,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  148,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  141,    0,  146,  147,    0,
        0,    0,    0,    0,    0,  156,    0,    0,    0,  135,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  140,    0,  149,    0,    0,
      152,    0,    0,    0,    0,  133,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  138,    0,  145,  150,  151,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,    0,    0,  155,    0,    0,    0,    0,
        0,  139,    0,  132,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  159,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,    1,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,   61,   62,   63,   64,   65,   66,   67,
       68,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1445] =
    {   0,
        0,    5,    7,    9, 1891, 1890,   22,   25, 1904, 1907,
       28,   31,    0,   97, 1907, 1886, 1844,    0, 1907, 1907,
     1894,    0, 1907,    0,   48,   56, 1907,   75, 1895, 1837,
     1892,   56, 1890,  141, 1907,    5,   19, 1847, 1837, 1841,
       24, 1907, 1907, 1840,   31,    0, 1847,   22,   25,   32,
       55, 1830,   44, 1871, 1907, 1870, 1907, 1841, 1831, 1833,
     1868,    0,    0,   85,  109, 1831, 1907, 1876,    0,   47,
       30, 1833, 1823, 1827,   47,  144,  149,  184,   87,    2,
     1834,   91,  131,  100,  144, 1817,  145,  203,  206,  209,
     1826, 1815, 1815, 1829, 1813, 1810, 1823, 1812, 1807, 1815,

     1804, 1805, 1807, 1797, 1805, 1805, 1807, 1808, 1798, 1805,
     1804, 1806, 1809,  134, 1809, 1789, 1796, 1806, 1797, 1801,
     1787, 1780, 1779, 1786,  156, 1830, 1907, 1829, 1907, 1791,
     1780, 1780, 1794, 1778, 1775, 1788, 1777, 1772, 1780,  213,
     1907,  229, 1907,  232, 1907, 1769, 1770, 1772, 1762, 1770,
     1770, 1772, 1773, 1763, 1770, 1769, 1771, 1774,  177, 1774,
     1754, 1761, 1771, 1762, 1766, 1752,  237, 1907, 1745,  240,
     1907,  248, 1907, 1744, 1754, 1764, 1763, 1749, 1784,  103,
     1782, 1751, 1765, 1751,  207, 1750, 1749, 1746, 1745, 1748,
     1747, 1746, 1731, 1735, 1735, 1758, 1731, 1730, 1735, 1727,

     1754, 1732, 1716, 1732, 1719, 1726, 1727, 1726, 1730,  115,
     1715,  156, 1713, 1719, 1729, 1728, 1714, 1749,  144, 1747,
     1716, 1730, 1716,  256, 1715, 1714, 1711, 1710, 1713, 1712,
     1711, 1696, 1700, 1700, 1723, 1696, 1695, 1700, 1692,  259,
     1698, 1682, 1698, 1685, 1692, 1693, 1692, 1695, 1675, 1695,
     1690, 1687, 1678, 1687, 1687, 1674, 1676, 1682, 1684, 1671,
     1678, 1681, 1666, 1671, 1670, 1907, 1679, 1664,  231, 1661,
     1678, 1676, 1658, 1662, 1674, 1669, 1672, 1668, 1907, 1663,
     1662,    1, 1651, 1650, 1658, 1661,  281, 1662, 1640, 1658,
     1638, 1658, 1653, 1650, 1641, 1650, 1650, 1637, 1639, 1645,

      284, 1907, 1647, 1634, 1641, 1644, 1629, 1634, 1633,  296,
     1642, 1627,  300, 1624, 1641, 1639, 1621, 1625, 1637, 1632,
      303, 1907, 1635, 1631,  306, 1626, 1625,    4, 1614, 1613,
     1635,  189, 1620, 1619, 1626, 1617, 1611, 1618, 1615, 1606,
     1602, 1602, 1618, 1604, 1640, 1608, 1595, 1594, 1594, 1623,
     1591, 1605, 1598, 1614, 1907, 1590, 1596, 1907, 1601, 1592,
     1907, 1590, 1613, 1582, 1907, 1599, 1584, 1907, 1907, 1584,
     1580,  312, 1573,  323, 1587, 1578, 1598,  239, 1583, 1582,
     1589, 1580, 1574, 1581, 1578, 1569, 1565, 1565, 1581, 1567,
     1603, 1571, 1558, 1557,  328, 1907, 1557, 1586,  336, 1907,

     1554, 1568, 1561, 1577,  339, 1553, 1559,  344, 1564, 1555,
      347, 1553, 1576,  355, 1907, 1545,  363, 1562, 1547,  366,
      371, 1547, 1540, 1558, 1539, 1543, 1543, 1539, 1566, 1548,
     1547, 1907, 1907, 1542, 1526, 1542, 1533, 1552, 1533, 1532,
     1907, 1542, 1542, 1536, 1521, 1523, 1515, 1533, 1536, 1548,
     1530, 1532, 1538, 1530, 1519, 1523, 1511, 1510,  375, 1507,
     1521, 1520, 1510, 1503, 1521, 1502, 1506, 1506, 1502, 1529,
     1511, 1510,  382,  387, 1505, 1489, 1505, 1496,  390, 1497,
     1496,  393, 1506, 1506, 1500, 1485, 1487,  398, 1907, 1479,
     1497,  409, 1907, 1500, 1512,  414, 1907, 1494, 1496,  417,

      420, 1907, 1495, 1484,  436, 1907,  440, 1907, 1486, 1481,
     1489, 1468, 1484, 1485, 1470, 1487, 1484, 1482, 1478,  165,
     1487, 1469, 1468,  247, 1491, 1462, 1465, 1503, 1489, 1475,
     1489, 1471, 1456, 1452, 1907, 1461, 1456, 1457, 1448,  443,
     1458, 1457, 1448, 1451,  446, 1454, 1449, 1457, 1436, 1452,
     1453, 1438, 1455, 1452, 1450,  461, 1907,  464, 1907, 1446,
      210, 1455, 1437,  467, 1907, 1436,  262, 1459,  470, 1907,
     1430, 1433, 1471, 1457, 1443, 1457, 1439, 1424, 1420,  473,
     1429,  489, 1907, 1424, 1425, 1416, 1416, 1432, 1424, 1907,
     1439, 1412, 1421, 1416, 1409, 1907, 1413, 1415, 1907, 1410,

     1405, 1414, 1407, 1406, 1405, 1400, 1399, 1403, 1415, 1391,
     1399, 1394, 1388, 1398, 1405, 1400, 1403, 1394,  492, 1907,
     1391,  495, 1391, 1403,  498,  501, 1384, 1400, 1392,  513,
     1407, 1380, 1389, 1384, 1377,  516, 1381, 1383,  519, 1378,
     1373, 1382, 1375, 1374, 1373, 1368, 1367, 1371, 1383, 1359,
     1367, 1362, 1356, 1366,  522, 1907, 1373, 1368, 1371, 1362,
     1907, 1369, 1353, 1353, 1366, 1355, 1364, 1353, 1379, 1346,
     1347, 1357,   46,   77,  102,  104,  144,  147,  200,  196,
     1907,  208, 1907,  226,  218,  222,  211, 1907,  230,  222,
      525,  540,  268,  259,  545,  530,  559,  241,  247,  565,

     1907,  249,  269,  262,  273,  265,  570, 1907,  575,  269,
      581, 1907,  273,  299,  289,  309,  302,  307,  318,  318,
      328,  325,  586,  340,  591,  368,  357,  358,  343,  597,
      359,  348,  352,  380,  366,  370, 1907,  369,  387,  401,
      380,  383, 1907,  393,  393,  394,  407,  392,  424,  411,
      416,  420,  431,  419, 1907, 1907,  602,  607,  431,  430,
      427,  429,  431,  448,  457,  467,  486,  516,  468,  473,
      613, 1907,  473,  473,  492,  477,  482,  617,  491,  620,
     1907,  509,  524,  502,  505,  623,  532,  523,  528,  544,
      533,  563,  553,  629, 1907,  567,  639, 1907,  569,  580,

      572,  645,  648, 1907,  651, 1907, 1907,  573, 1907, 1907,
      612,  582,  600,  620,  600,  618,  597,  598,  607,  596,
      607, 1907,  604,  622,  609, 1907,  669, 1907,  611,  622,
      629,  610,  630,  626,  617,  620,  621,  621,  628,  640,
      640,  627,  687,  690,  632,  694,  697,  706, 1907,  713,
      645,  658,  668,  648,  716, 1907,  671,  650,  658,  666,
      656,  666,  724,  666,  684,  671,  732,  740, 1907,  744,
     1907,  684,  679,  695,  701,  694,  689,  704,  705, 1907,
     1907,  706, 1907,  694,  705,  714, 1907,  697,  699,  718,
      696,  742,  706,  729,  717,  706,  721,  726,  713,  709,

      719,  773, 1907,  776, 1907,  728,  780, 1907,  783, 1907,
      792, 1907,  729,  744,  742,  741,  736,  752,  753,  801,
      804,  761,  809,  752,  813, 1907,  766,  775,  820,  825,
     1907,  766,  775,  775, 1907,  784,  789,  774,  783, 1907,
      789,  780,  777,  781,  780,  781,  812,  796,  787,  787,
      797,  802,  814,  823,  791,  794,  794,  821,  801,  805,
      805,  861,  817,  822,  807,  816,  868, 1907,  871, 1907,
      877,  880, 1907,  828,  827,  824,  887, 1907,  834,  845,
      846, 1907,  833, 1907,  847, 1907,  841,  847,  887,  849,
      850,  859,  854,  857,  859,  864,  850,  853,  892,  846,

      895,  857,  859,  865,  881,  863,  876,  864,  875,  875,
      923, 1907,  926,  868,  932,  881,  935, 1907,  942,  883,
      889, 1907,  898, 1907,  895,  898, 1907,  892,  944,  896,
      896,  902,  912,  909,  899,  893,  913,  912,  905,  906,
      906,  914,  907,  922,  914,  906,  904,  950,  928,  973,
      929,  977,  980, 1907,  932,  984, 1907,  937,  989, 1907,
      996,  936,  935,  943,  940,  946,  996,  956,  950,  960,
      950,  964,  989,  976, 1009,  975,  950,  960,  970,  962,
      976,  977,  955,  975,  965,  976,  971, 1026, 1907,  970,
     1030, 1907,  976,  973, 1035, 1907,  982,  979,  984, 1907,

     1907,  978, 1039, 1046,  999, 1002,  990, 1004,  987, 1907,
      997, 1016,  995, 1053, 1022,  993, 1000, 1034, 1035, 1017,
     1017, 1019, 1007, 1012, 1069, 1072, 1907, 1907, 1011, 1907,
     1076, 1907, 1018, 1044, 1024, 1034, 1025, 1026, 1035, 1045,
     1907, 1023, 1055, 1041, 1036, 1038, 1092, 1050, 1062, 1099,
     1102, 1105, 1907, 1108, 1907, 1047, 1076, 1047, 1056, 1069,
     1071, 1066, 1060, 1071, 1066, 1059, 1075, 1070, 1083, 1084,
     1907, 1085, 1065, 1132, 1907, 1135, 1907, 1132, 1073, 1082,
     1122, 1097, 1139, 1084, 1095, 1092, 1102, 1093, 1091, 1097,
     1111, 1112, 1095, 1099, 1095, 1102, 1114, 1112, 1106, 1098,

     1104, 1907, 1105, 1146, 1121, 1165, 1123, 1121, 1147, 1113,
     1114, 1119, 1130, 1168, 1133, 1177, 1139, 1130, 1127, 1129,
     1144, 1133, 1138, 1131, 1907, 1187, 1160, 1137, 1138, 1129,
     1145, 1146, 1139, 1195, 1194, 1197, 1907, 1146, 1157, 1157,
     1146, 1145, 1149, 1147, 1173, 1907, 1167, 1175, 1176, 1155,
     1157, 1158, 1187, 1907, 1160, 1907, 1169, 1172, 1216, 1185,
     1173, 1164, 1166, 1161, 1169, 1163, 1164, 1184, 1176, 1177,
     1172, 1184, 1170, 1178, 1187, 1180, 1907, 1174, 1184, 1176,
     1207, 1186, 1184, 1188, 1189, 1244, 1213, 1225, 1197, 1196,
     1195, 1205, 1199, 1221, 1200, 1203, 1233, 1196, 1216, 1204,

     1218, 1219, 1907, 1201, 1212, 1213, 1204, 1210, 1223, 1226,
     1267, 1226, 1210, 1230, 1242, 1228, 1222, 1277, 1246, 1279,
     1280, 1227, 1250, 1251, 1230, 1238, 1236, 1287, 1282, 1258,
     1236, 1291, 1230, 1236, 1251, 1907, 1233, 1907, 1907, 1253,
     1235, 1236, 1256, 1285, 1258, 1907, 1298, 1246, 1261, 1907,
     1251, 1274, 1307, 1254, 1309, 1256, 1257, 1312, 1255, 1299,
     1311, 1277, 1317, 1275, 1264, 1907, 1277, 1907, 1278, 1279,
     1907, 1269, 1266, 1320, 1269, 1907, 1327, 1289, 1329, 1330,
     1331, 1300, 1279, 1331, 1288, 1907, 1274, 1907, 1907, 1907,
     1275, 1306, 1303, 1287, 1285, 1288, 1281, 1319, 1293, 1314,

     1304, 1294, 1325, 1318, 1289, 1352, 1310, 1323, 1293, 1302,
     1907, 1357, 1317, 1305, 1317, 1907, 1315, 1319, 1363, 1321,
     1365, 1907, 1315, 1907, 1328, 1367, 1322, 1318, 1315, 1315,
     1334, 1322, 1334, 1333, 1377, 1907, 1907, 1383, 1387, 1391,
     1395, 1399, 1403, 1406
    } ;

static yyconst flex_int16_t yy_def[1445] =
    {   0,
     1438, 1438, 1439, 1439, 1440, 1440, 1441, 1441, 1437, 1437,
     1437, 1437, 1442, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1443, 1437, 1444, 1437, 1444, 1437, 1437, 1437, 1437,
     1442,   14, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1443, 1444, 1437, 1444, 1437, 1437, 1437,   34, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437,    0, 1437, 1437, 1437,
     1437, 1437, 1437, 1437
    } ;

static yyconst flex_int16_t yy_nxt[1976] =
    {   0,
     1437,   11,   12,   11, 1437,   13,   11,   12,   11,   20,
       13,   20, 1437,   21,   14,   21,   15,   16, 1437,   14,
     1437,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1437,   27, 1437,  366,   27,
      367,  418,   29,  419,  104,   29,  149, 1437,   17,   64,
       64,   64,  105,   17,  150, 1437,   59,   64,   65,   65,
     1437,   60,   91,   93, 1437,   92,   18,  107,   99,  109,
       94,   18,  100, 1437,  132,  102,   28,   28,   28,  103,
      112,  133,   95,  110,  108,  111,   64,   64,   64,   29,
      113,  138,  119,  134,   30,  139,  120,   30,   32,   32,

       32,   33,  121,  114,  130,   34,  115,  131,  743,  116,
       64,   65,   65,  117,   35,   36,  210,   37,   38,   39,
       40,  744,   41,   42,   43,   44,   45,   46,   47,   48,
       49,  147,   50,   51,   52,  148,  152,   53,   54,   55,
       56,   30,   69,   69,   69,  140,  140,  140,  157,  253,
      142,  142,  142,  153,  745,  254,  746,  210,  158,   70,
      141,   71,   72,   73,   74,  143,   75,   76,   77,   78,
       79,   80,   81,   82,   83,  154,   84,   85,   86,  286,
      198,   87,   88,   89,   90,  144,  144,  144,  747,  155,
      295,  156,  159,  164,  199,  160,  296,  165,  161,  748,

      145,  598,  162,  166,  167,  167,  167,  170,  170,  170,
      172,  172,  172,  211,  140,  140,  140,  288,  289,  168,
      423,  169,  171,  237,  424,  173,  599,  174,  259,  141,
      142,  142,  142,  144,  144,  144,  146,  238,  167,  167,
      167,  170,  170,  170,  260,  143,  638,  749,  145,  172,
      172,  172,  750,  168,  751,  752,  171,  301,  301,  301,
      321,  321,  321,  753,  173,  351,  352,  353,  754,  261,
      464,  639,  302,  755,  465,  322,  603,  303,  756,  757,
      604,  760,  372,  372,  372,  301,  301,  301,  761,  773,
      323,  643,  354,  304,  373,  644,  374,  395,  395,  395,

      302,  399,  399,  399,  321,  321,  321,  414,  414,  414,
      774,  775,  396,  372,  372,  372,  400,  776,  305,  322,
      777,  778,  415,  779,  459,  459,  459,  374,  460,  395,
      395,  395,  783,  784,  401,  402,  403,  399,  399,  399,
      488,  488,  488,  785,  396,  492,  492,  492,  496,  496,
      496,  786,  400,  787,  788,  489,  414,  414,  414,  789,
      493,  404,  790,  497,  501,  501,  501,  505,  505,  505,
      791,  415,  507,  507,  507,  792,  459,  459,  459,  502,
      460,  793,  506,  556,  556,  556,  796,  508,  558,  558,
      558,  564,  564,  564,  569,  569,  569,  799,  557,  488,

      488,  488,  800,  559,  801,  802,  565,  805,  806,  570,
      492,  492,  492,  807,  489,  496,  496,  496,  582,  582,
      582,  501,  501,  501,  808,  493,  809,  810,  566,  811,
      497,  812,  813,  583,  814,  815,  502,  505,  505,  505,
      816,  507,  507,  507,  619,  619,  619,  625,  625,  625,
      817,  818,  506,  819,  820,  584,  508,  821,  620,  822,
      823,  626,  556,  556,  556,  558,  558,  558,  564,  564,
      564,  569,  569,  569,  655,  655,  655,  557,  824,  825,
      559,  826,  829,  565,  830,  831,  570,  832,  833,  656,
      582,  582,  582,  619,  619,  619,  691,  691,  691,  625,

      625,  625,  695,  695,  695,  583,  696,  620,  834,  835,
      692,  836,  841,  626,  700,  700,  700,  707,  707,  707,
      711,  711,  711,  655,  655,  655,  691,  691,  691,  701,
      837,  842,  708,  843,  844,  712,  845,  846,  656,  847,
      692,  758,  758,  758,  838,  759,  695,  695,  695,  762,
      696,  850,  763,  851,  764,  852,  853,  854,  765,  766,
      771,  771,  771,  767,  839,  768,  700,  700,  700,  769,
      770,  707,  707,  707,  840,  772,  780,  780,  780,  857,
      858,  701,  711,  711,  711,  859,  708,  794,  794,  794,
      860,  781,  797,  797,  797,  861,  862,  712,  803,  803,

      803,  863,  795,  827,  827,  827,  782,  798,  758,  758,
      758,  864,  759,  804,  771,  771,  771,  828,  848,  848,
      848,  780,  780,  780,  855,  855,  855,  865,  866,  772,
      794,  794,  794,  849,  867,  872,  781,  873,  875,  856,
      797,  797,  797,  874,  876,  795,  868,  868,  868,  803,
      803,  803,  870,  870,  870,  798,  877,  878,  879,  880,
      881,  869,  882,  883,  804,  884,  885,  871,  886,  887,
      827,  827,  827,  888,  889,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  828,  899,  900,  901,  902,  902,
      902,  904,  904,  904,  906,  907,  907,  907,  909,  909,

      909,  915,  916,  903,  917,  918,  905,  848,  848,  848,
      908,  919,  920,  910,  911,  911,  911,  855,  855,  855,
      921,  922,  849,  923,  924,  925,  925,  925,  927,  912,
      928,  929,  856,  930,  930,  930,  932,  933,  913,  934,
      926,  868,  868,  868,  914,  870,  870,  870,  931,  935,
      936,  937,  938,  939,  940,  941,  869,  942,  943,  944,
      871,  945,  946,  947,  948,  949,  950,  952,  953,  954,
      955,  956,  957,  958,  902,  902,  902,  904,  904,  904,
      959,  907,  907,  907,  909,  909,  909,  960,  961,  903,
      962,  951,  905,  911,  911,  911,  908,  963,  964,  910,

      965,  966,  967,  967,  967,  969,  969,  969,  912,  971,
      972,  972,  972,  974,  925,  925,  925,  968,  975,  976,
      970,  977,  977,  977,  979,  973,  930,  930,  930,  926,
      980,  981,  982,  983,  984,  985,  978,  986,  987,  988,
      989,  931,  990,  991,  992,  994,  995,  996,  993,  998,
      999, 1000, 1002, 1004,  997, 1003, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1011, 1011, 1013, 1014, 1015, 1016,  967,
      967,  967,  969,  969,  969, 1001, 1019, 1012, 1017, 1017,
     1017,  972,  972,  972,  968, 1020, 1021,  970,  977,  977,
      977, 1022, 1023, 1018, 1024, 1025,  973, 1026, 1027, 1028,

     1029, 1030, 1031,  978, 1032, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048,
     1049, 1050, 1051, 1052, 1011, 1011, 1011, 1053, 1053, 1053,
     1055, 1058, 1043, 1056, 1056, 1056, 1017, 1017, 1017, 1012,
     1061, 1062, 1054, 1059, 1059, 1059, 1063, 1064, 1057, 1065,
     1066, 1018, 1067, 1068, 1069, 1070, 1071, 1072, 1060, 1073,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1088, 1088, 1090, 1091, 1091,
     1091, 1053, 1053, 1053, 1093, 1056, 1056, 1056, 1094, 1089,
     1059, 1059, 1059, 1092, 1097, 1098, 1054, 1095, 1095, 1095,

     1057, 1099, 1100, 1101, 1102, 1060, 1103, 1104, 1105, 1106,
     1107, 1108, 1096, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1088, 1088, 1088,
     1123, 1091, 1091, 1091, 1124, 1125, 1095, 1095, 1095, 1126,
     1127, 1128, 1089, 1129, 1130, 1133, 1092, 1131, 1131, 1131,
     1134, 1096, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1132, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1152, 1152, 1154, 1154, 1154, 1156, 1131, 1131, 1131,
     1157, 1158, 1159, 1160, 1161, 1153, 1162, 1163, 1155, 1164,
     1165, 1132, 1166, 1168, 1169, 1167, 1170, 1171, 1172, 1173,

     1174, 1174, 1174, 1176, 1176, 1176, 1152, 1152, 1152, 1154,
     1154, 1154, 1178, 1179, 1180, 1175, 1181, 1182, 1177, 1183,
     1184, 1153, 1185, 1186, 1155, 1187, 1188, 1189, 1190, 1191,
     1192, 1193, 1194, 1174, 1174, 1174, 1176, 1176, 1176, 1195,
     1196, 1197, 1198, 1201, 1202, 1203, 1204, 1199, 1175, 1205,
     1206, 1177, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1200,
     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224,
     1225, 1226, 1227, 1228, 1223, 1231, 1232, 1233, 1234, 1229,
     1235, 1236, 1237, 1238, 1230, 1239, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,

     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1275,
     1276, 1277, 1278, 1272, 1273, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1308, 1309, 1310, 1311, 1312, 1306, 1313, 1314,
     1315, 1316, 1307, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,

     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436,   10,   10,   10,   10,   19,   19,   19,
       19,   22,   22,   22,   22,   24,   24,   24,   24,   31,

       31,  742,   31,   62,   62,   62,   63,  741,   63,  740,
      739,  738,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  713,  710,  709,  706,
      705,  704,  703,  702,  699,  698,  697,  694,  693,  690,
      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  654,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  642,  641,  640,  637,  636,  635,  634,

      633,  632,  631,  630,  629,  628,  627,  624,  623,  622,
      621,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  602,  601,  600,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  568,  567,  563,  562,  561,  560,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,

      513,  512,  511,  510,  509,  504,  503,  500,  499,  498,
      495,  494,  491,  490,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  463,  462,  461,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  422,  421,  420,  417,  416,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  398,  397,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,

      383,  382,  381,  380,  379,  378,  377,  376,  375,  371,
      370,  369,  368,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  300,  299,  298,  297,
      294,  293,  292,  291,  290,  289,  287,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,

      262,  258,  257,  256,  255,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179,  178,  177,  176,  175,  163,  151,  137,
      136,  135,  129,  128,  127,  126,  125,  124,  123,  122,
      118,  106,  101,   98,   97,   96,   68,   67,   66,   33,

       61,   58,   57, 1437,   23,   23,    9, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437
    } ;

static yyconst flex_int16_t yy_chk[1976] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,    0,  282,    8,
      282,  328,   11,  328,   46,   12,   80,    0,    1,   25,
       25,   25,   46,    2,   80,    0,   18,   26,   26,   26,
       32,   18,   36,   37,   32,   36,    1,   48,   41,   49,
       37,    2,   41,   32,   71,   45,   28,   28,   28,   45,
       50,   71,   37,   49,   48,   49,   64,   64,   64,   28,
       50,   75,   53,   71,   11,   75,   53,   12,   14,   14,

       14,   14,   53,   51,   70,   14,   51,   70,  673,   51,
       65,   65,   65,   51,   14,   14,  210,   14,   14,   14,
       14,  674,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   79,   14,   14,   14,   79,   82,   14,   14,   14,
       14,   28,   34,   34,   34,   76,   76,   76,   84,  180,
       77,   77,   77,   82,  675,  180,  676,  125,   84,   34,
       76,   34,   34,   34,   34,   77,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   83,   34,   34,   34,  210,
      114,   34,   34,   34,   34,   78,   78,   78,  677,   83,
      219,   83,   85,   87,  114,   85,  219,   87,   85,  678,

       78,  520,   85,   87,   88,   88,   88,   89,   89,   89,
       90,   90,   90,  125,  140,  140,  140,  212,  212,   88,
      332,   88,   89,  159,  332,   90,  520,   90,  185,  140,
      142,  142,  142,  144,  144,  144,   78,  159,  167,  167,
      167,  170,  170,  170,  185,  142,  561,  679,  144,  172,
      172,  172,  680,  167,  682,  684,  170,  224,  224,  224,
      240,  240,  240,  685,  172,  269,  269,  269,  686,  185,
      378,  561,  224,  687,  378,  240,  524,  224,  689,  690,
      524,  693,  287,  287,  287,  301,  301,  301,  694,  698,
      240,  567,  269,  224,  287,  567,  287,  310,  310,  310,

      301,  313,  313,  313,  321,  321,  321,  325,  325,  325,
      699,  702,  310,  372,  372,  372,  313,  703,  224,  321,
      704,  705,  325,  706,  374,  374,  374,  372,  374,  395,
      395,  395,  710,  713,  313,  313,  313,  399,  399,  399,
      405,  405,  405,  714,  395,  408,  408,  408,  411,  411,
      411,  715,  399,  716,  717,  405,  414,  414,  414,  718,
      408,  313,  719,  411,  417,  417,  417,  420,  420,  420,
      720,  414,  421,  421,  421,  721,  459,  459,  459,  417,
      459,  722,  420,  473,  473,  473,  724,  421,  474,  474,
      474,  479,  479,  479,  482,  482,  482,  726,  473,  488,

      488,  488,  727,  474,  728,  729,  479,  731,  732,  482,
      492,  492,  492,  733,  488,  496,  496,  496,  500,  500,
      500,  501,  501,  501,  734,  492,  735,  736,  479,  738,
      496,  739,  740,  500,  741,  742,  501,  505,  505,  505,
      744,  507,  507,  507,  540,  540,  540,  545,  545,  545,
      745,  746,  505,  747,  748,  500,  507,  749,  540,  750,
      751,  545,  556,  556,  556,  558,  558,  558,  564,  564,
      564,  569,  569,  569,  580,  580,  580,  556,  752,  753,
      558,  754,  759,  564,  760,  761,  569,  762,  763,  580,
      582,  582,  582,  619,  619,  619,  622,  622,  622,  625,

      625,  625,  626,  626,  626,  582,  626,  619,  764,  765,
      622,  766,  769,  625,  630,  630,  630,  636,  636,  636,
      639,  639,  639,  655,  655,  655,  691,  691,  691,  630,
      767,  770,  636,  773,  774,  639,  775,  776,  655,  777,
      691,  692,  692,  692,  767,  692,  695,  695,  695,  696,
      695,  779,  696,  782,  696,  783,  784,  785,  696,  696,
      697,  697,  697,  696,  768,  696,  700,  700,  700,  696,
      696,  707,  707,  707,  768,  697,  709,  709,  709,  787,
      788,  700,  711,  711,  711,  789,  707,  723,  723,  723,
      790,  709,  725,  725,  725,  791,  792,  711,  730,  730,

      730,  793,  723,  757,  757,  757,  709,  725,  758,  758,
      758,  796,  758,  730,  771,  771,  771,  757,  778,  778,
      778,  780,  780,  780,  786,  786,  786,  799,  800,  771,
      794,  794,  794,  778,  801,  808,  780,  811,  812,  786,
      797,  797,  797,  811,  813,  794,  802,  802,  802,  803,
      803,  803,  805,  805,  805,  797,  814,  815,  816,  817,
      818,  802,  819,  820,  803,  821,  823,  805,  824,  825,
      827,  827,  827,  829,  830,  831,  832,  833,  834,  835,
      836,  837,  838,  839,  827,  840,  841,  842,  843,  843,
      843,  844,  844,  844,  845,  846,  846,  846,  847,  847,

      847,  851,  852,  843,  853,  854,  844,  848,  848,  848,
      846,  857,  858,  847,  850,  850,  850,  855,  855,  855,
      859,  860,  848,  861,  862,  863,  863,  863,  864,  850,
      865,  866,  855,  867,  867,  867,  872,  873,  850,  874,
      863,  868,  868,  868,  850,  870,  870,  870,  867,  875,
      876,  877,  878,  879,  882,  884,  868,  885,  886,  888,
      870,  889,  890,  891,  892,  893,  894,  895,  896,  897,
      898,  899,  900,  901,  902,  902,  902,  904,  904,  904,
      906,  907,  907,  907,  909,  909,  909,  913,  914,  902,
      915,  894,  904,  911,  911,  911,  907,  916,  917,  909,

      918,  919,  920,  920,  920,  921,  921,  921,  911,  922,
      923,  923,  923,  924,  925,  925,  925,  920,  927,  928,
      921,  929,  929,  929,  932,  923,  930,  930,  930,  925,
      933,  934,  936,  937,  938,  939,  929,  941,  942,  943,
      944,  930,  945,  946,  947,  948,  949,  950,  947,  951,
      952,  953,  954,  955,  950,  954,  956,  957,  958,  959,
      960,  961,  962,  962,  962,  963,  964,  965,  966,  967,
      967,  967,  969,  969,  969,  953,  974,  962,  971,  971,
      971,  972,  972,  972,  967,  975,  976,  969,  977,  977,
      977,  979,  980,  971,  981,  983,  972,  985,  987,  988,

      989,  990,  991,  977,  992,  993,  994,  995,  996,  997,
      998,  999,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1011, 1011, 1013, 1013, 1013,
     1014, 1016, 1001, 1015, 1015, 1015, 1017, 1017, 1017, 1011,
     1020, 1021, 1013, 1019, 1019, 1019, 1023, 1025, 1015, 1026,
     1028, 1017, 1029, 1030, 1031, 1032, 1033, 1034, 1019, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1050, 1050, 1051, 1052, 1052,
     1052, 1053, 1053, 1053, 1055, 1056, 1056, 1056, 1058, 1050,
     1059, 1059, 1059, 1052, 1062, 1063, 1053, 1061, 1061, 1061,

     1056, 1064, 1065, 1066, 1067, 1059, 1068, 1069, 1070, 1071,
     1072, 1073, 1061, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1088, 1088,
     1090, 1091, 1091, 1091, 1093, 1094, 1095, 1095, 1095, 1097,
     1098, 1099, 1088, 1102, 1103, 1105, 1091, 1104, 1104, 1104,
     1106, 1095, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115,
     1116, 1104, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1125, 1125, 1126, 1126, 1126, 1129, 1131, 1131, 1131,
     1133, 1134, 1135, 1136, 1137, 1125, 1138, 1139, 1126, 1140,
     1142, 1131, 1143, 1144, 1145, 1143, 1146, 1147, 1148, 1149,

     1150, 1150, 1150, 1151, 1151, 1151, 1152, 1152, 1152, 1154,
     1154, 1154, 1156, 1157, 1158, 1150, 1159, 1160, 1151, 1161,
     1162, 1152, 1163, 1164, 1154, 1165, 1166, 1167, 1168, 1169,
     1170, 1172, 1173, 1174, 1174, 1174, 1176, 1176, 1176, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1181, 1174, 1186,
     1187, 1176, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1181,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1204, 1210, 1211, 1212, 1213, 1209,
     1214, 1215, 1216, 1217, 1209, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,

     1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
     1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1257,
     1258, 1259, 1260, 1253, 1253, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
     1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
     1287, 1288, 1289, 1290, 1291, 1292, 1293, 1288, 1294, 1295,
     1296, 1297, 1288, 1298, 1299, 1300, 1301, 1302, 1304, 1305,
     1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,

     1337, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
     1361, 1362, 1363, 1364, 1365, 1367, 1369, 1370, 1372, 1373,
     1374, 1375, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1387, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
     1409, 1410, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1420,
     1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1438, 1438, 1438, 1438, 1439, 1439, 1439,
     1439, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1442,

     1442,  672, 1442, 1443, 1443, 1443, 1444,  671, 1444,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  660,  659,
      658,  657,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  638,  637,  635,
      634,  633,  632,  631,  629,  628,  627,  624,  623,  621,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  598,
      597,  595,  594,  593,  592,  591,  589,  588,  587,  586,
      585,  584,  581,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  568,  566,  563,  562,  560,  555,  554,  553,

      552,  551,  550,  549,  548,  547,  546,  544,  543,  542,
      541,  539,  538,  537,  536,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  523,  522,  521,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  504,
      503,  499,  498,  495,  494,  491,  490,  487,  486,  485,
      484,  483,  481,  480,  478,  477,  476,  475,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  440,  439,
      438,  437,  436,  435,  434,  431,  430,  429,  428,  427,

      426,  425,  424,  423,  422,  419,  418,  416,  413,  412,
      410,  409,  407,  406,  404,  403,  402,  401,  398,  397,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  377,  376,  375,  373,
      371,  370,  367,  366,  364,  363,  362,  360,  359,  357,
      356,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  331,  330,  329,  327,  326,  324,  323,
      320,  319,  318,  317,  316,  315,  314,  312,  311,  309,
      308,  307,  306,  305,  304,  303,  300,  299,  298,  297,

      296,  295,  294,  293,  292,  291,  290,  289,  288,  286,
      285,  284,  283,  281,  280,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  268,  267,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  239,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  223,  222,  221,  220,
      218,  217,  216,  215,  214,  213,  211,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  190,  189,  188,  187,

      186,  184,  183,  182,  181,  179,  178,  177,  176,  175,
      174,  169,  166,  165,  164,  163,  162,  161,  160,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  149,  148,
      147,  146,  139,  138,  137,  136,  135,  134,  133,  132,
      131,  130,  128,  126,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  113,  112,  111,  110,  109,  108,
      107,  106,  105,  104,  103,  102,  101,  100,   99,   98,
       97,   96,   95,   94,   93,   92,   91,   86,   81,   74,
       73,   72,   68,   66,   61,   60,   59,   58,   56,   54,
       52,   47,   44,   40,   39,   38,   33,   31,   30,   29,

       21,   17,   16,    9,    6,    5, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#ifdef OWL
#include "kittingClassesOwl.hh" // for classes referenced in kittingYACC.hh
#else
#include "kittingClasses.hh" // for classes referenced in kittingYACC.hh
#endif
#include "kittingYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1438 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1907 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBEREND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBERSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSSTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYSTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETEREND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETERSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMEEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMESTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSSTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMEEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMESTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTOREND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORSTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return HASTOPEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return HASTOPSTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTSTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMEEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMESTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNSTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMEEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMESTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return KITEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return KITSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONEND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONSTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINEREND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINERSTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHSTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTSTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTSTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLEEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLESTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYSTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSEEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSESTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMEEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMESTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return PARTEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYSTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONSTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTSTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONSTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBEREND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBERSTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return SHAPEEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return SHAPESTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMEEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMESTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return SKUEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return SKUSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTSTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return TRAYEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return TRAYSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTEND;}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTSTART;}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHEND;}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHSTART;}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLEEND;}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLESTART;}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMEEND;}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMESTART;}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ ECH; return BOXYOBJECTTYPEDECL; }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ ECH; return BOXYSHAPETYPEDECL; }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORCHANGINGSTATIONTYPEDECL; }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORHOLDERTYPEDECL; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORTYPEDECL; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ ECH; return GRIPPEREFFECTORTYPEDECL; }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ ECH; return KITTRAYTYPEDECL; }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ ECH; return KITTYPEDECL; }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ ECH; return KITTINGWORKSTATIONTYPEDECL; }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHEMPTYKITTRAYSTYPEDECL; }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHKITSTYPEDECL; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ ECH; return LARGECONTAINERTYPEDECL; }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ ECH; return PARTTYPEDECL; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSBINTYPEDECL; }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYTYPEDECL; }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYWITHPARTSTYPEDECL; }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONINTYPEDECL; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONONTYPEDECL; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONTYPEDECL; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ ECH; return POSEONLYLOCATIONTYPEDECL; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONINTYPEDECL; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONONTYPEDECL; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONTYPEDECL; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ ECH; return ROBOTTYPEDECL; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORMULTICUPTYPEDECL; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORSINGLECUPTYPEDECL; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORTYPEDECL; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{ ECH; return WORKTABLETYPEDECL; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ECH; return XMLNSTARGET;}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 160:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yytext[first] != '"'; first++);
                            first++;
                            for (n = first; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 163:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 164:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1438 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1438 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1437);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

