
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 165
#define YY_END_OF_BUFFER 166
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1410] =
    {   0,
      163,  163,    0,    0,    5,    5,    6,    6,  166,  164,
      163,  163,  164,  164,  161,  164,  164,  164,    2,    3,
        2,    5,  165,    6,    7,    6,    8,  163,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,   41,   45,   47,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  125,  127,  131,   10,    0,    0,    0,
        0,    5,    6,    7,    6,    0,  162,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   43,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
        0,    0,   44,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  124,    0,    0,
      126,    0,  130,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   55,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,    0,  105,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   42,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   71,    0,    0,   83,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  109,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   54,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,    0,    0,    0,    0,    0,
        0,  104,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,    0,    0,   95,    0,    0,  101,
        0,    0,  111,    0,  117,    0,    0,  123,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,    0,   82,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  108,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   39,    0,    0,    0,    0,   63,    0,    0,   73,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,    0,    0,    0,
       94,    0,    0,    0,  100,    0,    0,    0,  110,    0,

        0,  116,    0,    0,    0,  122,    0,  128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
        0,   62,    0,    0,    0,    0,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
      114,    0,    0,    0,    0,    0,    0,   21,    0,    0,
        0,    0,    0,   37,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
       29,    0,   51,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,   91,    0,    0,    0,
        0,  119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,    0,    0,    0,

        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,  113,  121,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    0,   28,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,    0,    0,   90,
        0,    0,    0,    0,    0,  118,    0,   17,   19,    0,

       25,   27,   35,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  107,    0,   13,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   60,    0,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,    0,  112,    0,
      120,    0,    0,    0,   49,    0,    0,    0,    0,   67,
       69,    0,   77,    0,    0,    0,   99,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   16,    0,   18,    0,    0,   24,    0,   26,

        0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
        0,    0,   53,    0,    0,    0,   75,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,    0,    0,   66,    0,   68,    0,    0,
       76,    0,    0,    0,    0,   98,    0,    0,   33,    0,
       59,    0,   79,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   52,    0,    0,

        0,    0,   74,    0,    0,    0,   23,    0,    0,    0,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   32,    0,    0,   58,    0,
        0,   78,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,    0,    0,    0,   88,    0,    0,    0,   65,   97,
        0,    0,    0,    0,    0,    0,    0,  138,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   31,   57,    0,  159,    0,   12,
        0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  154,    0,    0,    0,
       30,    0,   56,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  137,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  145,    0,    0,
        0,    0,    0,    0,    0,  158,    0,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  142,    0,  147,
      148,    0,    0,    0,    0,    0,    0,  157,    0,    0,
        0,  136,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  141,    0,  150,
        0,    0,  153,    0,    0,    0,    0,  134,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  139,    0,  146,
      151,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  155,    0,    0,    0,    0,  156,    0,    0,
        0,    0,    0,  140,    0,  133,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  160,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,    1,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,   61,   62,   63,   64,   65,   66,   67,
       68,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1417] =
    {   0,
        0,    5,    7,    9, 1867, 1866,   22,   25, 1880, 1883,
       28,   31,    0,   97, 1883, 1862, 1820,    0, 1883, 1883,
     1870,    0, 1883,    0,   48,   56, 1883,   75, 1871, 1813,
     1868,   56, 1866,  141, 1883,    5,   19, 1823, 1813, 1817,
     1820, 1820, 1883, 1814,   24,    0, 1821,   22,   25,   32,
       55, 1804,   44, 1845, 1883, 1844, 1883, 1815, 1805, 1807,
     1842,    0,    0,   85,  109, 1805, 1883, 1850,    0,   47,
       30, 1807, 1797, 1801, 1804,  144,  149,  184,   31,    2,
     1807,   46,  135,   73,  148, 1790,  140,  202,  206,  209,
     1799, 1788, 1788, 1802, 1786, 1783, 1796, 1785, 1789, 1883,

     1778, 1779, 1781, 1771, 1779, 1779, 1781, 1782, 1772, 1779,
     1778, 1780, 1783,   89, 1783, 1763, 1770, 1780, 1771, 1775,
     1761, 1754, 1753, 1760,  156, 1804, 1883, 1803, 1883, 1765,
     1754, 1754, 1768, 1752, 1749, 1762, 1751, 1755,  213, 1883,
      229,  232, 1883,  236, 1883, 1744, 1745, 1747, 1737, 1745,
     1745, 1747, 1748, 1738, 1745, 1744, 1746, 1749,  129, 1749,
     1729, 1736, 1746, 1737, 1741, 1727,  239, 1883, 1720,  248,
     1883,  255, 1883, 1719, 1729, 1739, 1738, 1724, 1759,  102,
     1757, 1726, 1727,  207, 1726, 1725, 1722, 1721, 1724, 1723,
     1722, 1707, 1711, 1711, 1734, 1707, 1706, 1711, 1703, 1726,

     1708, 1692, 1708, 1695, 1702, 1703, 1702, 1706,   94, 1691,
       94, 1689, 1695, 1705, 1704, 1690, 1725,  171, 1723, 1692,
     1693,  258, 1883,  264, 1692, 1691, 1688, 1687, 1690, 1689,
     1688, 1673, 1677, 1677,  274, 1674, 1673, 1678, 1670,  280,
     1676, 1660, 1676, 1663, 1670, 1671, 1670, 1673, 1653, 1673,
     1668, 1665, 1656, 1665, 1665, 1652, 1661, 1663, 1650, 1657,
     1660, 1645, 1650, 1649, 1883, 1658, 1643,  252, 1640, 1657,
     1655, 1637, 1641, 1653, 1648, 1647, 1647, 1632, 1641, 1640,
        1, 1629, 1628, 1636, 1639,  290, 1640, 1618, 1636, 1616,
     1636, 1631, 1628, 1619, 1628, 1628, 1615, 1624,  296, 1883,

     1626, 1613, 1620, 1623, 1608, 1613, 1612,  306, 1621, 1606,
      315, 1603, 1620,  318, 1883, 1618, 1600, 1604, 1616, 1611,
      322, 1883, 1610, 1610,  326, 1605, 1604,    4, 1593, 1592,
     1614,  159, 1599, 1598, 1605, 1596, 1590, 1597, 1594, 1582,
     1582, 1598, 1584, 1620, 1588, 1575, 1574, 1574, 1603, 1571,
     1585, 1578, 1594, 1883, 1570, 1576, 1883, 1581, 1572, 1883,
     1577, 1593, 1883, 1562, 1883, 1579, 1564, 1883, 1883, 1564,
     1560,  338, 1553,  342, 1567, 1558, 1578,  166, 1563, 1562,
     1569, 1560, 1554, 1561, 1558, 1546, 1546, 1562, 1548, 1584,
     1552, 1539, 1538,  353, 1883, 1538, 1567,  356, 1883, 1535,

     1549, 1542, 1558,  359, 1534, 1540,  362, 1545, 1536,  365,
     1541, 1557,  381, 1883,  387, 1526,  390, 1543, 1528,  393,
      397, 1528, 1521, 1539, 1520, 1524, 1524, 1520, 1543, 1529,
     1528, 1883, 1523, 1507, 1523, 1514, 1533, 1514, 1513, 1883,
     1523, 1523, 1517, 1502, 1504, 1496, 1514, 1517, 1529, 1883,
     1514, 1520, 1512, 1501, 1505, 1493, 1492,  409, 1489, 1503,
     1502, 1492, 1485, 1503, 1484, 1488, 1488, 1484, 1507, 1493,
     1492,  414, 1487, 1471, 1487, 1478,  417, 1479, 1478,  420,
     1488, 1488, 1482, 1467, 1469,  423, 1883, 1461, 1479,  426,
     1883, 1482, 1494,  442, 1883,  445, 1479,  448, 1883,  451,

      467, 1883, 1478, 1467,  470, 1883,  474, 1883, 1469, 1464,
     1472, 1451, 1467, 1468, 1453, 1466, 1467, 1465, 1461, 1474,
     1469, 1451, 1450,  214, 1473, 1444, 1447, 1485, 1467, 1457,
     1471, 1453, 1438, 1434, 1443, 1438, 1439, 1430,  477, 1440,
     1439, 1430, 1433,  492, 1436, 1431, 1439, 1418, 1434, 1435,
     1420, 1433, 1434, 1432,  495, 1883, 1428, 1441, 1436, 1418,
      498, 1883, 1417,  239, 1440,  501, 1883, 1411, 1414, 1452,
     1434, 1424, 1438, 1420, 1405, 1401,  507, 1883, 1410,  517,
     1883, 1405, 1406, 1397, 1397, 1413, 1405, 1883, 1420, 1393,
     1402, 1404, 1390, 1883, 1394, 1396, 1391, 1386, 1395, 1388,

     1387, 1386, 1381, 1380, 1384, 1392, 1372, 1380, 1375, 1369,
     1379, 1386, 1381, 1384, 1375,  523, 1883, 1372,  526, 1372,
     1384,  529,  534, 1365, 1381, 1373,  544, 1388, 1361, 1370,
     1372, 1358,  547, 1362, 1364, 1359, 1354, 1363, 1356, 1355,
     1354, 1349, 1348, 1352, 1360, 1340, 1348, 1343, 1337, 1347,
     1354, 1349, 1352, 1343, 1883, 1350, 1334, 1334, 1347, 1336,
     1883, 1335, 1357, 1328, 1330, 1345, 1326, 1343, 1334, 1333,
     1339, 1325,    0,    6, 1883,   70, 1883,  107,  108,  134,
      157, 1883,  173,  167,  550,  553,  213,  217,  565,  550,
      579,  205,  191,  585, 1883,  200,  215,  212,  590,  215,

      595, 1883,  601,  215,  219,  240,  227,  250,  243,  248,
      258,  252,  263,  262,  606,  268,  611,  301,  287,  287,
      273,  617,  288,  277,  285,  304,  292,  313,  311,  325,
      339,  323,  327, 1883,  333,  328,  329,  355,  340,  371,
     1883,  361,  349,  360,  369, 1883, 1883,  622,  627,  381,
      380,  377,  379,  381,  380,  389,  412,  416,  433,  413,
      401,  637, 1883,  402,  402,  421,  406,  425,  640, 1883,
      424,  643, 1883,  437,  452,  434,  453,  646,  459,  455,
      456,  469,  454,  488,  649,  665, 1883,  478,  668, 1883,
      476,  492,  480,  671,  674, 1883,  677, 1883, 1883,  481,

     1883, 1883,  536,  508,  511,  526,  507,  533,  513,  514,
      522,  517,  536,  537,  554,  545, 1883,  693, 1883,  548,
      563,  570,  555,  579,  579,  572,  575,  594,  594,  602,
      613,  614,  601,  696,  699,  601,  702,  708,  718,  615,
      634,  647,  628,  724, 1883,  646,  626,  627,  636,  625,
      648,  728, 1883,  645,  667,  654,  734,  744, 1883,  753,
     1883,  664,  659,  674, 1883,  674,  666,  684,  685, 1883,
     1883,  690, 1883,  678,  689,  698, 1883,  686,  687,  707,
      685,  735,  699,  722,  711,  700,  715,  720,  707,  703,
      713,  769, 1883,  772, 1883,  716,  775, 1883,  778, 1883,

      794, 1883,  724,  735,  797,  737,  725,  741,  742,  800,
      803,  744,  806,  732,  759,  768,  822,  825, 1883,  756,
      760,  768, 1883,  774,  760,  769, 1883,  781,  772,  769,
      773,  771,  772,  803,  787,  778,  779,  788,  794,  806,
      815,  783,  786,  786,  813,  793,  797,  804,  853, 1883,
      856,  816,  801,  810,  862, 1883,  872, 1883,  878,  881,
     1883,  818,  810,  808,  884, 1883,  814,  829, 1883,  815,
     1883,  839, 1883,  833,  839,  879,  841,  843,  851,  849,
      851,  857,  843,  846,  885,  839,  888,  850,  852,  858,
      874,  856,  869,  857,  868,  915,  918, 1883,  860,  925,

      873,  934, 1883,  937,  867,  877, 1883,  882,  880,  882,
     1883,  884,  935,  887,  887,  893,  899,  888,  882,  903,
      902,  896,  897,  897,  905,  898,  913,  905,  897,  895,
      941,  919,  964,  920,  968, 1883,  920,  972, 1883,  925,
      976, 1883,  980,  927,  926,  929,  927,  933,  983,  943,
      937,  947,  951,  976,  962,  995,  961,  936,  946,  956,
      948,  962,  963,  941,  961,  951,  962,  957, 1012, 1883,
      956,  959,  956, 1018, 1883,  965,  962,  967, 1883, 1883,
      960, 1021, 1028,  981,  970,  984,  968, 1883,  978,  997,
      976, 1034, 1003,  974,  980, 1015, 1016,  998,  998, 1000,

      988,  993, 1050, 1053, 1883, 1883,  992, 1883, 1057, 1883,
      999, 1004, 1014, 1005, 1005, 1015, 1024, 1883, 1003, 1034,
     1021, 1017, 1018, 1072, 1030, 1042, 1079, 1082, 1085, 1883,
     1088, 1883, 1027, 1056, 1034, 1048, 1049, 1045, 1038, 1050,
     1044, 1038, 1054, 1049, 1062, 1063, 1883, 1064, 1044, 1111,
     1883, 1114, 1883, 1111, 1052, 1100, 1075, 1117, 1062, 1073,
     1069, 1080, 1070, 1069, 1075, 1089, 1090, 1073, 1077, 1073,
     1080, 1089, 1083, 1075, 1081, 1883, 1082, 1123, 1098, 1142,
     1100, 1098, 1124, 1090, 1091, 1096, 1107, 1145, 1110, 1115,
     1105, 1103, 1105, 1120, 1109, 1114, 1107, 1883, 1163, 1136,

     1113, 1114, 1105, 1121, 1122, 1115, 1171, 1170, 1173, 1122,
     1133, 1133, 1122, 1121, 1125, 1123, 1149, 1883, 1143, 1151,
     1152, 1131, 1133, 1134, 1163, 1883, 1136, 1883, 1145, 1148,
     1192, 1161, 1149, 1140, 1142, 1137, 1145, 1139, 1140, 1160,
     1152, 1153, 1148, 1160, 1146, 1154, 1163, 1156, 1883, 1150,
     1160, 1152, 1183, 1162, 1160, 1164, 1165, 1220, 1189, 1201,
     1173, 1172, 1171, 1181, 1175, 1197, 1176, 1179, 1209, 1172,
     1192, 1180, 1194, 1195, 1883, 1177, 1188, 1189, 1180, 1186,
     1199, 1202, 1243, 1202, 1186, 1206, 1218, 1204, 1198, 1253,
     1222, 1255, 1256, 1203, 1226, 1227, 1206, 1214, 1212, 1263,

     1258, 1234, 1212, 1267, 1206, 1212, 1227, 1883, 1209, 1883,
     1883, 1229, 1211, 1212, 1232, 1261, 1234, 1883, 1274, 1222,
     1237, 1883, 1227, 1250, 1283, 1230, 1285, 1232, 1233, 1288,
     1231, 1275, 1287, 1253, 1293, 1251, 1240, 1883, 1253, 1883,
     1254, 1255, 1883, 1245, 1242, 1296, 1245, 1883, 1303, 1265,
     1305, 1306, 1307, 1276, 1255, 1307, 1264, 1883, 1250, 1883,
     1883, 1883, 1251, 1282, 1279, 1263, 1261, 1264, 1257, 1295,
     1269, 1290, 1280, 1270, 1301, 1294, 1265, 1328, 1286, 1299,
     1269, 1278, 1883, 1333, 1293, 1281, 1293, 1883, 1291, 1295,
     1339, 1297, 1341, 1883, 1291, 1883, 1304, 1343, 1298, 1294,

     1291, 1291, 1310, 1298, 1310, 1309, 1353, 1883, 1883, 1359,
     1363, 1367, 1371, 1375, 1379, 1382
    } ;

static yyconst flex_int16_t yy_def[1417] =
    {   0,
     1410, 1410, 1411, 1411, 1412, 1412, 1413, 1413, 1409, 1409,
     1409, 1409, 1414, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1415, 1409, 1416, 1409, 1416, 1409, 1409, 1409, 1409,
     1414,   14, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1415, 1416, 1409, 1416, 1409, 1409, 1409,   34, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,    0, 1409,
     1409, 1409, 1409, 1409, 1409, 1409
    } ;

static yyconst flex_int16_t yy_nxt[1952] =
    {   0,
     1409,   11,   12,   11, 1409,   13,   11,   12,   11,   20,
       13,   20, 1409,   21,   14,   21,   15,   16, 1409,   14,
     1409,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1409,   27, 1409,  366,   27,
      367,  418,   29,  419,  104,   29,  149,  740,   17,   64,
       64,   64,  105,   17,  150,  741,   59,   64,   65,   65,
     1409,   60,   91,   93, 1409,   92,   18,  107,  102,  109,
       94,   18,  103, 1409,  132,  147,   28,   28,   28,  148,
      112,  133,   95,  110,  108,  111,   64,   64,   64,   29,
      113,  152,  119,  134,   30,  209,  120,   30,   32,   32,

       32,   33,  121,  114,  130,   34,  115,  131,  153,  116,
       64,   65,   65,  117,   35,   36,  742,   37,   38,   39,
       40,  157,   41,   42,   43,   44,   45,   46,   47,   48,
       49,  158,   50,   51,   52,  197,  743,   53,   54,   55,
       56,   30,   69,   69,   69,  139,  139,  139,  253,  198,
      142,  142,  142,  744,  254,  287,  288,  209,  285,   70,
      140,   71,   72,   73,   74,  143,   75,   76,   77,   78,
       79,   80,   81,   82,   83,  237,   84,   85,   86,  154,
      745,   87,   88,   89,   90,  144,  144,  144,  164,  238,
      423,  141,  165,  155,  424,  156,  159,  463,  166,  160,

      145,  464,  161,  167,  167,  167,  162,  170,  170,  170,
      172,  172,  172,  210,  139,  139,  139,  294,  168,  746,
      169,  747,  171,  295,  748,  173,  751,  174,  258,  140,
      222,  222,  222,  142,  142,  142,  146,  144,  144,  144,
      167,  167,  167,  600,  259,  223,  752,  601,  143,  170,
      170,  170,  145,  764,  765,  168,  172,  172,  172,  222,
      222,  222,  766,  767,  171,  299,  299,  299,  639,  260,
      768,  173,  640,  771,  223,  314,  314,  314,  775,  776,
      300,  321,  321,  321,  777,  301,  350,  351,  352,  778,
      315,  372,  372,  372,  779,  780,  322,  299,  299,  299,

      781,  302,  782,  373,  783,  374,  316,  394,  394,  394,
      784,  785,  300,  353,  788,  323,  398,  398,  398,  314,
      314,  314,  395,  321,  321,  321,  303,  413,  413,  413,
      791,  399,  792,  793,  315,  794,  797,  798,  322,  372,
      372,  372,  414,  458,  458,  458,  799,  459,  800,  400,
      401,  402,  801,  374,  394,  394,  394,  398,  398,  398,
      486,  486,  486,  490,  490,  490,  494,  494,  494,  395,
      802,  803,  399,  804,  805,  487,  403,  806,  491,  807,
      808,  495,  413,  413,  413,  809,  810,  415,  498,  498,
      498,  501,  501,  501,  505,  505,  505,  414,  507,  507,

      507,  811,  812,  499,  813,  814,  502,  815,  816,  506,
      458,  458,  458,  508,  459,  555,  555,  555,  561,  561,
      561,  566,  566,  566,  486,  486,  486,  490,  490,  490,
      556,  817,  820,  562,  821,  822,  567,  823,  824,  487,
      825,  826,  491,  494,  494,  494,  577,  577,  577,  498,
      498,  498,  580,  580,  580,  563,  827,  832,  495,  833,
      828,  578,  834,  835,  499,  836,  837,  581,  501,  501,
      501,  505,  505,  505,  829,  507,  507,  507,  616,  616,
      616,  830,  838,  502,  839,  840,  506,  841,  842,  582,
      508,  831,  617,  622,  622,  622,  555,  555,  555,  561,

      561,  561,  566,  566,  566,  843,  846,  623,  577,  577,
      577,  556,  847,  848,  562,  849,  850,  567,  580,  580,
      580,  851,  854,  578,  616,  616,  616,  685,  685,  685,
      622,  622,  622,  581,  855,  689,  689,  689,  617,  690,
      856,  686,  857,  862,  623,  694,  694,  694,  701,  701,
      701,  685,  685,  685,  749,  749,  749,  865,  750,  866,
      695,  863,  867,  702,  868,  686,  689,  689,  689,  753,
      690,  864,  754,  869,  755,  870,  871,  872,  756,  757,
      762,  762,  762,  758,  873,  759,  694,  694,  694,  760,
      761,  769,  769,  769,  874,  763,  701,  701,  701,  875,

      876,  695,  772,  772,  772,  877,  770,  786,  786,  786,
      878,  702,  789,  789,  789,  879,  880,  773,  795,  795,
      795,  881,  787,  818,  818,  818,  882,  790,  749,  749,
      749,  883,  750,  796,  884,  885,  774,  819,  762,  762,
      762,  769,  769,  769,  772,  772,  772,  844,  844,  844,
      852,  852,  852,  763,  886,  887,  770,  888,  889,  773,
      890,  891,  845,  896,  905,  853,  786,  786,  786,  789,
      789,  789,  858,  858,  858,  795,  795,  795,  860,  860,
      860,  787,  906,  907,  790,  908,  909,  859,  910,  911,
      796,  912,  913,  861,  818,  818,  818,  892,  892,  892,

      894,  894,  894,  897,  897,  897,  914,  915,  819,  899,
      899,  899,  893,  916,  917,  895,  920,  921,  898,  901,
      901,  901,  922,  923,  900,  844,  844,  844,  924,  852,
      852,  852,  925,  926,  902,  918,  918,  918,  927,  928,
      845,  929,  930,  903,  853,  858,  858,  858,  931,  932,
      919,  933,  934,  904,  860,  860,  860,  935,  936,  937,
      859,  939,  940,  941,  942,  943,  944,  945,  946,  861,
      892,  892,  892,  894,  894,  894,  897,  897,  897,  899,
      899,  899,  947,  948,  938,  893,  951,  952,  895,  953,
      954,  898,  959,  962,  900,  901,  901,  901,  949,  949,

      949,  955,  955,  955,  957,  957,  957,  960,  960,  960,
      902,  963,  964,  950,  967,  968,  956,  969,  970,  958,
      971,  972,  961,  965,  965,  965,  918,  918,  918,  973,
      974,  975,  976,  977,  978,  979,  980,  981,  966,  982,
      984,  919,  985,  986,  988,  990,  983,  989,  991,  992,
      993,  994,  995,  996,  949,  949,  949,  997,  997,  997,
      999, 1000, 1001,  955,  955,  955, 1004,  987, 1005,  950,
     1006, 1007,  998,  957,  957,  957, 1008, 1009,  956, 1002,
     1002, 1002,  960,  960,  960,  965,  965,  965,  958, 1010,
     1011, 1012, 1013, 1014, 1003, 1015, 1016,  961, 1017, 1018,

      966, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1035, 1035,  997,
      997,  997, 1037, 1040, 1043, 1026, 1038, 1038, 1038, 1044,
     1045, 1036, 1046, 1047,  998, 1002, 1002, 1002, 1041, 1041,
     1041, 1039, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1003, 1056, 1057, 1042, 1058, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1069, 1069, 1071, 1035,
     1035, 1035, 1072, 1038, 1038, 1038, 1073, 1041, 1041, 1041,
     1070, 1074, 1074, 1074, 1036, 1076, 1077, 1078, 1039, 1079,
     1080, 1081, 1042, 1082, 1083, 1084, 1075, 1085, 1086, 1087,

     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
     1098, 1099, 1100, 1069, 1069, 1069, 1101, 1102, 1103, 1074,
     1074, 1074, 1104, 1105, 1106, 1107, 1108, 1111, 1070, 1109,
     1109, 1109, 1112, 1113, 1075, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1110, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1129, 1129, 1131, 1131, 1131, 1133, 1109, 1109,
     1109, 1134, 1135, 1136, 1137, 1138, 1130, 1139, 1140, 1132,
     1141, 1142, 1110, 1144, 1143, 1145, 1146, 1147, 1148, 1149,
     1150, 1150, 1150, 1152, 1152, 1152, 1129, 1129, 1129, 1131,
     1131, 1131, 1154, 1155, 1156, 1151, 1157, 1158, 1153, 1159,

     1160, 1130, 1161, 1162, 1132, 1163, 1164, 1165, 1166, 1167,
     1168, 1169, 1150, 1150, 1150, 1152, 1152, 1152, 1170, 1171,
     1172, 1175, 1176, 1177, 1178, 1173, 1179, 1151, 1180, 1181,
     1153, 1182, 1183, 1184, 1185, 1186, 1187, 1174, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200,
     1201, 1196, 1204, 1205, 1206, 1207, 1202, 1208, 1209, 1210,
     1211, 1203, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1246, 1247, 1248, 1249, 1250, 1244,

     1245, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1280, 1281,
     1282, 1283, 1284, 1278, 1285, 1286, 1287, 1288, 1279, 1289,
     1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
     1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
     1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,

     1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,   10,
       10,   10,   10,   19,   19,   19,   19,   22,   22,   22,
       22,   24,   24,   24,   24,   31,   31,  739,   31,   62,
       62,   62,   63,  738,   63,  737,  736,  735,  734,  733,
      732,  731,  730,  729,  728,  727,  726,  725,  724,  723,

      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  705,  704,  703,
      700,  699,  698,  697,  696,  693,  692,  691,  688,  687,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      644,  643,  642,  641,  638,  637,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  621,
      620,  619,  618,  615,  614,  613,  612,  611,  610,  609,

      608,  607,  606,  605,  604,  603,  602,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  579,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  565,  564,  560,  559,  558,  557,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  504,  503,  500,  497,
      496,  493,  492,  489,  488,  485,  484,  483,  482,  481,

      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  462,  461,  460,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  422,  421,  420,  417,  416,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  397,  396,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  371,  370,  369,
      368,  365,  364,  363,  362,  361,  360,  359,  358,  357,

      356,  355,  354,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  320,
      319,  318,  317,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  298,  297,  296,  293,  292,  291,  290,
      289,  288,  286,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  257,  256,  255,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  236,  235,  234,  233,  232,  231,

      230,  229,  228,  227,  226,  225,  224,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      163,  151,  138,  137,  136,  135,  129,  128,  127,  126,
      125,  124,  123,  122,  118,  106,  101,  100,   99,   98,
       97,   96,   68,   67,   66,   33,   61,   58,   57, 1409,
       23,   23,    9, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409
    } ;

static yyconst flex_int16_t yy_chk[1952] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,    0,  281,    8,
      281,  328,   11,  328,   46,   12,   80,  673,    1,   25,
       25,   25,   46,    2,   80,  674,   18,   26,   26,   26,
       32,   18,   36,   37,   32,   36,    1,   48,   45,   49,
       37,    2,   45,   32,   71,   79,   28,   28,   28,   79,
       50,   71,   37,   49,   48,   49,   64,   64,   64,   28,
       50,   82,   53,   71,   11,  209,   53,   12,   14,   14,

       14,   14,   53,   51,   70,   14,   51,   70,   82,   51,
       65,   65,   65,   51,   14,   14,  676,   14,   14,   14,
       14,   84,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   84,   14,   14,   14,  114,  678,   14,   14,   14,
       14,   28,   34,   34,   34,   76,   76,   76,  180,  114,
       77,   77,   77,  679,  180,  211,  211,  125,  209,   34,
       76,   34,   34,   34,   34,   77,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  159,   34,   34,   34,   83,
      680,   34,   34,   34,   34,   78,   78,   78,   87,  159,
      332,   76,   87,   83,  332,   83,   85,  378,   87,   85,

       78,  378,   85,   88,   88,   88,   85,   89,   89,   89,
       90,   90,   90,  125,  139,  139,  139,  218,   88,  681,
       88,  683,   89,  218,  684,   90,  687,   90,  184,  139,
      141,  141,  141,  142,  142,  142,   78,  144,  144,  144,
      167,  167,  167,  524,  184,  141,  688,  524,  142,  170,
      170,  170,  144,  692,  693,  167,  172,  172,  172,  222,
      222,  222,  696,  697,  170,  224,  224,  224,  564,  184,
      698,  172,  564,  700,  222,  235,  235,  235,  704,  705,
      224,  240,  240,  240,  706,  224,  268,  268,  268,  707,
      235,  286,  286,  286,  708,  709,  240,  299,  299,  299,

      710,  224,  711,  286,  712,  286,  235,  308,  308,  308,
      713,  714,  299,  268,  716,  240,  311,  311,  311,  314,
      314,  314,  308,  321,  321,  321,  224,  325,  325,  325,
      718,  311,  719,  720,  314,  721,  723,  724,  321,  372,
      372,  372,  325,  374,  374,  374,  725,  374,  726,  311,
      311,  311,  727,  372,  394,  394,  394,  398,  398,  398,
      404,  404,  404,  407,  407,  407,  410,  410,  410,  394,
      728,  729,  398,  730,  731,  404,  311,  732,  407,  733,
      735,  410,  413,  413,  413,  736,  737,  325,  415,  415,
      415,  417,  417,  417,  420,  420,  420,  413,  421,  421,

      421,  738,  739,  415,  740,  742,  417,  743,  744,  420,
      458,  458,  458,  421,  458,  472,  472,  472,  477,  477,
      477,  480,  480,  480,  486,  486,  486,  490,  490,  490,
      472,  745,  750,  477,  751,  752,  480,  753,  754,  486,
      755,  756,  490,  494,  494,  494,  496,  496,  496,  498,
      498,  498,  500,  500,  500,  477,  757,  760,  494,  761,
      758,  496,  764,  765,  498,  766,  767,  500,  501,  501,
      501,  505,  505,  505,  758,  507,  507,  507,  539,  539,
      539,  759,  768,  501,  771,  774,  505,  775,  776,  500,
      507,  759,  539,  544,  544,  544,  555,  555,  555,  561,

      561,  561,  566,  566,  566,  777,  779,  544,  577,  577,
      577,  555,  780,  781,  561,  782,  783,  566,  580,  580,
      580,  784,  788,  577,  616,  616,  616,  619,  619,  619,
      622,  622,  622,  580,  791,  623,  623,  623,  616,  623,
      792,  619,  793,  800,  622,  627,  627,  627,  633,  633,
      633,  685,  685,  685,  686,  686,  686,  804,  686,  805,
      627,  803,  806,  633,  807,  685,  689,  689,  689,  690,
      689,  803,  690,  808,  690,  809,  810,  811,  690,  690,
      691,  691,  691,  690,  812,  690,  694,  694,  694,  690,
      690,  699,  699,  699,  813,  691,  701,  701,  701,  814,

      815,  694,  703,  703,  703,  816,  699,  715,  715,  715,
      820,  701,  717,  717,  717,  821,  822,  703,  722,  722,
      722,  823,  715,  748,  748,  748,  824,  717,  749,  749,
      749,  825,  749,  722,  826,  827,  703,  748,  762,  762,
      762,  769,  769,  769,  772,  772,  772,  778,  778,  778,
      785,  785,  785,  762,  828,  829,  769,  830,  831,  772,
      832,  833,  778,  836,  840,  785,  786,  786,  786,  789,
      789,  789,  794,  794,  794,  795,  795,  795,  797,  797,
      797,  786,  841,  842,  789,  843,  846,  794,  847,  848,
      795,  849,  850,  797,  818,  818,  818,  834,  834,  834,

      835,  835,  835,  837,  837,  837,  851,  854,  818,  838,
      838,  838,  834,  855,  856,  835,  862,  863,  837,  839,
      839,  839,  864,  866,  838,  844,  844,  844,  867,  852,
      852,  852,  868,  869,  839,  857,  857,  857,  872,  874,
      844,  875,  876,  839,  852,  858,  858,  858,  878,  879,
      857,  880,  881,  839,  860,  860,  860,  882,  883,  884,
      858,  885,  886,  887,  888,  889,  890,  891,  896,  860,
      892,  892,  892,  894,  894,  894,  897,  897,  897,  899,
      899,  899,  903,  904,  884,  892,  906,  907,  894,  908,
      909,  897,  912,  914,  899,  901,  901,  901,  905,  905,

      905,  910,  910,  910,  911,  911,  911,  913,  913,  913,
      901,  915,  916,  905,  920,  921,  910,  922,  924,  911,
      925,  926,  913,  917,  917,  917,  918,  918,  918,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  917,  937,
      938,  918,  939,  940,  941,  942,  937,  941,  943,  944,
      945,  946,  947,  948,  949,  949,  949,  951,  951,  951,
      952,  953,  954,  955,  955,  955,  962,  940,  963,  949,
      964,  967,  951,  957,  957,  957,  968,  970,  955,  959,
      959,  959,  960,  960,  960,  965,  965,  965,  957,  972,
      974,  975,  976,  977,  959,  978,  979,  960,  980,  981,

      965,  982,  983,  984,  985,  985,  986,  987,  988,  989,
      990,  991,  992,  993,  994,  995,  996,  996,  996,  997,
      997,  997,  999, 1001, 1005,  987, 1000, 1000, 1000, 1006,
     1008,  996, 1009, 1010,  997, 1002, 1002, 1002, 1004, 1004,
     1004, 1000, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1002, 1020, 1021, 1004, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1033, 1033, 1034, 1035,
     1035, 1035, 1037, 1038, 1038, 1038, 1040, 1041, 1041, 1041,
     1033, 1043, 1043, 1043, 1035, 1044, 1045, 1046, 1038, 1047,
     1048, 1049, 1041, 1050, 1051, 1052, 1043, 1053, 1054, 1055,

     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1069, 1069, 1071, 1072, 1073, 1074,
     1074, 1074, 1076, 1077, 1078, 1081, 1082, 1084, 1069, 1083,
     1083, 1083, 1085, 1086, 1074, 1087, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1083, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1103, 1103, 1103, 1104, 1104, 1104, 1107, 1109, 1109,
     1109, 1111, 1112, 1113, 1114, 1115, 1103, 1116, 1117, 1104,
     1119, 1120, 1109, 1121, 1120, 1122, 1123, 1124, 1125, 1126,
     1127, 1127, 1127, 1128, 1128, 1128, 1129, 1129, 1129, 1131,
     1131, 1131, 1133, 1134, 1135, 1127, 1136, 1137, 1128, 1138,

     1139, 1129, 1140, 1141, 1131, 1142, 1143, 1144, 1145, 1146,
     1148, 1149, 1150, 1150, 1150, 1152, 1152, 1152, 1154, 1155,
     1156, 1157, 1158, 1159, 1160, 1156, 1161, 1150, 1162, 1163,
     1152, 1164, 1165, 1166, 1167, 1168, 1169, 1156, 1170, 1171,
     1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1178, 1184, 1185, 1186, 1187, 1183, 1188, 1189, 1190,
     1191, 1183, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1227, 1229, 1230, 1231, 1232, 1225,

     1225, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
     1263, 1264, 1265, 1260, 1266, 1267, 1268, 1269, 1260, 1270,
     1271, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
     1302, 1303, 1304, 1305, 1306, 1307, 1309, 1312, 1313, 1314,
     1315, 1316, 1317, 1319, 1320, 1321, 1323, 1324, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,

     1337, 1339, 1341, 1342, 1344, 1345, 1346, 1347, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385,
     1386, 1387, 1389, 1390, 1391, 1392, 1393, 1395, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1410,
     1410, 1410, 1410, 1411, 1411, 1411, 1411, 1412, 1412, 1412,
     1412, 1413, 1413, 1413, 1413, 1414, 1414,  672, 1414, 1415,
     1415, 1415, 1416,  671, 1416,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  660,  659,  658,  657,  656,  654,

      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      632,  631,  630,  629,  628,  626,  625,  624,  621,  620,
      618,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  593,  592,  591,  590,  589,  587,  586,  585,
      584,  583,  582,  579,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  565,  563,  560,  559,  558,  557,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  543,
      542,  541,  540,  538,  537,  536,  535,  534,  533,  532,

      531,  530,  529,  528,  527,  526,  525,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  504,  503,  497,  493,  492,  489,  488,  485,
      484,  483,  482,  481,  479,  478,  476,  475,  474,  473,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  457,  456,  455,  454,  453,  452,  451,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  439,
      438,  437,  436,  435,  434,  433,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  419,  418,  416,  412,
      411,  409,  408,  406,  405,  403,  402,  401,  400,  397,

      396,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  377,  376,  375,  373,
      371,  370,  367,  366,  364,  362,  361,  359,  358,  356,
      355,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  331,  330,  329,  327,  326,  324,  323,  320,
      319,  318,  317,  316,  313,  312,  310,  309,  307,  306,
      305,  304,  303,  302,  301,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  285,  284,  283,
      282,  280,  279,  278,  277,  276,  275,  274,  273,  272,

      271,  270,  269,  267,  266,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  239,
      238,  237,  236,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  221,  220,  219,  217,  216,  215,  214,
      213,  212,  210,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  183,  182,  181,
      179,  178,  177,  176,  175,  174,  169,  166,  165,  164,
      163,  162,  161,  160,  158,  157,  156,  155,  154,  153,

      152,  151,  150,  149,  148,  147,  146,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  128,  126,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  113,  112,
      111,  110,  109,  108,  107,  106,  105,  104,  103,  102,
      101,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       86,   81,   75,   74,   73,   72,   68,   66,   61,   60,
       59,   58,   56,   54,   52,   47,   44,   42,   41,   40,
       39,   38,   33,   31,   30,   29,   21,   17,   16,    9,
        6,    5, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "kittingClasses.hh" // for classes referenced in kittingYACC.hh
#include "kittingYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1410 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1883 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBEREND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBERSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSSTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYSTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETEREND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETERSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNREFEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNREFSTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSSTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORREFEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORREFSTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTOREND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORSTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTSTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return IDEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return IDSTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNREFEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNREFSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNSTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUREFEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUREFSTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return KITEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return KITSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINEREND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINERSTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITSTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTSTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTSTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLEEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLESTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSEEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSESTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUREFEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUREFSTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return PARTEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYSTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONSTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTSTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return REFEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return REFSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTSTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONEND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONSTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBEREND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBERSTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return SHAPEEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return SHAPESTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return SKUREFEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return SKUREFSTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return SKUEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return SKUSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTSTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return TRAYEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return TRAYSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return TRAYSEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return TRAYSSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITEND;}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITSTART;}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTEND;}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTSTART;}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHEND;}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHSTART;}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLEEND;}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLESTART;}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMEEND;}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMESTART;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ ECH; return BOXYOBJECTTYPEDECL; }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORCHANGINGSTATIONTYPEDECL; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORHOLDERTYPEDECL; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORTYPEDECL; }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ ECH; return GRIPPEREFFECTORTYPEDECL; }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ ECH; return KITTRAYTYPEDECL; }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ ECH; return KITTYPEDECL; }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ ECH; return KITTINGWORKSTATIONTYPEDECL; }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHEMPTYKITTRAYSTYPEDECL; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHKITSTYPEDECL; }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ ECH; return LARGECONTAINERTYPEDECL; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ ECH; return PARTTYPEDECL; }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSBINTYPEDECL; }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYTYPEDECL; }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYWITHPARTSTYPEDECL; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONINTYPEDECL; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONONTYPEDECL; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONTYPEDECL; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ ECH; return POSEONLYLOCATIONTYPEDECL; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONINTYPEDECL; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONONTYPEDECL; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONTYPEDECL; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ ECH; return ROBOTTYPEDECL; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORMULTICUPTYPEDECL; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORSINGLECUPTYPEDECL; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORTYPEDECL; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ ECH; return WORKTABLETYPEDECL; }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ECH; return XMLNSTARGET;}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 161:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yytext[first] != '"'; first++);
                            first++;
                            for (n = first; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 164:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 165:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1410 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1410 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1409);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

