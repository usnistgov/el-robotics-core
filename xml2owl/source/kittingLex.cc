
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1416] =
    {   0,
      159,  159,    0,    0,    5,    5,    6,    6,  162,  160,
      159,  159,  160,  160,  157,  160,  160,  160,    2,    3,
        2,    5,  161,    6,    7,    6,    8,  159,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,   41,   43,   45,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  121,  123,  127,   10,    0,    0,    0,
        0,    5,    6,    7,    6,    0,  158,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    0,    1,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
       42,    0,   44,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  120,    0,    0,  122,    0,
      126,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  103,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       71,    0,    0,   83,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  107,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   54,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   87,    0,    0,
       93,    0,    0,   99,    0,    0,    0,  113,    0,    0,
      119,  125,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   70,    0,    0,
        0,   82,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   39,    0,    0,    0,    0,   63,    0,
        0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  111,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   86,    0,
        0,    0,   92,    0,    0,    0,   98,    0,    0,    0,
        0,  112,    0,    0,    0,  118,    0,  124,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  101,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
        0,    0,   62,    0,    0,    0,    0,   72,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      110,    0,    0,    0,    0,    0,    0,   21,    0,    0,
        0,    0,    0,   37,    0,    0,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    9,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,    0,    0,    0,    0,   15,    0,
        0,    0,    0,    0,    0,    0,   49,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   85,    0,
       91,    0,    0,    0,    0,  115,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
        0,    0,    0,    0,    0,   36,    0,    0,    0,   52,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   29,    0,    0,    0,    0,    0,
       61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  109,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,    0,    0,   90,    0,    0,    0,    0,
        0,  114,    0,   17,   19,    0,   25,   27,   35,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
        0,    0,    0,  105,    0,   13,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
        0,    0,    0,   60,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  108,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,   67,   69,    0,
       77,    0,    0,    0,   97,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,   18,    0,    0,   24,    0,   26,    0,   34,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,    0,    0,  104,    0,
        0,    0,   47,    0,    0,    0,    0,   75,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,   68,    0,    0,
       76,    0,    0,    0,    0,   96,    0,    0,    0,   51,
        0,   59,    0,   79,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   46,    0,

        0,    0,    0,    0,   74,    0,    0,    0,   23,    0,
       33,    0,    0,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   50,
        0,    0,   58,    0,    0,   78,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,    0,   32,    0,    0,    0,
       88,    0,    0,    0,   65,   95,    0,    0,    0,    0,
        0,    0,    0,  134,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       31,   57,    0,  155,    0,   12,    0,    0,    0,    0,
        0,    0,    0,  139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  150,    0,    0,    0,   30,    0,   56,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  133,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  140,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  141,    0,    0,    0,    0,    0,    0,
        0,  154,    0,  128,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  131,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      145,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  138,    0,  143,  144,    0,    0,    0,
        0,    0,    0,  153,    0,    0,    0,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  137,    0,  146,    0,    0,  149,    0,
        0,    0,    0,  130,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  135,    0,  142,  147,  148,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,    0,
        0,    0,    0,  152,    0,    0,    0,    0,    0,  136,

        0,  129,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,    1,    1,    1,    1,    1,    1,   14,    1,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,    1,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,   61,   62,   63,   64,   65,   66,   67,
       68,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1423] =
    {   0,
        0,    5,    7,    9, 1862, 1861,   22,   25, 1875, 1878,
       28,   31,    0,   97, 1878, 1857, 1815,    0, 1878, 1878,
     1865,    0, 1878,    0,   48,   56, 1878,   75, 1866, 1808,
     1863,   56, 1861,  141, 1878,    5,   19, 1818, 1808, 1812,
     1815, 1878, 1878, 1810,   24,    0, 1817,   22,   25,   32,
       55, 1800,   44, 1841, 1878, 1840, 1878, 1811, 1801, 1803,
     1838,    0,    0,   85,  109, 1801, 1878, 1846,    0,   47,
       30, 1803, 1793, 1797, 1800,  144,  149,  184,   31,    2,
     1803,   46,  131,   73,  144, 1786,  145,  203,  206,  209,
     1795, 1784, 1784, 1798, 1782, 1779, 1792, 1781, 1785, 1774,

     1775, 1777, 1767, 1775, 1775, 1777, 1778, 1768, 1775, 1774,
     1776, 1779,   89, 1779, 1759, 1766, 1776, 1767, 1771, 1757,
     1750, 1749, 1756,  156, 1800, 1878, 1799, 1878, 1761, 1750,
     1750, 1764, 1748, 1745, 1758, 1747, 1751,  213, 1878,  229,
     1878,  232, 1878, 1740, 1741, 1743, 1733, 1741, 1741, 1743,
     1744, 1734, 1741, 1740, 1742, 1745,  134, 1745, 1725, 1732,
     1742, 1733, 1737, 1723,  236, 1878, 1716,  239, 1878,  248,
     1878, 1715, 1725, 1735, 1734, 1720, 1755,  102, 1753, 1722,
     1723,  207, 1722, 1721, 1718, 1717, 1720, 1719, 1718, 1703,
     1707, 1707, 1730, 1703, 1702, 1707, 1699, 1726, 1704, 1688,

     1704, 1691, 1698, 1699, 1698, 1702,   94, 1687,   94, 1685,
     1691, 1701, 1700, 1686, 1721,  144, 1719, 1688, 1689,  255,
     1688, 1687, 1684, 1683, 1686, 1685, 1684, 1669, 1673, 1673,
     1696, 1669, 1668, 1673, 1665,  258, 1671, 1655, 1671, 1658,
     1665, 1666, 1665, 1668, 1648, 1668, 1663, 1660, 1651, 1660,
     1660, 1647, 1656, 1658, 1645, 1652, 1655, 1640, 1645, 1644,
     1878, 1653, 1638,  232, 1635, 1652, 1650, 1632, 1636, 1648,
     1643, 1646, 1642, 1878, 1637, 1636,    1, 1625, 1624, 1632,
     1635,  281, 1636, 1614, 1632, 1612, 1632, 1627, 1624, 1615,
     1624, 1624, 1611, 1620,  284, 1878, 1622, 1609, 1616, 1619,

     1604, 1609, 1608,  296, 1617, 1602,  300, 1599, 1616, 1614,
     1596, 1600, 1612, 1607,  303, 1878, 1610, 1606,  306, 1601,
     1600,    4, 1589, 1588, 1610,  189, 1595, 1594, 1601, 1592,
     1586, 1593, 1590, 1578, 1578, 1594, 1580, 1616, 1584, 1571,
     1570, 1570, 1599, 1567, 1581, 1574, 1590, 1878, 1566, 1572,
     1878, 1577, 1568, 1878, 1566, 1589, 1558, 1878, 1575, 1560,
     1878, 1878, 1560, 1556,  276, 1549,  322, 1563, 1554, 1574,
      212, 1559, 1558, 1565, 1556, 1550, 1557, 1554, 1542, 1542,
     1558, 1544, 1580, 1548, 1535, 1534,  312, 1878, 1534, 1563,
      328, 1878, 1531, 1545, 1538, 1554,  336, 1530, 1536,  339,

     1541, 1532,  344, 1530, 1553,  347, 1878, 1522,  355, 1539,
     1524,  363,  366, 1524, 1517, 1535, 1516, 1520, 1520, 1516,
     1543, 1525, 1524, 1878, 1519, 1503, 1519, 1510, 1529, 1510,
     1509, 1878, 1519, 1519, 1513, 1498, 1500, 1492, 1510, 1513,
     1525, 1507, 1509, 1515, 1507, 1496, 1500, 1488, 1487,  371,
     1484, 1498, 1497, 1487, 1480, 1498, 1479, 1483, 1483, 1479,
     1506, 1488, 1487,  382, 1482, 1466, 1482, 1473,  385, 1474,
     1473,  388, 1483, 1483, 1477, 1462, 1464,  391, 1878, 1456,
     1474,  394, 1878, 1477, 1489,  410, 1878, 1471, 1473,  413,
      416, 1878, 1472, 1461,  419, 1878,  436, 1878, 1463, 1458,

     1466, 1445, 1461, 1462, 1447, 1464, 1461, 1459, 1455,  165,
     1464, 1446, 1445,  348, 1468, 1439, 1442, 1480, 1466, 1452,
     1466, 1448, 1433, 1429, 1878, 1438, 1433, 1434, 1425,  439,
     1435, 1434, 1425, 1428,  442, 1431, 1426, 1434, 1413, 1429,
     1430, 1415, 1432, 1429, 1427,  445, 1878, 1423,  227, 1432,
     1414,  457, 1878, 1413,  370, 1436,  461, 1878, 1407, 1410,
     1448, 1434, 1420, 1434, 1416, 1401, 1397,  464, 1406,  467,
     1878, 1401, 1402, 1393, 1393, 1409, 1401, 1878, 1416, 1389,
     1398, 1393, 1386, 1878, 1390, 1392, 1878, 1387, 1382, 1391,
     1384, 1383, 1382, 1377, 1376, 1380, 1392, 1368, 1376, 1371,

     1365, 1375, 1382, 1377, 1380, 1371,  473, 1878, 1368,  483,
     1368, 1380,  488,  491, 1361, 1377, 1369,  498, 1384, 1357,
     1366, 1361, 1354,  503, 1358, 1360,  506, 1355, 1350, 1359,
     1352, 1351, 1350, 1345, 1344, 1348, 1360, 1336, 1344, 1339,
     1333, 1343,  509, 1878, 1350, 1345, 1348, 1339, 1878, 1346,
     1330, 1330, 1343, 1332, 1341, 1330, 1356, 1323, 1325, 1340,
     1321, 1338, 1329, 1328, 1334, 1320,    0,   60, 1878,   90,
     1878,  124,  134,  142,  137, 1878,  169,  161,  514,  525,
      210,  217,  530,  515,  544,  205,  191,  550, 1878,  200,
      217,  212,  224,  215,  555, 1878,  560,  212,  566, 1878,

      220,  237,  228,  251,  258,  259,  274,  268,  274,  270,
      571,  286,  576,  304,  298,  305,  291,  582,  306,  299,
      301,  326,  315,  321, 1878,  320,  356,  371,  351,  354,
     1878,  361,  352,  367,  379,  365,  395,  382,  387,  375,
      386,  374, 1878, 1878,  587,  592,  398,  396,  395,  397,
      399,  411,  420,  434,  437,  439,  435,  424,  598, 1878,
      442,  452,  474,  460,  464,  602,  463,  605, 1878,  480,
      505,  484,  488,  608,  494,  485,  492,  513,  502,  532,
      522,  614, 1878,  531,  624, 1878,  522,  533,  524,  630,
      633, 1878,  636, 1878, 1878,  534, 1878, 1878,  588,  556,

      576,  586,  566,  588,  567,  579,  587,  576,  586, 1878,
      583,  601,  588, 1878,  652, 1878,  588,  599,  610,  591,
      611,  607,  598,  601,  602,  602,  609,  620,  620,  608,
      668,  671,  613,  675,  678,  687, 1878,  694,  626,  639,
      649,  629,  697, 1878,  652,  631,  639,  647,  637,  647,
      705,  647,  665,  652,  713,  721, 1878,  725, 1878,  665,
      660,  676,  682,  675,  670,  685,  686, 1878, 1878,  687,
     1878,  675,  686,  695, 1878,  678,  680,  699,  677,  723,
      687,  710,  698,  687,  702,  707,  694,  690,  700,  754,
     1878,  757, 1878,  709,  761, 1878,  764, 1878,  773, 1878,

      710,  725,  723,  722,  717,  733,  734,  782,  785,  742,
      790,  733,  794, 1878,  747,  756,  801,  806, 1878,  747,
      756,  756, 1878,  765,  770,  755,  764, 1878,  770,  761,
      758,  762,  761,  762,  793,  777,  768,  768,  777,  782,
      794,  804,  770,  772,  774,  801,  781,  785,  785,  841,
      797,  802,  787,  796,  848, 1878,  851, 1878,  857,  860,
     1878,  808,  807,  804,  867, 1878,  814,  825,  826, 1878,
      813, 1878,  827, 1878,  821,  827,  867,  829,  830,  839,
      836,  838,  843,  829,  832,  871,  825,  874,  836,  838,
      844,  860,  842,  855,  843,  854,  854,  902, 1878,  905,

      847,  911,  860,  914, 1878,  921,  862,  868, 1878,  877,
     1878,  874,  877, 1878,  871,  923,  875,  875,  881,  887,
      876,  871,  891,  890,  883,  884,  884,  892,  885,  900,
      892,  884,  882,  928,  906,  951,  907,  955,  958, 1878,
      910,  962, 1878,  915,  967, 1878,  974,  914,  913,  921,
      918,  924,  974,  934,  928,  938,  941,  966,  952,  986,
      952,  927,  937,  947,  939,  953,  954,  932,  952,  942,
      953,  948, 1003, 1878,  947, 1007, 1878,  953,  950, 1012,
     1878,  959,  956,  961, 1878, 1878,  955, 1016, 1023,  976,
      965,  980,  963, 1878,  973,  992,  971, 1029,  998,  969,

      975, 1010, 1011,  993,  993,  995,  983,  988, 1045, 1048,
     1878, 1878,  987, 1878, 1052, 1878,  994,  999, 1009, 1000,
     1000, 1010, 1019, 1878,  998, 1029, 1016, 1012, 1013, 1067,
     1025, 1037, 1074, 1077, 1080, 1878, 1083, 1878, 1022, 1051,
     1029, 1043, 1044, 1040, 1033, 1045, 1039, 1033, 1049, 1044,
     1057, 1058, 1878, 1059, 1039, 1106, 1878, 1109, 1878, 1106,
     1047, 1095, 1070, 1112, 1057, 1068, 1064, 1075, 1065, 1064,
     1070, 1084, 1085, 1068, 1072, 1068, 1075, 1084, 1078, 1070,
     1076, 1878, 1077, 1118, 1093, 1137, 1095, 1093, 1119, 1085,
     1086, 1091, 1102, 1140, 1105, 1110, 1100, 1098, 1100, 1115,

     1104, 1109, 1102, 1878, 1158, 1131, 1108, 1109, 1100, 1116,
     1117, 1110, 1166, 1165, 1168, 1117, 1128, 1128, 1117, 1116,
     1120, 1118, 1144, 1878, 1138, 1146, 1147, 1126, 1128, 1129,
     1158, 1878, 1131, 1878, 1140, 1143, 1187, 1156, 1144, 1135,
     1137, 1132, 1140, 1134, 1135, 1155, 1147, 1148, 1143, 1155,
     1141, 1149, 1158, 1151, 1878, 1145, 1155, 1147, 1178, 1157,
     1155, 1159, 1160, 1215, 1184, 1196, 1168, 1167, 1166, 1176,
     1170, 1192, 1171, 1174, 1204, 1167, 1187, 1175, 1189, 1190,
     1878, 1172, 1183, 1184, 1175, 1181, 1194, 1197, 1238, 1197,
     1181, 1201, 1213, 1199, 1193, 1248, 1217, 1250, 1251, 1198,

     1221, 1222, 1201, 1209, 1207, 1258, 1253, 1229, 1207, 1262,
     1201, 1207, 1222, 1878, 1204, 1878, 1878, 1224, 1206, 1207,
     1227, 1256, 1229, 1878, 1269, 1217, 1232, 1878, 1222, 1245,
     1278, 1225, 1280, 1227, 1228, 1283, 1226, 1270, 1282, 1248,
     1288, 1246, 1235, 1878, 1248, 1878, 1249, 1250, 1878, 1240,
     1237, 1291, 1240, 1878, 1298, 1260, 1300, 1301, 1302, 1271,
     1250, 1302, 1259, 1878, 1245, 1878, 1878, 1878, 1246, 1277,
     1274, 1258, 1256, 1259, 1252, 1290, 1264, 1285, 1275, 1265,
     1296, 1289, 1260, 1323, 1281, 1294, 1264, 1273, 1878, 1328,
     1288, 1276, 1288, 1878, 1286, 1290, 1334, 1292, 1336, 1878,

     1286, 1878, 1299, 1338, 1293, 1289, 1286, 1286, 1305, 1293,
     1305, 1304, 1348, 1878, 1878, 1354, 1358, 1362, 1366, 1370,
     1374, 1377
    } ;

static yyconst flex_int16_t yy_def[1423] =
    {   0,
     1416, 1416, 1417, 1417, 1418, 1418, 1419, 1419, 1415, 1415,
     1415, 1415, 1420, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1421, 1415, 1422, 1415, 1422, 1415, 1415, 1415, 1415,
     1420,   14, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1421, 1422, 1415, 1422, 1415, 1415, 1415,   34, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415,    0, 1415, 1415, 1415, 1415, 1415,
     1415, 1415
    } ;

static yyconst flex_int16_t yy_nxt[1947] =
    {   0,
     1415,   11,   12,   11, 1415,   13,   11,   12,   11,   20,
       13,   20, 1415,   21,   14,   21,   15,   16, 1415,   14,
     1415,   15,   16,   25,   26,   26,   25,   26,   26,   28,
       28,   28,   28,   28,   28, 1415,   27, 1415,  359,   27,
      360,  410,   29,  411,  103,   29,  147,  737,   17,   64,
       64,   64,  104,   17,  148, 1415,   59,   64,   65,   65,
     1415,   60,   91,   93, 1415,   92,   18,  106,  101,  108,
       94,   18,  102, 1415,  131,  145,   28,   28,   28,  146,
      111,  132,   95,  109,  107,  110,   64,   64,   64,   29,
      112,  150,  118,  133,   30,  207,  119,   30,   32,   32,

       32,   33,  120,  113,  129,   34,  114,  130,  151,  115,
       64,   65,   65,  116,   35,   36,  738,   37,   38,   39,
       40,  155,   41,   42,   43,   44,   45,   46,   47,   48,
       49,  156,   50,   51,   52,  195,  739,   53,   54,   55,
       56,   30,   69,   69,   69,  138,  138,  138,  249,  196,
      140,  140,  140,  740,  250,  283,  284,  207,  281,   70,
      139,   71,   72,   73,   74,  141,   75,   76,   77,   78,
       79,   80,   81,   82,   83,  152,   84,   85,   86,  741,
      233,   87,   88,   89,   90,  142,  142,  142,  742,  153,
      290,  154,  157,  162,  234,  158,  291,  163,  159,  743,

      143,  586,  160,  164,  165,  165,  165,  168,  168,  168,
      170,  170,  170,  208,  138,  138,  138,  744,  745,  166,
      415,  167,  169,  748,  416,  171,  587,  172,  254,  139,
      140,  140,  140,  142,  142,  142,  144,  165,  165,  165,
      168,  168,  168,  455,  255,  141,  749,  456,  143,  170,
      170,  170,  166,  761,  762,  169,  295,  295,  295,  315,
      315,  315,  763,  626,  171,  764,  344,  345,  346,  256,
      765,  296,  766,  767,  316,  771,  297,  365,  365,  365,
      772,  773,  365,  365,  365,  295,  295,  295,  627,  317,
      774,  367,  298,  347,  366,  775,  367,  387,  387,  387,

      296,  391,  391,  391,  315,  315,  315,  406,  406,  406,
      776,  777,  388,  387,  387,  387,  392,  299,  778,  316,
      779,  780,  407,  450,  450,  450,  781,  451,  388,  391,
      391,  391,  784,  787,  393,  394,  395,  478,  478,  478,
      482,  482,  482,  788,  392,  486,  486,  486,  406,  406,
      406,  789,  479,  790,  793,  483,  491,  491,  491,  794,
      487,  396,  795,  407,  495,  495,  495,  497,  497,  497,
      796,  492,  450,  450,  450,  797,  451,  591,  798,  496,
      799,  592,  498,  546,  546,  546,  552,  552,  552,  557,
      557,  557,  478,  478,  478,  482,  482,  482,  547,  631,

      800,  553,  801,  632,  558,  802,  803,  479,  804,  805,
      483,  486,  486,  486,  570,  570,  570,  491,  491,  491,
      495,  495,  495,  554,  806,  807,  487,  808,  809,  571,
      810,  811,  492,  812,  813,  496,  814,  497,  497,  497,
      607,  607,  607,  613,  613,  613,  546,  546,  546,  817,
      818,  572,  498,  819,  608,  820,  821,  614,  552,  552,
      552,  547,  557,  557,  557,  643,  643,  643,  570,  570,
      570,  822,  823,  553,  607,  607,  607,  558,  824,  829,
      644,  825,  830,  571,  679,  679,  679,  827,  608,  613,
      613,  613,  683,  683,  683,  826,  684,  828,  680,  688,

      688,  688,  831,  614,  695,  695,  695,  699,  699,  699,
      643,  643,  643,  832,  689,  679,  679,  679,  833,  696,
      834,  835,  700,  838,  839,  644,  746,  746,  746,  680,
      747,  683,  683,  683,  750,  684,  840,  751,  841,  752,
      842,  845,  846,  753,  754,  759,  759,  759,  755,  847,
      756,  688,  688,  688,  757,  758,  695,  695,  695,  848,
      760,  768,  768,  768,  849,  850,  689,  699,  699,  699,
      851,  696,  782,  782,  782,  852,  769,  785,  785,  785,
      853,  854,  700,  791,  791,  791,  855,  783,  815,  815,
      815,  770,  786,  746,  746,  746,  860,  747,  792,  759,

      759,  759,  816,  836,  836,  836,  768,  768,  768,  843,
      843,  843,  863,  861,  760,  782,  782,  782,  837,  862,
      864,  769,  865,  866,  844,  785,  785,  785,  867,  868,
      783,  856,  856,  856,  791,  791,  791,  858,  858,  858,
      786,  869,  870,  871,  872,  873,  857,  874,  875,  792,
      876,  877,  859,  815,  815,  815,  878,  879,  880,  881,
      882,  883,  884,  885,  886,  887,  888,  816,  889,  890,
      890,  890,  892,  892,  892,  894,  895,  895,  895,  897,
      897,  897,  903,  904,  891,  905,  906,  893,  836,  836,
      836,  896,  907,  908,  898,  899,  899,  899,  843,  843,

      843,  909,  910,  837,  911,  912,  913,  913,  913,  915,
      900,  916,  917,  844,  918,  918,  918,  920,  921,  901,
      922,  914,  856,  856,  856,  902,  858,  858,  858,  919,
      923,  924,  925,  926,  927,  928,  929,  857,  930,  931,
      932,  859,  933,  934,  935,  936,  937,  938,  940,  941,
      942,  943,  944,  945,  946,  890,  890,  890,  892,  892,
      892,  947,  895,  895,  895,  897,  897,  897,  948,  949,
      891,  950,  939,  893,  899,  899,  899,  896,  951,  952,
      898,  953,  954,  955,  955,  955,  957,  957,  957,  900,
      959,  960,  960,  960,  962,  913,  913,  913,  956,  963,

      964,  958,  965,  965,  965,  967,  961,  918,  918,  918,
      914,  968,  969,  970,  971,  972,  973,  966,  974,  975,
      976,  977,  919,  978,  979,  980,  981,  982,  983,  985,
      986,  987,  991,  989,  992,  984,  990,  993,  994,  995,
      996,  997,  998,  998,  998, 1000, 1001, 1002, 1003,  955,
      955,  955,  957,  957,  957,  988, 1006,  999, 1004, 1004,
     1004,  960,  960,  960,  956, 1007, 1008,  958,  965,  965,
      965, 1009, 1010, 1005, 1011, 1012,  961, 1013, 1014, 1015,
     1016, 1017, 1018,  966, 1019, 1020, 1021, 1022, 1023, 1024,
     1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035,

     1036, 1037, 1038,  998,  998,  998, 1039, 1039, 1039, 1041,
     1044, 1029, 1042, 1042, 1042, 1004, 1004, 1004,  999, 1047,
     1048, 1040, 1045, 1045, 1045, 1049, 1050, 1043, 1051, 1052,
     1005, 1053, 1054, 1055, 1056, 1057, 1058, 1046, 1059, 1060,
     1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1073, 1073, 1073, 1075, 1076, 1076, 1076, 1039,
     1039, 1039, 1078, 1042, 1042, 1042, 1079, 1074, 1045, 1045,
     1045, 1077, 1082, 1083, 1040, 1080, 1080, 1080, 1043, 1084,
     1085, 1086, 1087, 1046, 1088, 1089, 1090, 1091, 1092, 1093,
     1081, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,

     1103, 1104, 1105, 1106, 1073, 1073, 1073, 1107, 1076, 1076,
     1076, 1108, 1109, 1080, 1080, 1080, 1110, 1111, 1112, 1074,
     1113, 1114, 1117, 1077, 1115, 1115, 1115, 1118, 1081, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1116, 1128,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1135, 1135, 1137,
     1137, 1137, 1139, 1115, 1115, 1115, 1140, 1141, 1142, 1143,
     1144, 1136, 1145, 1146, 1138, 1147, 1148, 1116, 1150, 1149,
     1151, 1152, 1153, 1154, 1155, 1156, 1156, 1156, 1158, 1158,
     1158, 1135, 1135, 1135, 1137, 1137, 1137, 1160, 1161, 1162,
     1157, 1163, 1164, 1159, 1165, 1166, 1136, 1167, 1168, 1138,

     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1156, 1156, 1156,
     1158, 1158, 1158, 1176, 1177, 1178, 1181, 1182, 1183, 1184,
     1179, 1185, 1157, 1186, 1187, 1159, 1188, 1189, 1190, 1191,
     1192, 1193, 1180, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1203, 1204, 1205, 1206, 1207, 1202, 1210, 1211, 1212,
     1213, 1208, 1214, 1215, 1216, 1217, 1209, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
     1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1252,
     1253, 1254, 1255, 1256, 1250, 1251, 1257, 1258, 1259, 1260,

     1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
     1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1286, 1287, 1288, 1289, 1290, 1284, 1291,
     1292, 1293, 1294, 1285, 1295, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,

     1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
     1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1414,   10,   10,   10,   10,   19,   19,
       19,   19,   22,   22,   22,   22,   24,   24,   24,   24,
       31,   31,  736,   31,   62,   62,   62,   63,  735,   63,
      734,  733,  732,  731,  730,  729,  728,  727,  726,  725,
      724,  723,  722,  721,  720,  719,  718,  717,  716,  715,

      714,  713,  712,  711,  710,  709,  708,  707,  706,  705,
      704,  703,  702,  701,  698,  697,  694,  693,  692,  691,
      690,  687,  686,  685,  682,  681,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      630,  629,  628,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  612,  611,  610,  609,  606,  605,
      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,

      594,  593,  590,  589,  588,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  556,
      555,  551,  550,  549,  548,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  494,  493,  490,  489,  488,  485,  484,  481,
      480,  477,  476,  475,  474,  473,  472,  471,  470,  469,

      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  454,  453,  452,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  414,  413,
      412,  409,  408,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  390,  389,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  364,  363,  362,  361,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  343,  342,

      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  294,
      293,  292,  289,  288,  287,  286,  285,  284,  282,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  253,  252,  251,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,

      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  161,  149,  137,  136,
      135,  134,  128,  127,  126,  125,  124,  123,  122,  121,
      117,  105,  100,   99,   98,   97,   96,   68,   67,   66,
       33,   61,   58,   57, 1415,   23,   23,    9, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415
    } ;

static yyconst flex_int16_t yy_chk[1947] =
    {   0,
        0,    1,    1,    1,    0,    1,    2,    2,    2,    3,
        2,    4,    0,    3,    1,    4,    1,    1,    0,    2,
        0,    2,    2,    7,    7,    7,    8,    8,    8,   11,
       11,   11,   12,   12,   12,    0,    7,    0,  277,    8,
      277,  322,   11,  322,   46,   12,   80,  667,    1,   25,
       25,   25,   46,    2,   80,    0,   18,   26,   26,   26,
       32,   18,   36,   37,   32,   36,    1,   48,   45,   49,
       37,    2,   45,   32,   71,   79,   28,   28,   28,   79,
       50,   71,   37,   49,   48,   49,   64,   64,   64,   28,
       50,   82,   53,   71,   11,  207,   53,   12,   14,   14,

       14,   14,   53,   51,   70,   14,   51,   70,   82,   51,
       65,   65,   65,   51,   14,   14,  668,   14,   14,   14,
       14,   84,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   84,   14,   14,   14,  113,  670,   14,   14,   14,
       14,   28,   34,   34,   34,   76,   76,   76,  178,  113,
       77,   77,   77,  672,  178,  209,  209,  124,  207,   34,
       76,   34,   34,   34,   34,   77,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   83,   34,   34,   34,  673,
      157,   34,   34,   34,   34,   78,   78,   78,  674,   83,
      216,   83,   85,   87,  157,   85,  216,   87,   85,  675,

       78,  510,   85,   87,   88,   88,   88,   89,   89,   89,
       90,   90,   90,  124,  138,  138,  138,  677,  678,   88,
      326,   88,   89,  681,  326,   90,  510,   90,  182,  138,
      140,  140,  140,  142,  142,  142,   78,  165,  165,  165,
      168,  168,  168,  371,  182,  140,  682,  371,  142,  170,
      170,  170,  165,  686,  687,  168,  220,  220,  220,  236,
      236,  236,  690,  549,  170,  691,  264,  264,  264,  182,
      692,  220,  693,  694,  236,  698,  220,  365,  365,  365,
      701,  702,  282,  282,  282,  295,  295,  295,  549,  236,
      703,  365,  220,  264,  282,  704,  282,  304,  304,  304,

      295,  307,  307,  307,  315,  315,  315,  319,  319,  319,
      705,  706,  304,  387,  387,  387,  307,  220,  707,  315,
      708,  709,  319,  367,  367,  367,  710,  367,  387,  391,
      391,  391,  712,  714,  307,  307,  307,  397,  397,  397,
      400,  400,  400,  715,  391,  403,  403,  403,  406,  406,
      406,  716,  397,  717,  719,  400,  409,  409,  409,  720,
      403,  307,  721,  406,  412,  412,  412,  413,  413,  413,
      722,  409,  450,  450,  450,  723,  450,  514,  724,  412,
      726,  514,  413,  464,  464,  464,  469,  469,  469,  472,
      472,  472,  478,  478,  478,  482,  482,  482,  464,  555,

      727,  469,  728,  555,  472,  729,  730,  478,  732,  733,
      482,  486,  486,  486,  490,  490,  490,  491,  491,  491,
      495,  495,  495,  469,  734,  735,  486,  736,  737,  490,
      738,  739,  491,  740,  741,  495,  742,  497,  497,  497,
      530,  530,  530,  535,  535,  535,  546,  546,  546,  747,
      748,  490,  497,  749,  530,  750,  751,  535,  552,  552,
      552,  546,  557,  557,  557,  568,  568,  568,  570,  570,
      570,  752,  753,  552,  607,  607,  607,  557,  754,  757,
      568,  755,  758,  570,  610,  610,  610,  756,  607,  613,
      613,  613,  614,  614,  614,  755,  614,  756,  610,  618,

      618,  618,  761,  613,  624,  624,  624,  627,  627,  627,
      643,  643,  643,  762,  618,  679,  679,  679,  763,  624,
      764,  765,  627,  767,  770,  643,  680,  680,  680,  679,
      680,  683,  683,  683,  684,  683,  771,  684,  772,  684,
      773,  775,  776,  684,  684,  685,  685,  685,  684,  777,
      684,  688,  688,  688,  684,  684,  695,  695,  695,  778,
      685,  697,  697,  697,  779,  780,  688,  699,  699,  699,
      781,  695,  711,  711,  711,  784,  697,  713,  713,  713,
      787,  788,  699,  718,  718,  718,  789,  711,  745,  745,
      745,  697,  713,  746,  746,  746,  796,  746,  718,  759,

      759,  759,  745,  766,  766,  766,  768,  768,  768,  774,
      774,  774,  800,  799,  759,  782,  782,  782,  766,  799,
      801,  768,  802,  803,  774,  785,  785,  785,  804,  805,
      782,  790,  790,  790,  791,  791,  791,  793,  793,  793,
      785,  806,  807,  808,  809,  811,  790,  812,  813,  791,
      817,  818,  793,  815,  815,  815,  819,  820,  821,  822,
      823,  824,  825,  826,  827,  828,  829,  815,  830,  831,
      831,  831,  832,  832,  832,  833,  834,  834,  834,  835,
      835,  835,  839,  840,  831,  841,  842,  832,  836,  836,
      836,  834,  845,  846,  835,  838,  838,  838,  843,  843,

      843,  847,  848,  836,  849,  850,  851,  851,  851,  852,
      838,  853,  854,  843,  855,  855,  855,  860,  861,  838,
      862,  851,  856,  856,  856,  838,  858,  858,  858,  855,
      863,  864,  865,  866,  867,  870,  872,  856,  873,  874,
      876,  858,  877,  878,  879,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  890,  890,  892,  892,
      892,  894,  895,  895,  895,  897,  897,  897,  901,  902,
      890,  903,  882,  892,  899,  899,  899,  895,  904,  905,
      897,  906,  907,  908,  908,  908,  909,  909,  909,  899,
      910,  911,  911,  911,  912,  913,  913,  913,  908,  915,

      916,  909,  917,  917,  917,  920,  911,  918,  918,  918,
      913,  921,  922,  924,  925,  926,  927,  917,  929,  930,
      931,  932,  918,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  943,  942,  944,  938,  942,  945,  946,  947,
      948,  949,  950,  950,  950,  951,  952,  953,  954,  955,
      955,  955,  957,  957,  957,  941,  962,  950,  959,  959,
      959,  960,  960,  960,  955,  963,  964,  957,  965,  965,
      965,  967,  968,  959,  969,  971,  960,  973,  975,  976,
      977,  978,  979,  965,  980,  981,  982,  983,  984,  985,
      986,  986,  987,  988,  989,  990,  991,  992,  993,  994,

      995,  996,  997,  998,  998,  998, 1000, 1000, 1000, 1001,
     1003,  988, 1002, 1002, 1002, 1004, 1004, 1004,  998, 1007,
     1008, 1000, 1006, 1006, 1006, 1010, 1012, 1002, 1013, 1015,
     1004, 1016, 1017, 1018, 1019, 1020, 1021, 1006, 1022, 1023,
     1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1036, 1036, 1036, 1037, 1038, 1038, 1038, 1039,
     1039, 1039, 1041, 1042, 1042, 1042, 1044, 1036, 1045, 1045,
     1045, 1038, 1048, 1049, 1039, 1047, 1047, 1047, 1042, 1050,
     1051, 1052, 1053, 1045, 1054, 1055, 1056, 1057, 1058, 1059,
     1047, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,

     1069, 1070, 1071, 1072, 1073, 1073, 1073, 1075, 1076, 1076,
     1076, 1078, 1079, 1080, 1080, 1080, 1082, 1083, 1084, 1073,
     1087, 1088, 1090, 1076, 1089, 1089, 1089, 1091, 1080, 1092,
     1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1089, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1109, 1109, 1110,
     1110, 1110, 1113, 1115, 1115, 1115, 1117, 1118, 1119, 1120,
     1121, 1109, 1122, 1123, 1110, 1125, 1126, 1115, 1127, 1126,
     1128, 1129, 1130, 1131, 1132, 1133, 1133, 1133, 1134, 1134,
     1134, 1135, 1135, 1135, 1137, 1137, 1137, 1139, 1140, 1141,
     1133, 1142, 1143, 1134, 1144, 1145, 1135, 1146, 1147, 1137,

     1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1156, 1156,
     1158, 1158, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1162, 1167, 1156, 1168, 1169, 1158, 1170, 1171, 1172, 1173,
     1174, 1175, 1162, 1176, 1177, 1178, 1179, 1180, 1181, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1184, 1190, 1191, 1192,
     1193, 1189, 1194, 1195, 1196, 1197, 1189, 1198, 1199, 1200,
     1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233,
     1235, 1236, 1237, 1238, 1231, 1231, 1239, 1240, 1241, 1242,

     1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1266, 1272,
     1273, 1274, 1275, 1266, 1276, 1277, 1278, 1279, 1280, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
     1313, 1315, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1326,
     1327, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1350,

     1351, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
     1362, 1363, 1365, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1386, 1387, 1388, 1390, 1391, 1392, 1393, 1395, 1396, 1397,
     1398, 1399, 1401, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1416, 1416, 1416, 1416, 1417, 1417,
     1417, 1417, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419,
     1420, 1420,  666, 1420, 1421, 1421, 1421, 1422,  665, 1422,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  648,  647,  646,  645,  642,

      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  626,  625,  623,  622,  621,  620,
      619,  617,  616,  615,  612,  611,  609,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  586,  585,  583,  582,
      581,  580,  579,  577,  576,  575,  574,  573,  572,  569,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  556,
      554,  551,  550,  548,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  534,  533,  532,  531,  529,  528,
      527,  526,  524,  523,  522,  521,  520,  519,  518,  517,

      516,  515,  513,  512,  511,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  494,  493,  489,  488,
      485,  484,  481,  480,  477,  476,  475,  474,  473,  471,
      470,  468,  467,  466,  465,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  431,  430,  429,  428,  427,
      426,  425,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  411,  410,  408,  405,  404,  402,  401,  399,
      398,  396,  395,  394,  393,  390,  389,  386,  385,  384,

      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  370,  369,  368,  366,  364,  363,  360,  359,
      357,  356,  355,  353,  352,  350,  349,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  325,  324,
      323,  321,  320,  318,  317,  314,  313,  312,  311,  310,
      309,  308,  306,  305,  303,  302,  301,  300,  299,  298,
      297,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  281,  280,  279,  278,  276,  275,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  263,  262,

      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  219,
      218,  217,  215,  214,  213,  212,  211,  210,  208,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  181,  180,  179,  177,  176,  175,  174,
      173,  172,  167,  164,  163,  162,  161,  160,  159,  158,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,

      146,  145,  144,  137,  136,  135,  134,  133,  132,  131,
      130,  129,  127,  125,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  112,  111,  110,  109,  108,  107,
      106,  105,  104,  103,  102,  101,  100,   99,   98,   97,
       96,   95,   94,   93,   92,   91,   86,   81,   75,   74,
       73,   72,   68,   66,   61,   60,   59,   58,   56,   54,
       52,   47,   44,   41,   40,   39,   38,   33,   31,   30,
       29,   21,   17,   16,    9,    6,    5, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

/*

This ignores white space outside of meaningful strings of characters.

*/

#ifdef WIN32
#include <io.h>
#define strdup _strdup
#define fileno _fileno
#define isatty _isatty
#define YY_NO_UNISTD_H
#endif
#include <string.h>          // for strdup
#include "kittingClasses.hh" // for classes referenced in kittingYACC.hh
#include "kittingYACC.hh"    // for tokens, yylval, etc.

#ifndef NO_ECHO
#define ECHO_IT 1
#else
#define ECHO_IT 0
#endif
#define ECH if (ECHO_IT) ECHO

extern int yyReadData;
extern int yyReadDataList;

#define INITIAL 0
#define COMMENT 1
#define DATA 2
#define DATALIST 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  if (yyReadData)
    {
      BEGIN(DATA);
      yyReadData = 0;
    }
  else if (yyReadDataList)
    {
      BEGIN(DATALIST);
    }

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1416 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1878 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(COMMENT); /* delete comment start */}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ ECH;  /* delete comment middle */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL); /* delete comment end */ }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ ECH; BEGIN(INITIAL);
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ ECH;
                          yylval.sVal = strdup(yytext);
                          return DATASTRING;
                        }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ ECH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yyReadDataList = 0;
                          unput('<');
			  BEGIN(INITIAL);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ECH; return ENCODING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ECH; return ENDVERSION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ECH; return STARTVERSION;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{ECH; return SCHEMALOCATION;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ECH; return XMLVERSION;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITEND;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ECH; return ANGLEUNITSTART;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBEREND;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYNUMBERSTART;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSEND;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ECH; return ARRAYRADIUSSTART;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYEND;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ECH; return CAPACITYSTART;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONEND;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ECH; return CHANGINGSTATIONSTART;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETEREND;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{ECH; return CUPDIAMETERSTART;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONEND;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ECH; return DESCRIPTIONSTART;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMEEND;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{ECH; return DESIGNNAMESTART;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSEND;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORHOLDERSSTART;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMEEND;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORNAMESTART;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTOREND;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{ECH; return ENDEFFECTORSTART;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDEND;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{ECH; return FINISHEDSTART;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTEND;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
{ECH; return HEIGHTSTART;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{ECH; return IEND;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ECH; return ISTART;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ECH; return JEND;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ECH; return JSTART;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{ECH; return KEND;}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{ECH; return KSTART;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMEEND;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNNAMESTART;}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNEND;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{ECH; return KITDESIGNSTART;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMEEND;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSKUNAMESTART;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSEND;}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ECH; return KITTRAYSSTART;}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ECH; return KITEND;}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ECH; return KITSTART;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONEND;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{ECH; return KITTINGWORKSTATIONSTART;}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINEREND;}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ECH; return LARGECONTAINERSTART;}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITEND;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHUNITSTART;}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHEND;}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ECH; return LENGTHSTART;}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTEND;}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMLOADWEIGHTSTART;}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTEND;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ECH; return MAXIMUMPOINTSTART;}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTEND;}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ECH; return MINIMUMPOINTSTART;}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ECH; return NAMEEND;}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ECH; return NAMESTART;}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTEND;}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{ECH; return OBJECTSTART;}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLEEND;}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{ECH; return OTHEROBSTACLESTART;}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYEND;}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{ECH; return PARTQUANTITYSTART;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSEEND;}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{ECH; return PARTREFANDPOSESTART;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMEEND;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{ECH; return PARTSKUNAMESTART;}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{ECH; return PARTEND;}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTART;}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYEND;}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{ECH; return PARTSTRAYSTART;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{ECH; return POINTEND;}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{ECH; return POINTSTART;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONEND;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{ECH; return PRIMARYLOCATIONSTART;}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTEND;}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{ECH; return REFOBJECTSTART;}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTEND;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{ECH; return ROBOTSTART;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONEND;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{ECH; return SECONDARYLOCATIONSTART;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBEREND;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
{ECH; return SERIALNUMBERSTART;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{ECH; return SHAPEEND;}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
{ECH; return SHAPESTART;}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMEEND;}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ECH; return SKUNAMESTART;}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
{ECH; return SKUEND;}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{ECH; return SKUSTART;}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTEND;}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{ECH; return SOLIDOBJECTSTART;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{ECH; return TRAYEND;}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{ECH; return TRAYSTART;}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITEND;}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTUNITSTART;}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTEND;}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{ECH; return WEIGHTSTART;}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHEND;}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{ECH; return WIDTHSTART;}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLEEND;}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{ECH; return WORKTABLESTART;}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMEEND;}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{ECH; return WORKVOLUMESTART;}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{ECH; return XAXISEND;}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{ECH; return XAXISSTART;}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
{ECH; return XEND;}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{ECH; return XSTART;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{ECH; return YEND;}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{ECH; return YSTART;}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISEND;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{ECH; return ZAXISSTART;}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{ECH; return ZEND;}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{ECH; return ZSTART;}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{ ECH; return BOXYOBJECTTYPEDECL; }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORCHANGINGSTATIONTYPEDECL; }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORHOLDERTYPEDECL; }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
{ ECH; return ENDEFFECTORTYPEDECL; }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{ ECH; return GRIPPEREFFECTORTYPEDECL; }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{ ECH; return KITTRAYTYPEDECL; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{ ECH; return KITTYPEDECL; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{ ECH; return KITTINGWORKSTATIONTYPEDECL; }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHEMPTYKITTRAYSTYPEDECL; }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{ ECH; return LARGEBOXWITHKITSTYPEDECL; }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{ ECH; return LARGECONTAINERTYPEDECL; }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{ ECH; return PARTTYPEDECL; }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSBINTYPEDECL; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYTYPEDECL; }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{ ECH; return PARTSTRAYWITHPARTSTYPEDECL; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONINTYPEDECL; }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONONTYPEDECL; }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{ ECH; return POSELOCATIONTYPEDECL; }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
{ ECH; return POSEONLYLOCATIONTYPEDECL; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONINTYPEDECL; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONONTYPEDECL; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
{ ECH; return RELATIVELOCATIONTYPEDECL; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
{ ECH; return ROBOTTYPEDECL; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORMULTICUPTYPEDECL; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORSINGLECUPTYPEDECL; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
{ ECH; return VACUUMEFFECTORTYPEDECL; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
{ ECH; return WORKTABLETYPEDECL; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
{ECH; return XMLNSTARGET;}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
{ECH;
                                           return XMLNSPREFIX;}
	YY_BREAK
case 157:
YY_RULE_SETUP
{ECH; return ENDITEM;}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
{ECH;
                            int first;
                            int n;
                            for (first = 0; yytext[first] != '"'; first++);
                            first++;
                            for (n = first; yytext[n] != '"'; n++);
                            yytext[n] = 0;
                            yylval.sVal = strdup(yytext + first);
                            return TERMINALSTRING;
                           }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
{ECH;}
	YY_BREAK
case 160:
YY_RULE_SETUP
{ECH; return BAD;}
	YY_BREAK
case 161:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATA):
case YY_STATE_EOF(DATALIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1416 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1416 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1415);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap()
{
  return 1;
}

